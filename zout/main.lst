   1:				.include "addresses.s"
**** functions/addresses.s ****
   1:     -	0000          	IO_CTC0_C0  equ 0x00
   2:     -	0001          	IO_CTC0_C1  equ 0x01
   3:     -	0002          	IO_CTC0_C2  equ 0x02
   4:     -	0003          	IO_CTC0_C3  equ 0x03
   5:				
   6:     -	0012          	IO_SIO0A_C  equ 00010010b
   7:     -	0010          	IO_SIO0A_D  equ 00010000b
   8:     -	0013          	IO_SIO0B_C  equ 00010011b
   9:     -	0011          	IO_SIO0B_D  equ 00010001b
  10:				
  11:     -	0020          	IO_RTC_SEC0  equ 00100000b
  12:     -	0021          	IO_RTC_SEC1  equ 00100001b
  13:     -	0022          	IO_RTC_MIN0  equ 00100010b
  14:     -	0023          	IO_RTC_MIN1  equ 00100011b
  15:     -	0024          	IO_RTC_HOUR  equ 00100100b
  16:     -	0025          	IO_RTC_AMPM  equ 00100101b
  17:     -	0026          	IO_RTC_DAY0  equ 00100110b
  18:     -	0027          	IO_RTC_DAY1  equ 00100111b
  19:     -	0028          	IO_RTC_MON0  equ 00101000b
  20:     -	0029          	IO_RTC_MON1  equ 00101001b
  21:     -	002A          	IO_RTC_YERR0 equ 00101010b
  22:     -	002B          	IO_RTC_YEAR1 equ 00101011b
  23:     -	002C          	IO_RTC_WEEK  equ 00101100b
  24:     -	002D          	IO_RTC_CTR_D equ 00101101b
  25:     -	002E          	IO_RTC_CTR_E equ 00101110b
  26:     -	002F          	IO_RTC_CTR_F equ 00101111b
  27:				
  28:     -	0040          	IO_AY0_ADDR equ 01000000b
  29:     -	0041          	IO_AY0_DATA equ 01000001b
  30:     -	0042          	IO_AY1_ADDR equ 01000010b
  31:     -	0043          	IO_AY1_DATA equ 01000011b
  32:				
  33:     -	0000          	START_ROM   equ 0x0000
  34:     -	0020          	IO_REG0     equ 0x20
  35:				
  36:     -	0100          	PROG_ROM_START equ 0x0100
**** main.asm ****
   2:     -	4000          	PROG_MEM_START equ 04000h
   3:				
   4:     -	4000          	MEM_CURSOR_STATE equ 0x4000  ; 1 byte var
   5:     -	4001          	MEM_LAST_CHAR equ 0x4001  ; 1 byte var
   6:     -	4003          	MEM_PROMPT_SIZE equ 0x4003
   7:     -	4005          	MEM_PROMPT_START equ 0x4005
   8:				
   9:     -	E000          	CMD_CRS_SPEED equ 0xE000
  10:				
  11:				; Include Kernel Libs at 0x0380
  12:     -	0380          	    org 0x0380
  13:				.include "conversions.s"
**** functions/conversions.s ****
   1:				
   2:				; Kernel Conversion Functions
   3:				
   4:				
   5:				
   6:				;*****************
   7:				; Convert Byte to Hex Char (ASCII)
   8:				;*****************
   9:				;Description: the StrLength function inline
  10:				;
  11:				;Inputs: A contains input byte
  12:				;
  13:				;Outputs: BC contains 2 Bytes of ASCII (HEX)
  14:				;
  15:				;Destroys: A, BC,
  16:     -	0380          	STRCONV_BYTES_TO_HEX:
  17:    0+11	0380  F5      	    PUSH AF;Backup A Register
  18:   11+4	0381  1F      	    RRA
  19:   15+4	0382  1F      	    RRA
  20:   19+4	0383  1F      	    RRA
  21:   23+4	0384  1F      	    RRA
  22:   27+17	0385  CD8F03  	    CALL STRCONV_BYTES_TO_HEX_1
  23:				    ;LD A,D
  24:   44+4	0388  47      	    LD B,A  
  25:   48+10	0389  F1      	    POP AF ; Reload first Byte
  26:   58+17	038A  CD8F03  	    CALL STRCONV_BYTES_TO_HEX_1
  27:				    ;LD A,D
  28:   75+4	038D  4F      	    LD C,A
  29:   79+10	038E  C9      	    RET
  30:				
  31:     -	038F          	STRCONV_BYTES_TO_HEX_1:
  32:   89+7	038F  E60F    	    AND 0x0F
  33:   96+7	0391  C630    	    ADD 48
  34:  103+7	0393  FE3A    	    CP 58 ; Check if less than 58 (less than ASCII 9)
  35:  110+7+5	0395  3802    	    JR C, STRCONV_BYTES_TO_HEX_2
  36:  117+7	0397  C607    	    ADD 7 ; A-F
  37:     -	0399          	STRCONV_BYTES_TO_HEX_2:
  38:				    ;LD D,A
  39:  124+10	0399  C9      	    RET
  40:				
  41:				
  42:				
**** main.asm ****
  14:				.include "console.s"
**** functions/console.s ****
   1:				; Kernel Konsole Functions
   2:				
   3:     -	0010          	VAR_CONSOLE_BAUD equ 16d ; BAUD 14400 @ 3.686441MHz & CPUCLK/2
   4:				
   5:				;*****************
   6:				; CONSOLE_PRINTSTR
   7:				;*****************
   8:				;Description: Sends null-terminated String via Serial Port
   9:				;
  10:				;Inputs: BC contains start address of stringg
  11:				;
  12:				;Outputs: Output to IO_SIO0B_D
  13:				;
  14:				;Destroys: none
  15:     -	039A          	CONSOLE_PRINTSTR:
  16:				    ; BC contains String offset
  17:				    ; Prints null terminated string
  18:  134+11	039A  F5      	    PUSH AF
  19:  145+11	039B  C5      	    PUSH BC
  20:     -	039C          	CONSOLE_PRINTSTR_LOOP:
  21:  156+7	039C  0A      	    LD A,(BC)
  22:				
  23:				    ; Return if nullbyte
  24:  163+7	039D  F600    	    OR 0
  25:  170+7+5	039F  2809    	    JR Z, CONSOLE_PRINTSTR_EXIT
  26:				    ; Print Char
  27:  177+11	03A1  D311    	    out (IO_SIO0B_D),A
  28:  188+17	03A3  CDB803  	    call TX_EMP
  29:				
  30:				    ; INC BC and JP start of loop
  31:  205+6	03A6  03      	    INC BC
  32:  211+10	03A7  C39C03  	    jp CONSOLE_PRINTSTR_LOOP
  33:     -	03AA          	CONSOLE_PRINTSTR_EXIT:
  34:  221+10	03AA  C1      	    POP BC
  35:  231+10	03AB  F1      	    POP AF
  36:  241+10	03AC  C9      	    RET
  37:				
  38:				;*****************
  39:				; CONSOLE_READ_CHAR
  40:				;*****************
  41:				;Description: Gets a single byte from console port
  42:				;
  43:				;Inputs: BC contains start address of stringg
  44:				;
  45:				;Outputs: Output to IO_SIO0B_D
  46:				;
  47:				;Destroys: A
  48:				
  49:     -	03AD          	CONSOLE_READ_CHAR:
  50:  251+4	03AD  AF      	    XOR	A
  51:  255+11	03AE  D313    	    OUT (IO_SIO0B_C), A
  52:  266+11	03B0  DB13    	    IN A, (IO_SIO0B_C)
  53:  277+7	03B2  E601    	    AND	1
  54:  284+5+6	03B4  C8      	    RET	Z	
  55:  289+11	03B5  DB11    	    IN A, (IO_SIO0B_D)
  56:				    ;LD D,A
  57:  300+10	03B7  C9      	    RET
  58:				
  59:				;*****************
  60:				; CONSOLE_TX_WAIT/TX_EMP
  61:				;*****************
  62:				;Description: Waits until byte is sent
  63:				;
  64:				;Inputs: none
  65:				;
  66:				;Outputs: none
  67:				;
  68:				;Destroys: A
  69:     -	03B8          	TX_EMP: ; DONT USE!!! DEPRECATED
  70:  310+10	03B8  C3BB03  	    jp CONSOLE_TX_WAIT
  71:     -	03BB          	CONSOLE_TX_WAIT:
  72:				    ; check for TX buffer empty
  73:  320+4	03BB  97      	    sub a ;clear a, write into WR0: select RR0
  74:  324+4	03BC  3C      	    inc a ;select RR1
  75:  328+11	03BD  D313    	    out (IO_SIO0B_C),A
  76:  339+11	03BF  DB13    	    in A,(IO_SIO0B_C) ;read RRx
  77:  350+8	03C1  CB47    	    bit 0,A
  78:  358+10	03C3  CABB03  	    jp z,CONSOLE_TX_WAIT
  79:  368+10	03C6  C9      	    ret
  80:				
  81:				;*****************
  82:				; CONSOLE_INIT
  83:				;*****************
  84:				;Description: Initializes CTC & SIO on Port B
  85:				;
  86:				;Inputs: none 
  87:				;
  88:				;Outputs: none
  89:				;
  90:				;Destroys: A
  91:     -	03C7          	CONSOLE_INIT:
  92:				    ; Setup CTC
  93:				    ; Init Ch1 (SIO0B)
  94:				    ; For 4MHz CPU CLK 00000111b
  95:				    ; For EXT CLK
  96:  378+7	03C7  3E0F    	    LD A,00001111b
  97:  385+11	03C9  D301    	    OUT (IO_CTC0_C1),A
  98:				
  99:  396+7	03CB  3E10    	    LD A,VAR_CONSOLE_BAUD
 100:  403+11	03CD  D301    	    OUT (IO_CTC0_C1),A
 101:				
 102:				    ; Setup SIO
 103:				     ;set up TX and RX:W
 104:  414+7	03CF  3E30    	    ld a,00110000b ;write into WR0: error reset, select WR0
 105:  421+11	03D1  D313    	    out (IO_SIO0B_C),A
 106:  432+7	03D3  3E18    	    ld a,018h ;write into WR0: channel reset
 107:  439+11	03D5  D313    	    out (IO_SIO0B_C),A
 108:				
 109:  450+7	03D7  3E04    	    ld a,004h ;write into WR0: select WR4
 110:  457+11	03D9  D313    	    out (IO_SIO0B_C),A
 111:				    ;ld a,44h ;44h write into WR4: clkx16,1 stop bit, no parity
 112:  468+7	03DB  3E04    	    ld a,04h ;44h write into WR4: clkx1,1 stop bit, no parity
 113:  475+11	03DD  D313    	    out (IO_SIO0B_C),A
 114:				
 115:  486+7	03DF  3E05    	    ld a,005h ;write into WR0: select WR5
 116:  493+11	03E1  D313    	    out (IO_SIO0B_C),A
 117:				    ;ld a,0E8h ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
 118:  504+7	03E3  3E68    	    ld a,068h ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
 119:  511+11	03E5  D313    	    out (IO_SIO0B_C),A
 120:				
 121:  522+7	03E7  3E01    	    ld a,01h ;write into WR0: select WR1
 122:  529+11	03E9  D313    	    out (IO_SIO0B_C),A
 123:  540+7	03EB  3E04    	    ld a,00000100b ;no interrupt in CH B, special RX condition affects vect
 124:  547+11	03ED  D313    	    out (IO_SIO0B_C),A
 125:				
 126:  558+7	03EF  3E02    	    ld a,02h ;write into WR0: select WR2
 127:  565+11	03F1  D313    	    out (IO_SIO0B_C),A
 128:  576+7	03F3  3E00    	    ld a,0h ;write into WR2: cmd line int vect (see int vec table)
 129:				    ;bits D3,D2,D1 are changed according to RX condition
 130:  583+11	03F5  D313    	    out (IO_SIO0B_C),A
 131:				
 132:				    ;ld a,01h ;write into WR0: select WR1
 133:				    ;out (IO_SIO0B_C),A
 134:				    ;ld a,00011000b ;interrupt on all RX characters, parity is not a spec RX condition
 135:				    ;buffer overrun is a spec RX condition
 136:				    ;out (IO_SIO0B_C),A
 137:				
 138:				    ;enable SIO channel A RX
 139:  594+7	03F7  3E03    	    ld a,003h ;write into WR0: select WR3
 140:  601+11	03F9  D313    	    out (IO_SIO0B_C),A
 141:  612+7	03FB  3EC1    	    ld a,0C1h ;RX 8bit, auto enable off, RX on
 142:  619+11	03FD  D313    	    out (IO_SIO0B_C),A
 143:				    ;Channel A RX active
 144:				
 145:  630+7	03FF  3E25    	    LD A,'%'
 146:  637+11	0401  D311    	    out (IO_SIO0B_D),A
 147:  648+17	0403  CDBB03  	    call CONSOLE_TX_WAIT
 148:				
 149:  665+10	0406  C9      	    RET
 150:				
 151:				
 152:				
 153:				;;
 154:				
 155:				
**** main.asm ****
  15:				.include "io.s"
**** functions/io.s ****
   1:				; A contains Data
   2:				; C Contains Addr
   3:     -	0407          	AY0_WRITE_REG:
   4:  675+4	0407  47      	    LD B,A
   5:  679+4	0408  7A      	    LD A,D
   6:  683+11	0409  D340    	    OUT (IO_AY0_ADDR),A
   7:  694+4	040B  78      	    LD A,B
   8:  698+11	040C  D341    	    OUT (IO_AY0_DATA),A
   9:  709+10	040E  C9      	    RET
  10:				
  11:				; Serial Util Functions
  12:     -	040F          	A_RTS_OFF:
  13:  719+7	040F  3E05    	    ld a,005h ;write into WR0: select WR5
  14:  726+11	0411  D313    	    out (IO_SIO0B_C),A
  15:  737+7	0413  3EE8    	    ld a,0E8h ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
  16:  744+11	0415  D313    	    out (IO_SIO0B_C),A
  17:  755+10	0417  C9      	    ret
  18:     -	0418          	A_RTS_ON:
  19:  765+7	0418  3E05    	    ld a,005h ;write into WR0: select WR5
  20:  772+11	041A  D313    	    out (IO_SIO0B_C),A
  21:  783+7	041C  3EEA    	    ld a,0EAh ;DTR active, TX 8bit, BREAK off, TX on, RTS active
  22:  790+11	041E  D313    	    out (IO_SIO0B_C),A
  23:  801+10	0420  C9      	    ret
  24:				
  25:     -	0421          	RX_CHA_AVAILABLE:
  26:  811+11	0421  F5      	    push AF ;backup AF
  27:				
  28:  822+7	0422  3EFF    	    LD A,0xFF
  29:  829+11	0424  D320    	    OUT (IO_REG0),A
  30:				
  31:  840+17	0426  CD0F04  	    call A_RTS_OFF
  32:  857+11	0429  DB11    	    in A,(IO_SIO0B_D) ;read RX character into A
  33:				    ; A holds received character
  34:				    ;do something with the received character
  35:				    ;echo character to host
  36:  868+11	042B  D311    	    out (IO_SIO0B_D),A
  37:  879+17	042D  CDB803  	    call TX_EMP
  38:  896+4	0430  FB      	    ei ;see comments below
  39:  900+17	0431  CD1804  	    call A_RTS_ON ;see comments below
  40:				
  41:				    ;LD A,0x00
  42:				    ;OUT (IO_REG0),A
  43:				
  44:  917+10	0434  F1      	    pop AF ;restore AF
**** main.asm ****
  16:  927+14	0435  ED4D    	    Reti
  17:				.include "commands.s"
**** functions/commands.s ****
   1:     -	0437          	MOD_COMMANDS:
   2:				    ;org 0x0370
   3:				
   4:				;-------------------------------------------------------------
   5:				; command directory
   6:				;-------------------------------------------------------------
   7:     -	0437          	ARR_COMMANDS:
   8:				    ; Version
   9:     -	0437  ED04    	    word [CMD_VERSION]
  10:     -	0439  76657200	    db "ver",0
  11:				    ; Clear Screen
  12:     -	043D  0205    	    word [CMD_CLEAR]
  13:     -	043F  636C7200	    db "clr",0
  14:				    ; Help
  15:     -	0443  D804    	    word [CMD_HELP]
  16:     -	0445  3F00    	    db "?",0
  17:				    ; Set Memory
  18:     -	0447  8B05    	    word [CMD_MSET]
  19:     -	0449  6D736574	    db "mset $",0
	              202400
  20:				    ; Get Memory
  21:     -	0450  AF05    	    word [CMD_MGET]
  22:     -	0452  6D676574	    db "mget $",0
	              202400
  23:				    ; IO Set
  24:     -	0459  5F05    	    word [CMD_IOSET]
  25:     -	045B  696F7365	    db "ioset $",0
	              74202400
  26:				    ; IO Get
  27:     -	0463  2F05    	    word [CMD_IOGET]
  28:     -	0465  696F6765	    db "ioget $",0
	              74202400
  29:				    ; Hey-Dump
  30:     -	046D  0905    	    word [CMD_HEXDUMP]
  31:     -	046F  68642024	    db "hd $",0
	              00
  32:				    ; Exec
  33:     -	0474  1D05    	    word [CMD_EXEC]
  34:     -	0476  65786563	    db "exec $",0
	              202400
  35:				    
  36:     -	047D  0000    	    word 0x0000 ; END
  37:				
  38:     -	047F          	STR_NOTFOUND:
  39:     -	047F  0D0A696E	    db 13,10,"invalid command/syntax",13,10,0
	              76616C69
	              6420636F
	              6D6D616E
	              642F7379
	              6E746178
	              0D0A00
  40:				
  41:				;-------------------------------------------------------------
  42:				; command parser
  43:				;-------------------------------------------------------------
  44:				
  45:				;*****************
  46:				; PARSE_CMD
  47:				;*****************
  48:				;Description: Pares Input Command
  49:				;
  50:				;Inputs: none
  51:				;
  52:				;Outputs: none
  53:				;
  54:				;Destroys: A, BC, DE, HL
  55:     -	049A          	PARSE_CMD:
  56:  941+10	049A  113704  	    LD DE, [ARR_COMMANDS]           ; Load compare ADDR 
  57:				
  58:     -	049D          	PARSE_CMD_START:
  59:  951+7	049D  1A      	    LD A, (DE)                       ;Load first 2 bytes: Jump address
  60:  958+4	049E  4F      	    LD C,A
  61:  962+6	049F  13      	    INC DE   
  62:  968+7	04A0  1A      	    LD A, (DE)                       ;Load first 2 bytes: Jump address
  63:  975+4	04A1  47      	    LD B,A
  64:  979+6	04A2  13      	    INC DE                          ;DE is now the starting address of the null-terminated-string 
  65:				    
  66:				    ; Compare 16 bit routine pointer
  67:  985+10	04A3  210000  	    LD HL,0000h                     ;load HL with value to compare -> 0x0000
  68:  995+15	04A6  ED42    	    SBC HL,BC                       ;substract HL from BC. If both match, Z flag will be set
  69: 1010+10	04A8  CAC404  	    JP Z,PARSE_CMD_NO_MATCH         ;jmp to exit block for parser
  70:				    ; if > 0 -> continue
  71:				
  72: 1020+10	04AB  210540  	    LD HL, [MEM_PROMPT_START]       ; Input Buffer
  73: 1030+17	04AE  CDCB04  	    CALL PARSE_CMD_CMP_STRING_START ;parse 1st elemeent
  74: 1047+10	04B1  CABD04  	    JP Z,PARSE_CMD_START_FOUND      ;jmp to pointer if match
  75:				
  76:     -	04B4          	PARSE_CMD_START_NOT_FOUND:          ;inc DE to next element
  77: 1057+7	04B4  1A      	    LD A,(DE)                       ;find end of string -> load current byte
  78: 1064+6	04B5  13      	    INC DE                          
  79: 1070+4	04B6  A7      	    AND A                           ;find null termination
  80: 1074+10	04B7  CA9D04  	    JP Z, PARSE_CMD_START          ;if current byte-1 == 0x00 -> continue loop @ PARSE_CMD_START
  81: 1084+10	04BA  C3B404  	    JP PARSE_CMD_START_NOT_FOUND
  82:				
  83:     -	04BD          	PARSE_CMD_START_FOUND:              ;if command matched
  84: 1094+17	04BD  CDC104  	    CALL PARSE_CMD_START_EXEC       ;call routine
  85: 1111+10	04C0  C9      	    RET                             ;exit parser
  86:				
  87:     -	04C1          	PARSE_CMD_START_EXEC:               ;dynamic Z80 call -> serves as function and will put last PC value on stack
  88:				
  89:				
  90: 1121+4	04C1  60      	    LD H,B                       ;load HL with pointer to routine
  91: 1125+4	04C2  69      	    LD L,C
  92: 1129+4	04C3  E9      	    JP (HL)                         ;jmp to routine
  93:				    
  94:     -	04C4          	PARSE_CMD_NO_MATCH:                 ;if no command matched
  95: 1133+10	04C4  017F04  	    LD BC,[STR_NOTFOUND]            ;load pointer to string STR_NOTFOUND
  96: 1143+17	04C7  CD9A03  	    CALL CONSOLE_PRINTSTR           ;print null-terminated string to console
  97: 1160+10	04CA  C9      	    RET                             ;exit parser
  98:				
  99:				; HL = String to compare
 100:				; DE = String Pattern
 101:     -	04CB          	PARSE_CMD_CMP_STRING_START:
 102: 1170+7	04CB  1A      	    LD A,(DE)
 103: 1177+4	04CC  A7      	    AND A
 104: 1181+5+6	04CD  C8      	    RET Z; RETURN Z=1 if reached END wizhout mismatch
 105: 1186+7	04CE  BE      	    CP (HL)
 106: 1193+5+6	04CF  C0      	    RET NZ; If not Match (z=0) exit
 107:     -	04D0          	PARSE_CMD_CMP_STRING_START_MATCHED:
 108: 1198+7	04D0  7E      	    LD A,(HL)
 109: 1205+4	04D1  A7      	    AND A; String to compare reached end
 110: 1209+5+6	04D2  C8      	    RET Z
 111:     -	04D3          	PARSE_CMD_CMP_STRING_START_CONTINUE:
 112: 1214+6	04D3  23      	    INC HL
 113: 1220+6	04D4  13      	    INC DE
 114: 1226+10	04D5  C3CB04  	    JP PARSE_CMD_CMP_STRING_START
 115:				    
 116:				;-------------------------------------------------------------
 117:				; commands routines
 118:				;-------------------------------------------------------------
 119:     -	04D8          	CMD_HELP:
 120: 1236+10	04D8  015F06  	    LD BC,[MSG_CMD_HELP]
 121: 1246+17	04DB  CD9A03  	    CALL CONSOLE_PRINTSTR
 122:				
 123: 1263+7	04DE  3E0D    	    LD A,13
 124: 1270+11	04E0  D311    	    out (IO_SIO0B_D),A
 125: 1281+17	04E2  CDB803  	    call TX_EMP
 126: 1298+7	04E5  3E0A    	    LD A,10
 127: 1305+11	04E7  D311    	    out (IO_SIO0B_D),A
 128: 1316+17	04E9  CDB803  	    call TX_EMP
 129: 1333+10	04EC  C9      	    RET
 130:				
 131:     -	04ED          	CMD_VERSION:
 132: 1343+10	04ED  01CD06  	    LD BC,[MSG_CMD_VER]
 133: 1353+17	04F0  CD9A03  	    CALL CONSOLE_PRINTSTR
 134:				
 135: 1370+7	04F3  3E0D    	    LD A,13
 136: 1377+11	04F5  D311    	    out (IO_SIO0B_D),A
 137: 1388+17	04F7  CDB803  	    call TX_EMP
 138: 1405+7	04FA  3E0A    	    LD A,10
 139: 1412+11	04FC  D311    	    out (IO_SIO0B_D),A
 140: 1423+17	04FE  CDB803  	    call TX_EMP
 141: 1440+10	0501  C9      	    RET
 142:				
 143:     -	0502          	CMD_CLEAR:
 144: 1450+10	0502  013703  	    LD BC,[MSG_CLEAR]
 145: 1460+17	0505  CD9A03  	    CALL CONSOLE_PRINTSTR
 146: 1477+10	0508  C9      	    RET
 147:				
 148:     -	0509          	CMD_HEXDUMP:
 149: 1487+10	0509  010940  	    LD BC,MEM_PROMPT_START + 4
 150: 1497+17	050C  CD1B03  	    CALL DHEX_TO_BYTE
 151: 1514+4	050F  67      	    LD H,A
 152:				
 153: 1518+10	0510  010B40  	    LD BC,MEM_PROMPT_START + 6
 154: 1528+17	0513  CD1B03  	    CALL DHEX_TO_BYTE
 155: 1545+7	0516  E6F0    	    AND 0xF0
 156: 1552+4	0518  6F      	    LD L,A
 157:				
 158: 1556+17	0519  CD9002  	    CALL PRINT_HEXDUMP
 159: 1573+10	051C  C9      	    RET
 160:				
 161:     -	051D          	CMD_EXEC:
 162: 1583+10	051D  010B40  	    LD BC,MEM_PROMPT_START + 6
 163: 1593+17	0520  CD1B03  	    CALL DHEX_TO_BYTE
 164: 1610+4	0523  67      	    LD H,A
 165:				
 166: 1614+10	0524  010D40  	    LD BC,MEM_PROMPT_START + 8
 167: 1624+17	0527  CD1B03  	    CALL DHEX_TO_BYTE
 168: 1641+4	052A  6F      	    LD L,A
 169:				
 170: 1645+10	052B  31FF7F  	    LD SP,0x7FFF
 171: 1655+4	052E  E9      	    JP HL
 172:				
 173:     -	052F          	CMD_IOGET:
 174: 1659+10	052F  010C40  	    LD BC,MEM_PROMPT_START + 7
 175: 1669+17	0532  CD1B03  	    CALL DHEX_TO_BYTE
 176: 1686+4	0535  4F      	    LD C, A
 177:				
 178: 1690+7	0536  3E0D    	    LD A,13
 179: 1697+11	0538  D311    	    out (IO_SIO0B_D),A
 180: 1708+17	053A  CDB803  	    call TX_EMP
 181: 1725+7	053D  3E0A    	    LD A,10
 182: 1732+11	053F  D311    	    out (IO_SIO0B_D),A
 183: 1743+17	0541  CDB803  	    call TX_EMP
 184:				
 185: 1760+12	0544  ED78    	    IN A,(C)
 186: 1772+17	0546  CD4402  	    CALL PRINT_A_HEX
 187: 1789+7	0549  3E68    	    LD A,'h'
 188:				
 189: 1796+11	054B  D311    	    out (IO_SIO0B_D),A
 190: 1807+17	054D  CDB803  	    call TX_EMP
 191: 1824+7	0550  3E0D    	    LD A,13
 192: 1831+11	0552  D311    	    out (IO_SIO0B_D),A
 193: 1842+17	0554  CDB803  	    call TX_EMP
 194: 1859+7	0557  3E0A    	    LD A,10
 195: 1866+11	0559  D311    	    out (IO_SIO0B_D),A
 196: 1877+17	055B  CDB803  	    call TX_EMP
 197: 1894+10	055E  C9      	    RET
 198:				
 199:     -	055F          	CMD_IOSET:
 200: 1904+10	055F  010C40  	    LD BC,MEM_PROMPT_START + 7
 201: 1914+17	0562  CD1B03  	    CALL DHEX_TO_BYTE
 202: 1931+4	0565  67      	    LD H,A
 203:				
 204: 1935+10	0566  010F40  	    LD BC,MEM_PROMPT_START + 10
 205: 1945+17	0569  CD1B03  	    CALL DHEX_TO_BYTE
 206:				
 207:				    ;; DEBUG START
 208: 1962+11	056C  F5      	    PUSH AF
 209:				
 210: 1973+7	056D  3E20    	    LD A,' '
 211: 1980+11	056F  D311    	    out (IO_SIO0B_D),A
 212: 1991+17	0571  CDB803  	    call TX_EMP
 213:				
 214: 2008+4	0574  7C      	    LD A,H
 215: 2012+17	0575  CD4402  	    CALL PRINT_A_HEX
 216:				
 217: 2029+10	0578  F1      	    POP AF
 218:				    ;; DEBUG END
 219:				
 220: 2039+4	0579  4C      	    LD C,H
 221: 2043+12	057A  ED79    	    OUT (C),A
 222:				
 223: 2055+7	057C  3E0D    	    LD A,13
 224: 2062+11	057E  D311    	    out (IO_SIO0B_D),A
 225: 2073+17	0580  CDB803  	    call TX_EMP
 226: 2090+7	0583  3E0A    	    LD A,10
 227: 2097+11	0585  D311    	    out (IO_SIO0B_D),A
 228: 2108+17	0587  CDB803  	    call TX_EMP
 229: 2125+10	058A  C9      	    RET
 230:				
 231:     -	058B          	CMD_MSET:
 232: 2135+10	058B  010B40  	    LD BC,MEM_PROMPT_START + 6
 233: 2145+17	058E  CD1B03  	    CALL DHEX_TO_BYTE
 234: 2162+4	0591  67      	    LD H,A
 235:				
 236: 2166+10	0592  010D40  	    LD BC,MEM_PROMPT_START + 8
 237: 2176+17	0595  CD1B03  	    CALL DHEX_TO_BYTE
 238: 2193+4	0598  6F      	    LD L,A
 239:				
 240:				    
 241: 2197+10	0599  011040  	    LD BC,MEM_PROMPT_START + 11
 242: 2207+17	059C  CD1B03  	    CALL DHEX_TO_BYTE
 243:				    
 244: 2224+7	059F  77      	    LD (HL),A
 245:				
 246: 2231+7	05A0  3E0D    	    LD A,13
 247: 2238+11	05A2  D311    	    out (IO_SIO0B_D),A
 248: 2249+17	05A4  CDB803  	    call TX_EMP
 249: 2266+7	05A7  3E0A    	    LD A,10
 250: 2273+11	05A9  D311    	    out (IO_SIO0B_D),A
 251: 2284+17	05AB  CDB803  	    call TX_EMP
 252: 2301+10	05AE  C9      	    RET
 253:				
 254:     -	05AF          	CMD_MGET:
 255: 2311+10	05AF  010B40  	    LD BC,MEM_PROMPT_START + 6
 256: 2321+17	05B2  CD1B03  	    CALL DHEX_TO_BYTE
 257: 2338+4	05B5  67      	    LD H,A
 258:				
 259: 2342+10	05B6  010D40  	    LD BC,MEM_PROMPT_START + 8
 260: 2352+17	05B9  CD1B03  	    CALL DHEX_TO_BYTE
 261: 2369+4	05BC  6F      	    LD L,A
 262:				
 263: 2373+7	05BD  3E0D    	    LD A,13
 264: 2380+11	05BF  D311    	    out (IO_SIO0B_D),A
 265: 2391+17	05C1  CDB803  	    call TX_EMP
 266: 2408+7	05C4  3E0A    	    LD A,10
 267: 2415+11	05C6  D311    	    out (IO_SIO0B_D),A
 268: 2426+17	05C8  CDB803  	    call TX_EMP
 269: 2443+7	05CB  7E      	    LD A,(HL)
 270: 2450+17	05CC  CD4402  	    CALL PRINT_A_HEX
 271: 2467+7	05CF  3E68    	    LD A,'h'
 272: 2474+11	05D1  D311    	    out (IO_SIO0B_D),A
 273: 2485+17	05D3  CDB803  	    call TX_EMP
 274: 2502+7	05D6  3E0D    	    LD A,13
 275: 2509+11	05D8  D311    	    out (IO_SIO0B_D),A
 276: 2520+17	05DA  CDB803  	    call TX_EMP
 277: 2537+7	05DD  3E0A    	    LD A,10
 278: 2544+11	05DF  D311    	    out (IO_SIO0B_D),A
 279: 2555+17	05E1  CDB803  	    call TX_EMP
 280: 2572+10	05E4  C9      	    RET
 281:				
 282:				
 283:				
 284:				;-------------------------------------------------------------
 285:				; commands strings
 286:				;-------------------------------------------------------------
 287:     -	05E5          	MSG_SYS_VER:
 288:     -	05E5  1B5B324A	    db 27, '[2J', 27, '[H'
	              1B5B48
 289:     -	05EC  5A384320	    db 'Z8C Mk IV - A Z80 Homebrew Computer',13,10
	              4D6B2049
	              56202D20
	              41205A38
	              3020486F
	              6D656272
	              65772043
	              6F6D7075
	              7465720D
	              0A
 290:     -	0611  4D6F6E69	    db 'Monitor ROM Ver. 1.0 by Dennis Gunia (2022)',13,10
	              746F7220
	              524F4D20
	              5665722E
	              20312E30
	              20627920
	              44656E6E
	              69732047
	              756E6961
	              20283230
	              3232290D
	              0A
 291:     -	063E  34386B20	    db '48k RAM - 4MHz Z80 CPU - Stack $',0
	              52414D20
	              2D20344D
	              487A205A
	              38302043
	              5055202D
	              20537461
	              636B2024
	              00
 292:				
 293:     -	065F          	MSG_CMD_HELP:
 294:     -	065F  0D0A    	    db 13,10
 295:     -	0661  68642024	    db "hd $<addr>  mget $<addr>  mset $<addr> <val>",13,10
	              3C616464
	              723E2020
	              6D676574
	              20243C61
	              6464723E
	              20206D73
	              65742024
	              3C616464
	              723E203C
	              76616C3E
	              0D0A
 296:     -	068F  696F6765	    db "ioget $<addr>  ioset $<addr> <val>",13,10
	              7420243C
	              61646472
	              3E202069
	              6F736574
	              20243C61
	              6464723E
	              203C7661
	              6C3E0D0A
 297:     -	06B3  3F202065	    db "?  exec $<addr>  clr  ver"
	              78656320
	              243C6164
	              64723E20
	              20636C72
	              20207665
	              72
 298:     -	06CC  00      	    db 0
 299:				
 300:     -	06CD          	MSG_CMD_VER:
 301:     -	06CD  0D0A    	    db 13,10
 302:     -	06CF  5A384320	    db "Z8C Monitor Programm",13,10
	              4D6F6E69
	              746F7220
	              50726F67
	              72616D6D
	              0D0A
 303:     -	06E5  524F4D20	    db "ROM Version 1.0 - Written by Dennis Gunia, 2022",13,10
	              56657273
	              696F6E20
	              312E3020
	              2D205772
	              69747465
	              6E206279
	              2044656E
	              6E697320
	              47756E69
	              612C2032
	              3032320D
	              0A
 304:     -	0716  332E3638	    db "3.686411MHz CPU, 48K RAM System, John 3,16",13,10
	              36343131
	              4D487A20
	              4350552C
	              2034384B
	              2052414D
	              20537973
	              74656D2C
	              204A6F68
	              6E20332C
	              31360D0A
 305:     -	0742  7777772E	    db "www.dennisgunia.de"
	              64656E6E
	              69736775
	              6E69612E
	              6465
**** main.asm ****
  18:     -	0754  00      	    db 0
  19:				
  20:				; include subroutines
  21:				;.include "sub_soundtest.s"
  22:				
  23:     -	0755          	INT_VEC:
  24:     -	000C          	    org 0Ch
  25:     -	000C  2104    	    DEFW RX_CHA_AVAILABLE
  26:     -	000E          	    org 0Eh
  27:     -	000E  5001    	    DEFW SPEC_RX_CONDITON
  28:				    
  29:     -	0010          	init:
  30:     -	0000          	    org 0x0000
  31: 2582+10	0000  C30001  	    jp PROG_ROM_START
  32:				
  33:     -	0003          	init_led:
  34:     -	0100          	    org PROG_ROM_START
  35: 2592+7	0100  3E00    	    LD A,0x00
  36: 2599+11	0102  D320    	    OUT (IO_REG0),A
  37:				
  38:     -	0104          	init_console:
  39: 2610+17	0104  CDC703  	    CALL CONSOLE_INIT
  40:				
  41: 2627+7	0107  1608    	    LD	  D,0x08	; Select register #8
  42: 2634+7	0109  3E00    	    LD	  A,0x00	; Volume channel A 0
  43: 2641+17	010B  CD0704  	    CALL AY0_WRITE_REG
  44: 2658+7	010E  1609    	    LD	  D,0x09	; Select register #9
  45: 2665+7	0110  3E00    	    LD	  A,0x00	; Volume channel B 0
  46: 2672+17	0112  CD0704  	    CALL AY0_WRITE_REG
  47: 2689+7	0115  160A    	    LD	  D,0x0A	; Select register #10
  48: 2696+7	0117  3E00    	    LD	  A,0x00	; Volume channel C 0
  49: 2703+17	0119  CD0704  	    CALL AY0_WRITE_REG
  50:				    
  51:				
  52:				;INT_INI:
  53:				;    ld A,0
  54:				;    ld I,A  ;load I reg with zero
  55:				;    im 2    ;set int mode 2
  56:				;    ei      ;enable interupt
  57:				
  58: 2720+7	011C  3E00    	    LD A,0x00
  59: 2727+11	011E  D311    	    OUT (IO_SIO0B_D),A
  60: 2738+17	0120  CDB803  	    CALL TX_EMP
  61:				
  62: 2755+17	0123  CD1804  	    call A_RTS_ON
  63:				
  64:				    ; PRINT BANNER
  65: 2772+10	0126  01E505  	    LD BC, [MSG_SYS_VER]
  66: 2782+17	0129  CD9A03  	    CALL CONSOLE_PRINTSTR
  67:				
  68: 2799+10	012C  31FF7F  	    LD SP,07FFFh
  69:				    ; Print SP Location
  70: 2809+20	012F  ED730040	    LD (0x4000),SP
  71: 2829+13	0133  3A0140  	    LD A,(0x4001)
  72: 2842+17	0136  CD4402  	    CALL PRINT_A_HEX
  73: 2859+13	0139  3A0040  	    LD A,(0x4000)
  74: 2872+17	013C  CD4402  	    CALL PRINT_A_HEX
  75:				
  76: 2889+7	013F  3E0D    	    LD A,13
  77: 2896+11	0141  D311    	    out (IO_SIO0B_D),A
  78: 2907+17	0143  CDB803  	    call TX_EMP
  79: 2924+7	0146  3E0A    	    LD A,10
  80: 2931+11	0148  D311    	    out (IO_SIO0B_D),A
  81: 2942+17	014A  CDB803  	    call TX_EMP
  82:				
  83: 2959+10	014D  C36501  	    JP CONSOLE_PROMPT
  84:				
  85:				
  86:				
  87:				
  88:     -	0150          	SPEC_RX_CONDITON:
  89:				    
  90: 2969+10	0150  C30000  	    jp 0000h
  91:				
  92:				
  93:     -	0153          	DELAY:
  94: 2979+15	0153  DDE5    	    PUSH IX
  95: 2994+11	0155  C5      	    PUSH BC
  96: 3005+14	0156  DD210040	    LD IX,0x4000
  97: 3019+10	015A  010100  	    LD BC,1
  98:     -	015D          	DELAY_LOOP:
  99: 3029+15	015D  DD09    	    ADD IX,BC
 100: 3044+7+5	015F  30FC    	    JR NC, DELAY_LOOP
 101: 3051+10	0161  C1      	    POP BC
 102: 3061+14	0162  DDE1    	    POP IX
 103: 3075+10	0164  C9      	    RET
 104:				
 105:				; Console Functions
 106:				
 107:				
 108:     -	0165          	CONSOLE_PROMPT:
 109:				    ;Console Prompt
 110: 3085+7	0165  3E0A    	    LD A, 10
 111: 3092+11	0167  D311    	    out (IO_SIO0B_D),A
 112: 3103+17	0169  CDB803  	    call TX_EMP
 113: 3120+7	016C  3E3F    	    LD A,'?'
 114: 3127+11	016E  D311    	    out (IO_SIO0B_D),A
 115: 3138+17	0170  CDB803  	    call TX_EMP
 116: 3155+7	0173  3E3E    	    LD A,'>'
 117: 3162+11	0175  D311    	    out (IO_SIO0B_D),A
 118: 3173+17	0177  CDB803  	    call TX_EMP
 119: 3190+7	017A  3E20    	    LD A,' '
 120: 3197+11	017C  D311    	    out (IO_SIO0B_D),A
 121: 3208+17	017E  CDB803  	    call TX_EMP
 122: 3225+7	0181  3E5F    	    LD A,"_"
 123: 3232+11	0183  D311    	    out (IO_SIO0B_D),A 
 124: 3243+17	0185  CDB803  	    call TX_EMP
 125:				
 126:				    ; Blinking Cursor
 127: 3260+14	0188  DD2100E0	    LD IX,CMD_CRS_SPEED
 128: 3274+10	018C  010100  	    LD BC,1
 129: 3284+7	018F  3E00    	    LD A,0
 130: 3291+13	0191  320040  	    LD (MEM_CURSOR_STATE),A
 131:				    ; SET PROMPT LENGTH TO 0
 132: 3304+7	0194  3E00    	    LD A,0
 133: 3311+13	0196  320340  	    LD (MEM_PROMPT_SIZE),A
 134:				
 135:     -	0199          	CONSOLE_PROMPT_LOOP:
 136:				    ; READ INPUT
 137:				    ; Delete Cursor if input Avail
 138:				    ;JP CONSOLE_PROMPT_LOOP_2
 139: 3324+17	0199  CDAD03  	    CALL CONSOLE_READ_CHAR
 140: 3341+4	019C  A7      	    AND A
 141: 3345+13	019D  320140  	    LD (MEM_LAST_CHAR),A
 142:				
 143: 3358+10	01A0  CA0902  	    JP Z, CONSOLE_PROMPT_LOOP_2
 144:				    ; if newline
 145: 3368+7	01A3  160D    	    LD D, 13
 146: 3375+4	01A5  BA      	    CP D
 147: 3379+7+5	01A6  2006    	    JR NZ, CONSOLE_PROMPT_LOOP_1
 148:				
 149: 3386+17	01A8  CD9A04  	    CALL PARSE_CMD
 150:				
 151: 3403+10	01AB  C36501  	    JP CONSOLE_PROMPT
 152:				
 153:     -	01AE          	CONSOLE_PROMPT_LOOP_1: ; Not new line
 154:				   
 155: 3413+13	01AE  3A0140  	    LD A,(MEM_LAST_CHAR)
 156: 3426+7	01B1  167F    	    LD D, 0x7F
 157: 3433+4	01B3  BA      	    CP D
 158: 3437+7+5	01B4  2024    	    JR NZ, CONSOLE_PROMPT_LOOP_1B
 159:				
 160:				    ; if Backspace
 161: 3444+13	01B6  3A0340  	    LD A,(MEM_PROMPT_SIZE); test if 0
 162: 3457+4	01B9  A7      	    AND A
 163: 3461+10	01BA  CA0902  	    JP Z,CONSOLE_PROMPT_LOOP_2; no action if buffer empty
 164:				
 165:				    ;EXEC this if backspace (08d)
 166: 3471+4	01BD  3D      	    DEC A
 167: 3475+13	01BE  320340  	    LD (MEM_PROMPT_SIZE),A  ; store size to mem
 168:				
 169: 3488+7	01C1  3E7F    	    LD A, 0x7F
 170: 3495+11	01C3  D311    	    out (IO_SIO0B_D),A
 171: 3506+17	01C5  CDB803  	    call TX_EMP
 172:				
 173: 3523+13	01C8  3A0140  	    LD A,(MEM_LAST_CHAR)
 174: 3536+11	01CB  D311    	    out (IO_SIO0B_D),A
 175: 3547+17	01CD  CDB803  	    call TX_EMP
 176:				
 177: 3564+7	01D0  3E20    	    LD A," "
 178: 3571+11	01D2  D311    	    out (IO_SIO0B_D),A 
 179: 3582+17	01D4  CDB803  	    call TX_EMP
 180:				
 181: 3599+10	01D7  C30902  	    JP CONSOLE_PROMPT_LOOP_2
 182:				
 183:     -	01DA          	CONSOLE_PROMPT_LOOP_1B: ;IF not Backspace 
 184:				
 185:				
 186:				    ; CHECK if Controll Sequence
 187:				    
 188:				
 189:				    ; Continue
 190:				
 191: 3609+13	01DA  3A0340  	    LD A,(MEM_PROMPT_SIZE)
 192: 3622+4	01DD  3C      	    INC A
 193: 3626+13	01DE  320340  	    LD (MEM_PROMPT_SIZE),A  ; store size to mem
 194:				
 195: 3639+7	01E1  3E7F    	    LD A, 0x7F
 196: 3646+11	01E3  D311    	    out (IO_SIO0B_D),A
 197: 3657+17	01E5  CDB803  	    call TX_EMP
 198:				
 199: 3674+13	01E8  3A0140  	    LD A,(MEM_LAST_CHAR)
 200: 3687+11	01EB  D311    	    out (IO_SIO0B_D),A
 201: 3698+17	01ED  CDB803  	    call TX_EMP
 202:				
 203: 3715+7	01F0  3E20    	    LD A," "
 204: 3722+11	01F2  D311    	    out (IO_SIO0B_D),A 
 205: 3733+17	01F4  CDB803  	    call TX_EMP
 206:				
 207:				    ;APPEND CHAR TO BUFFER
 208: 3750+11	01F7  C5      	    PUSH BC
 209: 3761+10	01F8  210540  	    LD HL,MEM_PROMPT_START
 210: 3771+7	01FB  0600    	    LD B,0
 211: 3778+13	01FD  3A0340  	    LD A,(MEM_PROMPT_SIZE)
 212: 3791+4	0200  3D      	    DEC A
 213: 3795+4	0201  4F      	    LD C,A
 214: 3799+15	0202  ED4A    	    ADC HL, BC
 215: 3814+13	0204  3A0140  	    LD A, (MEM_LAST_CHAR)
 216: 3827+7	0207  77      	    LD (HL), A
 217: 3834+10	0208  C1      	    POP BC
 218:				    
 219:				
 220:				
 221:     -	0209          	CONSOLE_PROMPT_LOOP_2:
 222:				    ; Print Cursor
 223: 3844+15	0209  DD09    	    ADD IX,BC
 224: 3859+7+5	020B  308C    	    JR NC, CONSOLE_PROMPT_LOOP
 225:				    ; Toggle cycle
 226: 3866+13	020D  3A0040  	    LD A,(MEM_CURSOR_STATE)
 227: 3879+7	0210  EE01    	    XOR 1
 228: 3886+7+5	0212  2818    	    JR Z,CONSOLE_PROMPT_LOOP_3
 229: 3893+13	0214  320040  	    LD (MEM_CURSOR_STATE),A
 230:				
 231: 3906+7	0217  3E7F    	    LD A, 0x7F
 232: 3913+11	0219  D311    	    out (IO_SIO0B_D),A
 233: 3924+17	021B  CDB803  	    call TX_EMP
 234: 3941+7	021E  3E5F    	    LD A,'_'
 235: 3948+11	0220  D311    	    out (IO_SIO0B_D),A
 236: 3959+17	0222  CDB803  	    call TX_EMP
 237: 3976+14	0225  DD2100E0	    LD IX,CMD_CRS_SPEED
 238: 3990+10	0229  C39901  	    JP CONSOLE_PROMPT_LOOP
 239:				
 240:     -	022C          	CONSOLE_PROMPT_LOOP_3:
 241: 4000+13	022C  320040  	    LD (MEM_CURSOR_STATE),A
 242: 4013+7	022F  3E7F    	    LD A, 0x7F
 243: 4020+11	0231  D311    	    out (IO_SIO0B_D),A
 244: 4031+17	0233  CDB803  	    call TX_EMP
 245: 4048+7	0236  3E20    	    LD A,' '
 246: 4055+11	0238  D311    	    out (IO_SIO0B_D),A
 247: 4066+17	023A  CDB803  	    call TX_EMP
 248: 4083+14	023D  DD2100E0	    LD IX,CMD_CRS_SPEED
 249: 4097+10	0241  C39901  	    JP CONSOLE_PROMPT_LOOP
 250:				
 251:				; A Contains Byte
 252:     -	0244          	PRINT_A_HEX:
 253: 4107+11	0244  C5      	    PUSH BC
 254: 4118+11	0245  D5      	    PUSH DE
 255: 4129+17	0246  CD8003  	    CALL STRCONV_BYTES_TO_HEX   ; New Kernel Call
 256: 4146+4	0249  78      	    LD A,B
 257: 4150+11	024A  D311    	    out (IO_SIO0B_D),A
 258: 4161+17	024C  CDB803  	    call TX_EMP
 259: 4178+4	024F  79      	    LD A,C
 260: 4182+11	0250  D311    	    out (IO_SIO0B_D),A
 261: 4193+17	0252  CDB803  	    call TX_EMP
 262: 4210+10	0255  D1      	    POP DE
 263: 4220+10	0256  C1      	    POP BC
 264: 4230+10	0257  C9      	    RET
 265:				
 266:     -	0258          	MSG_HEXDUMP_HEADER:
 267:     -	0258  0D0A4241	    db 13,10,'BASE   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F',0
	              53452020
	              20302020
	              31202032
	              20203320
	              20342020
	              35202036
	              20203720
	              20382020
	              39202041
	              20204220
	              20432020
	              44202045
	              20204600
 268:				
 269:				; HL contains Start ADDR
 270:     -	0290          	PRINT_HEXDUMP:
 271: 4240+11	0290  F5      	    PUSH AF
 272: 4251+11	0291  C5      	    PUSH BC
 273: 4262+11	0292  E5      	    PUSH HL
 274:				    ; PRINT Header
 275: 4273+10	0293  015802  	    LD BC, [MSG_HEXDUMP_HEADER]
 276: 4283+17	0296  CD9A03  	    CALL CONSOLE_PRINTSTR
 277: 4300+7	0299  0E00    	    LD C,0  ; Line Counter
 278:				
 279:     -	029B          	PRINT_HEXDUMP_SOL: ; Start of Line
 280: 4307+7	029B  3E0D    	    LD A,13
 281: 4314+11	029D  D311    	    out (IO_SIO0B_D),A
 282: 4325+17	029F  CDB803  	    call TX_EMP
 283: 4342+7	02A2  3E0A    	    LD A,10
 284: 4349+11	02A4  D311    	    out (IO_SIO0B_D),A
 285: 4360+17	02A6  CDB803  	    call TX_EMP
 286:				
 287: 4377+4	02A9  7C      	    LD A,H
 288: 4381+17	02AA  CD4402  	    CALL PRINT_A_HEX
 289: 4398+4	02AD  7D      	    LD A,L
 290: 4402+17	02AE  CD4402  	    CALL PRINT_A_HEX
 291:				
 292: 4419+7	02B1  3E68    	    LD A, 'h'
 293: 4426+11	02B3  D311    	    out (IO_SIO0B_D),A
 294: 4437+17	02B5  CDB803  	    call TX_EMP
 295: 4454+7	02B8  3E3A    	    LD A, ':'
 296: 4461+11	02BA  D311    	    out (IO_SIO0B_D),A
 297: 4472+17	02BC  CDB803  	    call TX_EMP
 298: 4489+7	02BF  3E20    	    LD A, ' '
 299: 4496+11	02C1  D311    	    out (IO_SIO0B_D),A
 300: 4507+17	02C3  CDB803  	    call TX_EMP
 301:				
 302: 4524+7	02C6  0600    	    LD B,0  ; Column Counter
 303:     -	02C8          	PRINT_HEXDUMP_LOOP1:
 304: 4531+7	02C8  7E      	    LD A,(HL)
 305: 4538+17	02C9  CD4402  	    CALL PRINT_A_HEX
 306: 4555+7	02CC  3E20    	    LD A, ' '
 307: 4562+11	02CE  D311    	    out (IO_SIO0B_D),A
 308: 4573+17	02D0  CDB803  	    call TX_EMP
 309:				
 310: 4590+4	02D3  04      	    INC B
 311: 4594+6	02D4  23      	    INC HL
 312:				    ; Check If 16 columns
 313: 4600+4	02D5  78      	    LD A,B
 314: 4604+7	02D6  E610    	    AND 0x10
 315: 4611+10	02D8  CAC802  	    JP Z, PRINT_HEXDUMP_LOOP1; IF less than 8
 316:				
 317: 4621+4	02DB  0C      	    INC C
 318: 4625+4	02DC  79      	    LD A,C
 319: 4629+7	02DD  E610    	    AND 0x10
 320:				
 321: 4636+10	02DF  CA9B02  	    JP Z, PRINT_HEXDUMP_SOL; IF less than 8
 322:				
 323: 4646+7	02E2  3E0D    	    LD A,13
 324: 4653+11	02E4  D311    	    out (IO_SIO0B_D),A
 325: 4664+17	02E6  CDB803  	    call TX_EMP
 326: 4681+7	02E9  3E0A    	    LD A,10
 327: 4688+11	02EB  D311    	    out (IO_SIO0B_D),A
 328: 4699+17	02ED  CDB803  	    call TX_EMP
 329:				
 330: 4716+10	02F0  E1      	    POP HL
 331: 4726+10	02F1  C1      	    POP BC
 332: 4736+10	02F2  F1      	    POP AF
 333: 4746+10	02F3  C9      	    RET
 334:				
 335:				
 336:				; HL = String to compare
 337:				; DE = String Pattern
 338:     -	02F4          	CMP_STRING_START:
 339: 4756+7	02F4  1A      	    LD A,(DE)
 340: 4763+4	02F5  A7      	    AND A
 341: 4767+5+6	02F6  C8      	    RET Z; RETURN Z=1 if reached END wizhout mismatch
 342: 4772+7	02F7  BE      	    CP (HL)
 343: 4779+5+6	02F8  C0      	    RET NZ; If not Match (z=0) exit
 344:     -	02F9          	CMP_STRING_START_MATCHED:
 345: 4784+7	02F9  7E      	    LD A,(HL)
 346: 4791+4	02FA  A7      	    AND A; String to compare reached end
 347: 4795+5+6	02FB  C8      	    RET Z
 348:     -	02FC          	CMP_STRING_START_CONTINUE:
 349: 4800+6	02FC  23      	    INC HL
 350: 4806+6	02FD  13      	    INC DE
 351: 4812+10	02FE  C3F402  	    JP CMP_STRING_START
 352:				    
 353:				; REG A Contains CHAR-Low
 354:				; If failed, Carry is set
 355:     -	0301          	HEX_TO_BIN:
 356: 4822+7	0301  D630    	    SUB 48 ; 0 is 0
 357: 4829+10	0303  EA1603  	    JP PE, HEX_TO_INVALID_2; to low (SUB overflow)
 358: 4839+7	0306  FE0A    	    CP 10 ; Value is between 0 and 9
 359: 4846+7+5	0308  3805    	    JR C, HEX_TO_BIN_2
 360: 4853+7	030A  D607    	    SUB 7
 361: 4860+10	030C  EA1603  	    JP PE, HEX_TO_INVALID_2; to low (SUB overflow)
 362:     -	030F          	HEX_TO_BIN_2:
 363: 4870+7	030F  FE10    	    CP 16
 364: 4877+7+5	0311  3003    	    JR NC, HEX_TO_INVALID_2; if bigger than 15-> fail
 365: 4884+7	0313  E60F    	    AND 0x0F
 366: 4891+10	0315  C9      	    RET
 367:     -	0316          	HEX_TO_INVALID_2:
 368: 4901+7	0316  3E01    	    LD A,1
 369: 4908+7	0318  C6FF    	    ADD 255
 370: 4915+10	031A  C9      	    RET
 371:				
 372:				; BC Contains Address to string
 373:				; E is 0xFF if error
 374:				; E is 0x00 if okay
 375:     -	031B          	DHEX_TO_BYTE:
 376: 4925+11	031B  C5      	    PUSH BC
 377:				    ; Load First Byte
 378: 4936+7	031C  0A      	    LD A,(BC)
 379: 4943+17	031D  CD0103  	    CALL HEX_TO_BIN
 380:				    ;JP C,DHEX_TO_BYTE_FAILED
 381: 4960+8	0320  CB27    	    SLA A
 382: 4968+8	0322  CB27    	    SLA A
 383: 4976+8	0324  CB27    	    SLA A
 384: 4984+8	0326  CB27    	    SLA A
 385: 4992+4	0328  57      	    LD D,A
 386:				
 387: 4996+6	0329  03      	    INC BC
 388: 5002+7	032A  0A      	    LD A,(BC)
 389: 5009+17	032B  CD0103  	    CALL HEX_TO_BIN
 390:				    ;JP C,DHEX_TO_BYTE_FAILED
 391: 5026+4	032E  B2      	    OR D ; Merge
 392:				    
 393: 5030+10	032F  C1      	    POP BC
 394: 5040+7	0330  1E00    	    LD E,0x00
 395: 5047+10	0332  C9      	    RET
 396:     -	0333          	DHEX_TO_BYTE_FAILED:
 397: 5057+7	0333  1EFF    	    LD E,0xFF
 398:				    ;LD A,0x00
 399: 5064+10	0335  C1      	    POP BC
 400: 5074+10	0336  C9      	    RET
 401:				
 402:				;Strings
 403:     -	0337          	MSG_CLEAR:
**** main.asm ****
 404:     -	0337  1B5B324A	    db 27, '[2J', 27, '[H',0
	              1B5B4800



Statistics:

     4	passes
     0	jr promotions
   103	symbols
  1563	bytes



Symbol Table:

ARR_COMMANDS     437      1079
AY0_WRITE_REG    407      1031
A_RTS_OFF        40F      1039
A_RTS_ON         418      1048
CMD_CLEAR        502      1282
CMD_CRS_SPEED  =E000      57344
CMD_EXEC         51D      1309
CMD_HELP         4D8      1240
CMD_HEXDUMP      509      1289
CMD_IOGET        52F      1327
CMD_IOSET        55F      1375
CMD_MGET         5AF      1455
CMD_MSET         58B      1419
CMD_VERSION      4ED      1261
CMP_STRING_START  2F4      756
CMP_STRING_START_CONTINUE  2FC      764
CMP_STRING_START_MATCHED  2F9      761
CONSOLE_INIT     3C7      967
CONSOLE_PRINTSTR  39A      922
CONSOLE_PRINTSTR_EXIT  3AA      938
CONSOLE_PRINTSTR_LOOP  39C      924
CONSOLE_PROMPT   165      357
CONSOLE_PROMPT_LOOP  199      409
CONSOLE_PROMPT_LOOP_1  1AE      430
CONSOLE_PROMPT_LOOP_1B  1DA      474
CONSOLE_PROMPT_LOOP_2  209      521
CONSOLE_PROMPT_LOOP_3  22C      556
CONSOLE_READ_CHAR  3AD      941
CONSOLE_TX_WAIT  3BB      955
DELAY            153      339
DELAY_LOOP       15D      349
DHEX_TO_BYTE     31B      795
DHEX_TO_BYTE_FAILED  333      819
HEX_TO_BIN       301      769
HEX_TO_BIN_2     30F      783
HEX_TO_INVALID_2  316      790
INT_VEC          755      1877
IO_AY0_ADDR    =40        64
IO_AY0_DATA    =41        65
IO_AY1_ADDR    =42        66
IO_AY1_DATA    =43        67
IO_CTC0_C0     =00        0
IO_CTC0_C1     =01        1
IO_CTC0_C2     =02        2
IO_CTC0_C3     =03        3
IO_REG0        =20        32
IO_RTC_AMPM    =25        37
IO_RTC_CTR_D   =2D        45
IO_RTC_CTR_E   =2E        46
IO_RTC_CTR_F   =2F        47
IO_RTC_DAY0    =26        38
IO_RTC_DAY1    =27        39
IO_RTC_HOUR    =24        36
IO_RTC_MIN0    =22        34
IO_RTC_MIN1    =23        35
IO_RTC_MON0    =28        40
IO_RTC_MON1    =29        41
IO_RTC_SEC0    =20        32
IO_RTC_SEC1    =21        33
IO_RTC_WEEK    =2C        44
IO_RTC_YEAR1   =2B        43
IO_RTC_YERR0   =2A        42
IO_SIO0A_C     =12        18
IO_SIO0A_D     =10        16
IO_SIO0B_C     =13        19
IO_SIO0B_D     =11        17
MEM_CURSOR_STATE=4000      16384
MEM_LAST_CHAR  =4001      16385
MEM_PROMPT_SIZE=4003      16387
MEM_PROMPT_START=4005      16389
MOD_COMMANDS     437      1079
MSG_CLEAR        337      823
MSG_CMD_HELP     65F      1631
MSG_CMD_VER      6CD      1741
MSG_HEXDUMP_HEADER  258      600
MSG_SYS_VER      5E5      1509
PARSE_CMD        49A      1178
PARSE_CMD_CMP_STRING_START  4CB      1227
PARSE_CMD_CMP_STRING_START_CONTINUE  4D3      1235
PARSE_CMD_CMP_STRING_START_MATCHED  4D0      1232
PARSE_CMD_NO_MATCH  4C4      1220
PARSE_CMD_START  49D      1181
PARSE_CMD_START_EXEC  4C1      1217
PARSE_CMD_START_FOUND  4BD      1213
PARSE_CMD_START_NOT_FOUND  4B4      1204
PRINT_A_HEX      244      580
PRINT_HEXDUMP    290      656
PRINT_HEXDUMP_LOOP1  2C8      712
PRINT_HEXDUMP_SOL  29B      667
PROG_MEM_START =4000      16384
PROG_ROM_START = 100      256
RX_CHA_AVAILABLE  421      1057
SPEC_RX_CONDITON  150      336
START_ROM      =00        0
STRCONV_BYTES_TO_HEX  380      896
STRCONV_BYTES_TO_HEX_1  38F      911
STRCONV_BYTES_TO_HEX_2  399      921
STR_NOTFOUND     47F      1151
TX_EMP           3B8      952
VAR_CONSOLE_BAUD=10        16
init            10        16
init_console     104      260
init_led        03        3

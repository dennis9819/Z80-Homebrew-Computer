   1:     -	4000          	SYS_RAM_START   equ 0x4000
   2:     -	4010          	SYS_BUF_START   equ 0x4010
   3:     -	4110          	PRG_RAM_START   equ 0x4110
   4:     -	FF00          	PRG_RAM_TOP     equ 0xFF00
   5:     -	FFFF          	STACK_RAM_TOP   equ 0xFFFF
   6:				
   7:				;VAR_CONSOLE_CONF    equ 0x07  ;CLK/TRG Clock @ 1843220.5/s
   8:     -	000F          	VAR_CONSOLE_CONF    equ 0x0F  ;CPU/16  Clock @ 230402.5625/s
   9:				
  10:     -	0018          	VAR_CONSOLE_BAUD    equ 24  ;BAUD timer constant
  11:				                            ;CLK/TRG Clock @ 1843220.5/s
  12:				                            ; -> 0x16 : 14400
  13:				                            ;CPU/16  Clock @ 230402.5625/s
  14:				                            ; -> 12 : 19200
  15:				                            ; -> 24 : 9600
  16:				
  17:				; include IO device addresses
  18:				.include "addresses.s"
**** include/addresses.s ****
   1:     -	0000          	IO_CTC0_C0  equ 0x00
   2:     -	0001          	IO_CTC0_C1  equ 0x01
   3:     -	0002          	IO_CTC0_C2  equ 0x02
   4:     -	0003          	IO_CTC0_C3  equ 0x03
   5:				
   6:     -	0012          	IO_SIO0A_C  equ 00010010b
   7:     -	0010          	IO_SIO0A_D  equ 00010000b
   8:     -	0013          	IO_SIO0B_C  equ 00010011b
   9:     -	0011          	IO_SIO0B_D  equ 00010001b
  10:				
  11:     -	0020          	IO_RTC_SEC0  equ 00100000b
  12:     -	0021          	IO_RTC_SEC1  equ 00100001b
  13:     -	0022          	IO_RTC_MIN0  equ 00100010b
  14:     -	0023          	IO_RTC_MIN1  equ 00100011b
  15:     -	0024          	IO_RTC_HOUR  equ 00100100b
  16:     -	0025          	IO_RTC_AMPM  equ 00100101b
  17:     -	0026          	IO_RTC_DAY0  equ 00100110b
  18:     -	0027          	IO_RTC_DAY1  equ 00100111b
  19:     -	0028          	IO_RTC_MON0  equ 00101000b
  20:     -	0029          	IO_RTC_MON1  equ 00101001b
  21:     -	002A          	IO_RTC_YERR0 equ 00101010b
  22:     -	002B          	IO_RTC_YEAR1 equ 00101011b
  23:     -	002C          	IO_RTC_WEEK  equ 00101100b
  24:     -	002D          	IO_RTC_CTR_D equ 00101101b
  25:     -	002E          	IO_RTC_CTR_E equ 00101110b
  26:     -	002F          	IO_RTC_CTR_F equ 00101111b
  27:				
  28:     -	0040          	IO_AY0_ADDR equ 01000000b
  29:     -	0041          	IO_AY0_DATA equ 01000001b
  30:     -	0042          	IO_AY1_ADDR equ 01000010b
  31:     -	0043          	IO_AY1_DATA equ 01000011b
  32:				
  33:     -	0000          	START_ROM   equ 0x0000
  34:     -	0020          	IO_REG0     equ 0x20
  35:				
  36:     -	0081          	VDP_REG     equ 0x81
  37:     -	0080          	VDP_MEM     equ 0x80
  38:				
  39:     -	0100          	PROG_ROM_START equ 0x0100
  40:     -	4000          	PROG_MEM_START equ 04000h
  41:				
  42:     -	0060          	IO_PIO_0_A_D equ 0x60
  43:     -	0061          	IO_PIO_0_A_C equ 0x61
  44:     -	0062          	IO_PIO_0_B_D equ 0x62
  45:     -	0063          	IO_PIO_0_B_C equ 0x63
  46:				
  47:     -	0064          	IO_PIO_1_A_D equ 0x64   ;PS2
  48:     -	0065          	IO_PIO_1_A_C equ 0x65
  49:     -	0066          	IO_PIO_1_B_D equ 0x66
  50:     -	0067          	IO_PIO_1_B_C equ 0x67
  51:				
**** main.asm ****
  19:				
  20:     -	0000          	    org 0x0000
  21:     -	0000          	main:
  22:    0+10	0000  C32800  	    jp mon_start_init_sound    
  23:				
  24:				;memory var template
  25:     -	0003          	mon_var_template:
  26:     -	4000          	    phase SYS_RAM_START
  27:				
  28:     -	4000          	var_buffer_len:
  29:     -	4000  00      	    defb 0
  30:     -	4001          	var_last_char:
  31:     -	4001  00      	    defb 0
  32:     -	4002          	var_curserx:
  33:     -	4002  00      	    defb 0
  34:     -	4003          	var_cursery:
  35:     -	4003  00      	    defb 0
  36:     -	4004          	var_scratch:
  37:     -	4004 ..4013 00	    defs 16 ;16 bytes space for scratch vars
  38:     -	4014          	var_ps2mem:
  39:     -	4014 ..4023 00	    defs 16 ;16 bytes space for scratch vars
  40:     -	4024          	var_buffer:
  41:     -	4024  00      	    defb 0  ;var lentgh 
  42:				
  43:				
  44:     -	4025          	mon_var_template_end:
  45:     -	0028          	    dephase
  46:				;end memory var template
  47:				
  48:     -	0028          	mon_start_init_sound:
  49:   10+7	0028  1608    	    ld	  D,0x08	; Select register #8
  50:   17+7	002A  3E00    	    ld	  A,0x00	; Volume channel A 0
  51:   24+17	002C  CD9400  	    call AY0_WRITE_REG
  52:   41+7	002F  1609    	    ld	  D,0x09	; Select register #9
  53:   48+7	0031  3E00    	    ld	  A,0x00	; Volume channel B 0
  54:   55+17	0033  CD9400  	    call AY0_WRITE_REG
  55:   72+7	0036  160A    	    ld	  D,0x0A	; Select register #10
  56:   79+7	0038  3E00    	    ld	  A,0x00	; Volume channel C 0
  57:   86+17	003A  CD9400  	    call AY0_WRITE_REG
  58:     -	003D          	mon_start_init_serial:
  59:  103+7	003D  3E0F    	    ld A,VAR_CONSOLE_CONF   ; Setup CTC
  60:  110+11	003F  D301    	    out (IO_CTC0_C1),A      ; Controll word, software reset, time constant follows, CLK/TRG starts timer
  61:  121+7	0041  3E18    	    ld A,VAR_CONSOLE_BAUD   ; Setup timer const
  62:  128+11	0043  D301    	    out (IO_CTC0_C1),A      ; Load timer const into CTC (Setup Baud generator)
  63:				    ;set up TX and RX:W
  64:  139+7	0045  3E30    	    ld a,00110000b      ;write into WR0: error reset, select WR0
  65:  146+11	0047  D313    	    out (IO_SIO0B_C),A
  66:  157+7	0049  3E18    	    ld a,018h           ;write into WR0: channel reset
  67:  164+11	004B  D313    	    out (IO_SIO0B_C),A
  68:  175+7	004D  3E04    	    ld a,004h           ;write into WR0: select WR4
  69:  182+11	004F  D313    	    out (IO_SIO0B_C),A
  70:  193+7	0051  3E04    	    ld a,04h            ;44h write into WR4: clkx1,1 stop bit, no parity
  71:  200+11	0053  D313    	    out (IO_SIO0B_C),A
  72:  211+7	0055  3E05    	    ld a,005h           ;write into WR0: select WR5
  73:  218+11	0057  D313    	    out (IO_SIO0B_C),A
  74:  229+7	0059  3E68    	    ld a,068h           ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
  75:  236+11	005B  D313    	    out (IO_SIO0B_C),A
  76:  247+7	005D  3E01    	    ld a,01h            ;write into WR0: select WR1
  77:  254+11	005F  D313    	    out (IO_SIO0B_C),A
  78:  265+7	0061  3E04    	    ld a,00000100b      ;no interrupt in CH B, special RX condition affects vect
  79:  272+11	0063  D313    	    out (IO_SIO0B_C),A
  80:				    ;enable SIO channel A RX
  81:  283+7	0065  3E03    	    ld a,003h ;write into WR0: select WR3
  82:  290+11	0067  D313    	    out (IO_SIO0B_C),A
  83:  301+7	0069  3EC1    	    ld a,0C1h ;RX 8bit, auto enable off, RX on
  84:  308+11	006B  D313    	    out (IO_SIO0B_C),A
  85:				    ;Channel A RX active
  86:     -	006D          	mon_start_ram:
  87:  319+10	006D  210300  	    ld hl,mon_var_template
  88:  329+10	0070  112540  	    ld de,mon_var_template_end
  89:  339+10	0073  010040  	    ld bc,SYS_RAM_START
  90:     -	0076          	mon_start_ram_loop:
  91:  349+7	0076  7E      	    ld a,(hl)  ;copy values
  92:  356+7	0077  02      	    ld (bc),a
  93:  363+6	0078  23      	    inc hl      
  94:  369+6	0079  03      	    inc bc
  95:  375+11	007A  E5      	    push hl    ;check if end is reached
  96:  386+15	007B  ED52    	    sbc hl,de
  97:  401+10	007D  E1      	    pop hl
  98:  411+10	007E  C27600  	    jp nz, mon_start_ram_loop
  99:				    ;template copy done
 100:				
 101:     -	0081          	mon_start_complete:
 102:  421+17	0081  CDDE0C  	    call keyboard_init_io
 103:  438+17	0084  CD0903  	    call vdpconsole_init
 104:				    ;call print_clear
 105:  455+10	0087  21DA10  	    ld hl, [STR_Banner_Start]
 106:  465+17	008A  CD3702  	    call print_str
 107:				
 108:				
 109:				    ;jp splash_run
 110:  482+10	008D  C3A10E  	    jp ps2demo_run
 111:				    ;call debug_init
 112:  492+17	0090  CD9C00  	    call PROMPT_BEGIN
 113:				    ;halt CPU if prompt exits
 114:  509+4	0093  76      	    halt
 115:				    
 116:				; Misc Functions
 117:     -	0094          	AY0_WRITE_REG:
 118:  513+4	0094  47      	    LD B,A
 119:  517+4	0095  7A      	    LD A,D
 120:  521+11	0096  D340    	    OUT (IO_AY0_ADDR),A
 121:  532+4	0098  78      	    LD A,B
 122:  536+11	0099  D341    	    OUT (IO_AY0_DATA),A
 123:  547+10	009B  C9      	    RET
 124:				
 125:     -	009C          	PROMPT_BEGIN:
 126:  557+17	009C  CD4302  	    call print_newLine
 127:  574+17	009F  CDAF02  	    call A_RTS_ON
 128:  591+7	00A2  3E3E    	    ld a,'>'
 129:  598+17	00A4  CD3302  	    call print_char
 130:  615+4	00A7  AF      	    xor a  ;reset buffer len
 131:  619+13	00A8  320040  	    ld (var_buffer_len),a
 132:				
 133:     -	00AB          	PROMPT_BEGIN_READ_LOOP:
 134:  632+17	00AB  CD7402  	    call read_char
 135:  649+10	00AE  CAAB00  	    jp z, PROMPT_BEGIN_READ_LOOP    ; wait until char avail
 136:				    
 137:				    ; process special ops
 138:  659+7	00B1  FE0D    	    cp 13   ; enter
 139:  666+10	00B3  CAEF00  	    jp z,PROMPT_BEGIN_READ_PROCESS
 140:  676+7	00B6  FE08    	    cp 0x08 ; backspace 0x08 VT102 0x7f Putty
 141:  683+10	00B8  CAD500  	    jp z,PROMPT_BEGIN_READ_BACKSPACE
 142:				
 143:  693+11	00BB  F5      	    push af
 144:				    ; a contains latest char
 145:  704+10	00BC  212440  	    ld hl,[var_buffer]
 146:  714+7	00BF  1600    	    ld d,0
 147:  721+13	00C1  3A0040  	    ld a,(var_buffer_len)
 148:  734+4	00C4  5F      	    ld e,a
 149:  738+11	00C5  19      	    add hl,de   ;hl now contains pointer to last position in buffer
 150:  749+4	00C6  3C      	    inc a
 151:  753+13	00C7  320040  	    ld (var_buffer_len),a ;store incremented buffer length
 152:				
 153:  766+10	00CA  F1      	    pop af
 154:  776+7	00CB  77      	    ld (hl),a
 155:  783+17	00CC  CD3302  	    call print_char
 156:  800+6	00CF  23      	    inc hl
 157:  806+4	00D0  AF      	    xor a       ;a = 0
 158:  810+7	00D1  77      	    ld (hl),a   ;always add null termination after last char
 159:  817+10	00D2  C3AB00  	    jp PROMPT_BEGIN_READ_LOOP
 160:				
 161:     -	00D5          	PROMPT_BEGIN_READ_BACKSPACE:
 162:  827+13	00D5  3A0040  	    ld a,(var_buffer_len)
 163:  840+4	00D8  A7      	    and a
 164:  844+10	00D9  CAAB00  	    jp z, PROMPT_BEGIN_READ_LOOP    ; do not continue if already at char 0
 165:  854+4	00DC  3D      	    dec a       ;decrement length
 166:  858+13	00DD  320040  	    ld (var_buffer_len),a   ;and store it
 167:  871+4	00E0  5F      	    ld e,a      ;load de with decremented value
 168:  875+7	00E1  1600    	    ld d,0
 169:  882+10	00E3  212440  	    ld hl,[var_buffer]
 170:  892+11	00E6  19      	    add hl,de   ;hl now contains pointer to last position in buffer
 171:  903+4	00E7  AF      	    xor a       ; store null byte to current location
 172:  907+7	00E8  77      	    ld (hl),a
 173:  914+17	00E9  CD7F02  	    call print_delete
 174:				    ;ld a, 0x08
 175:				    ;call print_char
 176:				    ;ld a, 0x20
 177:				    ;call print_char
 178:				    ;ld a, 0x08
 179:				    ;call print_char
 180:  931+10	00EC  C3AB00  	    jp PROMPT_BEGIN_READ_LOOP
 181:				
 182:     -	00EF          	PROMPT_BEGIN_READ_PROCESS:
 183:				    ;call print_newLine
 184:				    ;ld hl,var_buffer
 185:				    ;call print_str
 186:				
 187:  941+13	00EF  3A2440  	    ld a,([var_buffer])
 188:  954+7	00F2  FE24    	    cp '$'              ;jump to addr
 189:  961+10	00F4  CA1D01  	    jp z, CMD_EXEC
 190:  971+7	00F7  FE3F    	    cp '?'              ;print hexdump
 191:  978+10	00F9  CA3C01  	    jp z, CMD_VIEW
 192:  988+7	00FC  FE21    	    cp '!'              ;set memory
 193:  995+10	00FE  CAA601  	    jp z, CMD_SET
 194: 1005+7	0101  FE69    	    cp 'i'              ;in IO
 195: 1012+10	0103  CA0B02  	    jp z, CMD_IO_READ
 196: 1022+7	0106  FE6F    	    cp 'o'              ;out IO
 197: 1029+10	0108  CAE201  	    jp z, CMD_IO_WRITE
 198: 1039+7	010B  FE78    	    cp 'x'              ;start xmodem
 199: 1046+10	010D  CA2611  	    jp z, xmodem_init
 200:				
 201:				
 202: 1056+17	0110  CD4302  	    call print_newLine
 203: 1073+10	0113  210511  	    ld hl, [STR_Unknown]
 204: 1083+17	0116  CD3702  	    call print_str
 205: 1100+10	0119  C39C00  	    jp PROMPT_BEGIN
 206:				
 207: 1110+10	011C  C9      	    ret
 208:				
 209:     -	011D          	CMD_EXEC:
 210: 1120+4	011D  AF      	    xor a                   ;write null byte to buffer pos 0 to prevent reexecute the last command
 211: 1124+13	011E  322440  	    ld (var_buffer),a
 212:				
 213: 1137+10	0121  212540  	    ld hl,var_buffer+1      ;load 1st byte
 214: 1147+17	0124  CDB802  	    call DHEX_TO_BYTE       
 215: 1164+4	0127  47      	    ld b,a                  ;store result in b
 216: 1168+4	0128  7B      	    ld a,e                  ;check for error
 217: 1172+4	0129  A7      	    and a
 218: 1176+10	012A  C22702  	    jp nz, CMD_SYNTAX_ERROR
 219:				
 220: 1186+10	012D  212740  	    ld hl,var_buffer+3      ;load 2nd byte
 221: 1196+17	0130  CDB802  	    call DHEX_TO_BYTE
 222: 1213+4	0133  4F      	    ld c,a
 223: 1217+4	0134  7B      	    ld a,e  ;check for error
 224: 1221+4	0135  A7      	    and a
 225: 1225+10	0136  C22702  	    jp nz, CMD_SYNTAX_ERROR
 226:				
 227: 1235+4	0139  60      	    ld h,b
 228: 1239+4	013A  69      	    ld l,c
 229: 1243+4	013B  E9      	    jp (hl)
 230:				
 231:     -	013C          	CMD_VIEW:
 232: 1247+17	013C  CD4302  	    call print_newLine
 233: 1264+10	013F  212540  	    ld hl,var_buffer+1      ;load 1st byte
 234: 1274+17	0142  CDB802  	    call DHEX_TO_BYTE       
 235: 1291+4	0145  47      	    ld b,a                  ;store result in b
 236: 1295+4	0146  7B      	    ld a,e                  ;check for error
 237: 1299+4	0147  A7      	    and a
 238: 1303+10	0148  C22702  	    jp nz, CMD_SYNTAX_ERROR
 239:				
 240: 1313+10	014B  212740  	    ld hl,var_buffer+3      ;load 2nd byte
 241: 1323+17	014E  CDB802  	    call DHEX_TO_BYTE
 242: 1340+4	0151  4F      	    ld c,a
 243: 1344+4	0152  7B      	    ld a,e  ;check for error
 244: 1348+4	0153  A7      	    and a
 245: 1352+10	0154  C22702  	    jp nz, CMD_SYNTAX_ERROR  
 246:				
 247:				
 248: 1362+13	0157  3A2940  	    ld a,(var_buffer+5)
 249: 1375+7	015A  FE20    	    cp ' '
 250: 1382+10	015C  C22702  	    jp nz, CMD_SYNTAX_ERROR
 251:				
 252: 1392+10	015F  212A40  	    ld hl,var_buffer+6      ;load length
 253: 1402+17	0162  CDB802  	    call DHEX_TO_BYTE
 254: 1419+11	0165  F5      	    push af
 255: 1430+4	0166  7B      	    ld a,e  ;check for error
 256: 1434+4	0167  A7      	    and a
 257: 1438+10	0168  C22702  	    jp nz, CMD_SYNTAX_ERROR  
 258:				    
 259:				    ;draw header
 260: 1448+10	016B  210A11  	    ld hl,[STR_HEXDUMP_HEADER]
 261: 1458+17	016E  CD3702  	    call print_str
 262:				
 263: 1475+10	0171  F1      	    pop af
 264:				    ;loading vars done. display results
 265: 1485+4	0172  60      	    ld h, b ;pointer to current byte
 266: 1489+4	0173  69      	    ld l, c ;pointer to current byte
 267: 1493+4	0174  47      	    ld b, a                 ;bytes counter
 268:				
 269:				    ;draw row
 270:     -	0175          	CMD_VIEW_ROW:
 271: 1497+17	0175  CD4302  	    call print_newLine
 272: 1514+4	0178  7C      	    ld a,h              ;print start
 273: 1518+17	0179  CD6302  	    call print_a_hex
 274: 1535+4	017C  7D      	    ld a,l
 275: 1539+17	017D  CD6302  	    call print_a_hex
 276: 1556+7	0180  3E20    	    ld a, ' '
 277: 1563+17	0182  CD3302  	    call print_char
 278: 1580+7	0185  0E08    	    ld c, 8                 ;column counter
 279:     -	0187          	CMD_VIEW_ROW_LOOP:
 280: 1587+7	0187  7E      	    ld a,(hl)
 281: 1594+17	0188  CD6302  	    call print_a_hex
 282:				    
 283: 1611+6	018B  23      	    inc hl  ;increment pointer
 284: 1617+4	018C  05      	    dec b   ;decrement byte counter
 285: 1621+4	018D  0D      	    dec c   ;decrement column counter
 286:				
 287: 1625+4	018E  78      	    ld a,b
 288: 1629+4	018F  A7      	    and a
 289: 1633+10	0190  CAA001  	    jp z,CMD_VIEW_END   ;if byte counter = 0 -> end reached
 290:				
 291: 1643+4	0193  79      	    ld a,c
 292: 1647+4	0194  A7      	    and a
 293: 1651+10	0195  CA7501  	    jp z,CMD_VIEW_ROW   ;else if column counter = 0 -> 16 chars printed. next row
 294:				
 295: 1661+7	0198  3E20    	    ld a, ' '
 296: 1668+17	019A  CD3302  	    call print_char
 297: 1685+10	019D  C38701  	    jp CMD_VIEW_ROW_LOOP    ;else
 298:     -	01A0          	CMD_VIEW_END:
 299: 1695+17	01A0  CD4302  	    call print_newLine
 300: 1712+10	01A3  C39C00  	    jp PROMPT_BEGIN
 301:				
 302:     -	01A6          	CMD_SET:
 303: 1722+10	01A6  212540  	    ld hl,var_buffer+1      ;load 1st byte
 304: 1732+17	01A9  CDB802  	    call DHEX_TO_BYTE       
 305: 1749+4	01AC  47      	    ld b,a                  ;store result in b
 306: 1753+4	01AD  7B      	    ld a,e                  ;check for error
 307: 1757+4	01AE  A7      	    and a
 308: 1761+10	01AF  C22702  	    jp nz, CMD_SYNTAX_ERROR
 309:				
 310: 1771+10	01B2  212740  	    ld hl,var_buffer+3      ;load 2nd byte
 311: 1781+17	01B5  CDB802  	    call DHEX_TO_BYTE
 312: 1798+4	01B8  4F      	    ld c,a
 313: 1802+4	01B9  7B      	    ld a,e  ;check for error
 314: 1806+4	01BA  A7      	    and a
 315: 1810+10	01BB  C22702  	    jp nz, CMD_SYNTAX_ERROR    
 316:				    ;bc now contains the start address
 317:				
 318: 1820+10	01BE  212940  	    ld hl,var_buffer+5
 319:     -	01C1          	CMD_SET_LOOP:
 320: 1830+7	01C1  7E      	    ld a,(hl)
 321: 1837+7	01C2  FE00    	    cp 0    ;if 0 then end
 322: 1844+10	01C4  CADC01  	    jp z, CMD_SET_END
 323: 1854+7	01C7  FE20    	    cp ' '
 324: 1861+10	01C9  C22702  	    jp nz, CMD_SYNTAX_ERROR
 325: 1871+6	01CC  23      	    inc hl  ;next byte
 326: 1877+17	01CD  CDB802  	    call DHEX_TO_BYTE
 327: 1894+7	01D0  02      	    ld (bc),a   ;load byte to 
 328: 1901+4	01D1  7B      	    ld a,e
 329: 1905+4	01D2  A7      	    and a
 330: 1909+10	01D3  C22702  	    jp nz, CMD_SYNTAX_ERROR    
 331: 1919+6	01D6  03      	    inc bc
 332: 1925+6	01D7  23      	    inc hl
 333: 1931+6	01D8  23      	    inc hl
 334: 1937+10	01D9  C3C101  	    jp CMD_SET_LOOP
 335:     -	01DC          	CMD_SET_END:
 336: 1947+17	01DC  CD4302  	    call print_newLine
 337: 1964+10	01DF  C39C00  	    jp PROMPT_BEGIN
 338:				
 339:				
 340:     -	01E2          	CMD_IO_WRITE:
 341: 1974+10	01E2  212540  	    ld hl,var_buffer+1      ;load 1st byte
 342: 1984+17	01E5  CDB802  	    call DHEX_TO_BYTE       
 343: 2001+4	01E8  4F      	    ld c,a                  ;store result in b
 344: 2005+4	01E9  7B      	    ld a,e                  ;check for error
 345: 2009+4	01EA  A7      	    and a
 346: 2013+10	01EB  C22702  	    jp nz, CMD_SYNTAX_ERROR
 347:				
 348: 2023+13	01EE  3A2740  	    ld a,(var_buffer+3)
 349: 2036+7	01F1  FE20    	    cp ' '
 350: 2043+10	01F3  C22702  	    jp nz, CMD_SYNTAX_ERROR
 351:				
 352: 2053+10	01F6  212840  	    ld hl,var_buffer+4      ;load 1st byte
 353: 2063+17	01F9  CDB802  	    call DHEX_TO_BYTE       
 354: 2080+11	01FC  F5      	    push af
 355: 2091+4	01FD  7B      	    ld a,e                  ;check for error
 356: 2095+4	01FE  A7      	    and a
 357: 2099+10	01FF  C22702  	    jp nz, CMD_SYNTAX_ERROR
 358:				
 359: 2109+10	0202  F1      	    pop af
 360: 2119+12	0203  ED79    	    out (c),a    
 361: 2131+17	0205  CD4302  	    call print_newLine
 362: 2148+10	0208  C39C00  	    jp PROMPT_BEGIN
 363:				
 364:     -	020B          	CMD_IO_READ:
 365: 2158+10	020B  212540  	    ld hl,var_buffer+1      ;load 1st byte
 366: 2168+17	020E  CDB802  	    call DHEX_TO_BYTE       
 367: 2185+4	0211  4F      	    ld c,a                  ;store result in b
 368: 2189+4	0212  7B      	    ld a,e                  ;check for error
 369: 2193+4	0213  A7      	    and a
 370: 2197+10	0214  C22702  	    jp nz, CMD_SYNTAX_ERROR
 371:				
 372: 2207+12	0217  ED78    	    in a,(c)
 373: 2219+11	0219  F5      	    push af
 374: 2230+17	021A  CD4302  	    call print_newLine
 375: 2247+10	021D  F1      	    pop af
 376: 2257+17	021E  CD6302  	    call print_a_hex
 377: 2274+17	0221  CD4302  	    call print_newLine
 378: 2291+10	0224  C39C00  	    jp PROMPT_BEGIN
 379:				
 380:     -	0227          	CMD_SYNTAX_ERROR:
 381: 2301+17	0227  CD4302  	    call print_newLine
 382: 2318+10	022A  210011  	    ld hl, [STR_SyntaxError]
 383: 2328+17	022D  CD3702  	    call print_str
 384: 2345+10	0230  C39C00  	    jp PROMPT_BEGIN
 385:				
 386:				
 387:				
 388:     -	0233          	Includes:
 389:				.include "vdpconsole.s"
**** include/vdpconsole.s ****
   1:				
   2:				
   3:				; A contains char
   4:				; Destroys A
   5:     -	0233          	print_char:
   6: 2355+17	0233  CDEB0B  	    call vdp_char
   7: 2372+10	0236  C9      	    ret
   8:				; HL contains pointer to string
   9:				; Destroy A, HL
  10:				
  11:     -	0237          	print_str:
  12: 2382+7	0237  7E      	    ld a, (hl)
  13: 2389+4	0238  B7      	    or a
  14: 2393+7+5	0239  2806    	    jr z,print_str_end
  15: 2400+17	023B  CD3302  	    call print_char
  16: 2417+6	023E  23      	    inc hl
  17: 2423+12	023F  18F6    	    jr print_str
  18:     -	0241          	print_str_end:
  19: 2435+10	0241  C9      	    ret
  20:				
  21:     -	0242          	print_clear:
  22:				    ;NOT IMPLEMENTED
  23:				    ;ld hl, [MSG_CLEAR]
  24:				    ;call print_str
  25: 2445+10	0242  C9      	    ret
  26:				
  27:     -	0243          	print_newLine:
  28: 2455+4	0243  AF      	    xor a               
  29: 2459+13	0244  320240  	    ld (var_curserx),a
  30: 2472+13	0247  3A0340  	    ld a,(var_cursery)
  31: 2485+7	024A  FE17    	    cp 23
  32: 2492+10	024C  CA5702  	    jp z,print_newLine_scroll
  33: 2502+4	024F  3C      	    inc a
  34: 2506+13	0250  320340  	    ld (var_cursery),a    
  35: 2519+17	0253  CDBC0B  	    call vdp_cursor_move
  36: 2536+10	0256  C9      	    ret
  37:     -	0257          	print_newLine_scroll:
  38: 2546+17	0257  CD2A0C  	    call vdp_scroll
  39: 2563+7	025A  3E17    	    ld a,23
  40: 2570+13	025C  320340  	    ld (var_cursery),a  
  41: 2583+17	025F  CDBC0B  	    call vdp_cursor_move
  42:				
  43: 2600+10	0262  C9      	    ret
  44:     -	0263          	print_a_hex:
  45: 2610+11	0263  F5      	    push af
  46: 2621+11	0264  C5      	    push bc
  47: 2632+11	0265  D5      	    push de
  48: 2643+17	0266  CDEF02  	    call STRCONV_BYTES_TO_HEX
  49: 2660+4	0269  78      	    ld a,b
  50: 2664+17	026A  CD3302  	    call print_char
  51: 2681+4	026D  79      	    ld a,c
  52: 2685+17	026E  CD3302  	    call print_char
  53: 2702+10	0271  D1      	    pop de
  54: 2712+10	0272  C1      	    pop bc
  55: 2722+10	0273  F1      	    pop af
  56:				
  57:     -	0274          	read_char:
  58: 2732+4	0274  AF      	    xor a               ; a = 0
  59: 2736+11	0275  D313    	    out (IO_SIO0B_C), a ; select reg 0
  60: 2747+11	0277  DB13    	    in a, (IO_SIO0B_C)  ; read reg 0
  61: 2758+7	0279  E601    	    and	1               ; mask D0 (recieve char available)
  62: 2765+5+6	027B  C8      	    ret	Z               ; return 0 if no char
  63: 2770+11	027C  DB11    	    in a, (IO_SIO0B_D)  ; read char if avail
  64: 2781+10	027E  C9      	    ret                 ; return
  65:				
  66:     -	027F          	print_delete:
  67: 2791+13	027F  3A0240  	    ld a,(var_curserx) 
  68: 2804+7	0282  FE00    	    cp 0
  69: 2811+10	0284  DA9502  	    jp c,print_delete_end
  70: 2821+4	0287  3D      	    dec a
  71: 2825+13	0288  320240  	    ld (var_curserx),a
  72: 2838+17	028B  CDBC0B  	    call vdp_cursor_move
  73: 2855+7	028E  3E20    	    ld a, ' '
  74: 2862+11	0290  D380    	    out (VDP_MEM),a
  75: 2873+17	0292  CDBC0B  	    call vdp_cursor_move
  76:     -	0295          	print_delete_end:
  77: 2890+10	0295  C9      	    ret
  78:				
  79:     -	0296          	print_parity:
  80: 2900+7+5	0296  3807    	    jr c, print_parity_odd
  81: 2907+7	0298  3E45    	    ld a, "E"
  82: 2914+17	029A  CD3302  	    call print_char
  83: 2931+4	029D  B7      	    or a
  84: 2935+10	029E  C9      	    ret
  85:     -	029F          	print_parity_odd:
  86: 2945+7	029F  3E4F    	    ld a, "O"
  87: 2952+17	02A1  CD3302  	    call print_char
  88: 2969+4	02A4  37      	    scf
  89: 2973+10	02A5  C9      	    ret
  90:				
  91:				; Serial Util Functions
  92:     -	02A6          	A_RTS_OFF:
  93: 2983+7	02A6  3E05    	    ld a,005h ;write into WR0: select WR5
  94: 2990+11	02A8  D313    	    out (IO_SIO0B_C),A
  95: 3001+7	02AA  3EE8    	    ld a,0E8h ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
  96: 3008+11	02AC  D313    	    out (IO_SIO0B_C),A
  97: 3019+10	02AE  C9      	    ret
  98:     -	02AF          	A_RTS_ON:
  99: 3029+7	02AF  3E05    	    ld a,005h ;write into WR0: select WR5
 100: 3036+11	02B1  D313    	    out (IO_SIO0B_C),A
 101: 3047+7	02B3  3EEA    	    ld a,0EAh ;DTR active, TX 8bit, BREAK off, TX on, RTS active
 102: 3054+11	02B5  D313    	    out (IO_SIO0B_C),A
**** main.asm ****
 390: 3065+10	02B7  C9      	    ret
 391:				.include "conversions.s"
**** include/conversions.s ****
   1:				; HL Contains Address to string
   2:				; E is 0xFF if error
   3:				; E is 0x00 if okay
   4:				; A returns byte
   5:				; A,DE are destroyed
   6:     -	02B8          	DHEX_TO_BYTE:
   7: 3075+11	02B8  E5      	    PUSH HL             ;Backup pointer
   8:				    ; Load First Byte
   9: 3086+7	02B9  7E      	    LD A,(HL)           ;Load first char (high)
  10: 3093+17	02BA  CDD802  	    CALL HEX_TO_BIN     ;Conv chart to 4bit
  11: 3110+7+5	02BD  3815    	    jr C, DHEX_TO_BYTE_FAILED   ;If error jmp to DHEX_TO_BYTE_FAILED
  12: 3117+8	02BF  CB27    	    SLA A               ;shift result to upper 4 bits
  13: 3125+8	02C1  CB27    	    SLA A
  14: 3133+8	02C3  CB27    	    SLA A
  15: 3141+8	02C5  CB27    	    SLA A
  16: 3149+4	02C7  57      	    LD D,A              ;store result in D
  17:				
  18: 3153+6	02C8  23      	    INC HL              ;next byte
  19: 3159+7	02C9  7E      	    LD A,(HL)           ;load 2nd char (lower)
  20: 3166+17	02CA  CDD802  	    CALL HEX_TO_BIN     ;Conv chart to 4bit
  21: 3183+7+5	02CD  3805    	    jr C, DHEX_TO_BYTE_FAILED   ;If error jmp to DHEX_TO_BYTE_FAILED
  22: 3190+4	02CF  B2      	    OR D                ;merge D with accumulator
  23:				
  24: 3194+10	02D0  E1      	    POP HL              ;restor original pointer
  25: 3204+7	02D1  1E00    	    LD E,0x00           ;set error to 0x00 = no error
  26: 3211+10	02D3  C9      	    RET
  27:     -	02D4          	DHEX_TO_BYTE_FAILED:
  28: 3221+7	02D4  1EFF    	    LD E,0xFF           ;set error to oxFF
  29:				    ;LD A,0x00
  30: 3228+10	02D6  E1      	    POP HL
  31: 3238+10	02D7  C9      	    RET
  32:				
  33:				; REG A Contains CHAR-Low
  34:				; If failed, Carry is set
  35:     -	02D8          	HEX_TO_BIN:
  36: 3248+7	02D8  D630    	    SUB 48 ; 0 is 0
  37: 3255+10	02DA  EAED02  	    jp PE, HEX_TO_INVALID_2; to low (SUB overflow)
  38: 3265+7	02DD  FE0A    	    CP 10 ; Value is between 0 and 9
  39: 3272+7+5	02DF  3805    	    JR C, HEX_TO_BIN_2
  40: 3279+7	02E1  D607    	    SUB 7
  41: 3286+10	02E3  EAED02  	    jp PE, HEX_TO_INVALID_2; to low (SUB overflow)
  42:     -	02E6          	HEX_TO_BIN_2:
  43: 3296+7	02E6  FE10    	    CP 16
  44: 3303+7+5	02E8  3003    	    JR NC, HEX_TO_INVALID_2; if bigger than 15-> fail
  45: 3310+7	02EA  E60F    	    AND 0x0F
  46: 3317+10	02EC  C9      	    RET
  47:     -	02ED          	HEX_TO_INVALID_2:
  48: 3327+4	02ED  37      	    SCF ;set carry flag
  49: 3331+10	02EE  C9      	    RET
  50:				
  51:				
  52:				;*****************
  53:				; Convert Byte to Hex Char (ASCII)
  54:				;*****************
  55:				;Description: the StrLength function inline
  56:				;
  57:				;Inputs: A contains input byte
  58:				;
  59:				;Outputs: BC contains 2 Bytes of ASCII (HEX)
  60:				;
  61:				;Destroys: A, BC,
  62:     -	02EF          	STRCONV_BYTES_TO_HEX:
  63: 3341+11	02EF  F5      	    PUSH AF;Backup A Register
  64: 3352+4	02F0  1F      	    RRA
  65: 3356+4	02F1  1F      	    RRA
  66: 3360+4	02F2  1F      	    RRA
  67: 3364+4	02F3  1F      	    RRA
  68: 3368+17	02F4  CDFE02  	    CALL STRCONV_BYTES_TO_HEX_1
  69:				    ;LD A,D
  70: 3385+4	02F7  47      	    LD B,A  
  71: 3389+10	02F8  F1      	    POP AF ; Reload first Byte
  72: 3399+17	02F9  CDFE02  	    CALL STRCONV_BYTES_TO_HEX_1
  73:				    ;LD A,D
  74: 3416+4	02FC  4F      	    LD C,A
  75: 3420+10	02FD  C9      	    RET
  76:				
  77:     -	02FE          	STRCONV_BYTES_TO_HEX_1:
  78: 3430+7	02FE  E60F    	    AND 0x0F
  79: 3437+7	0300  C630    	    ADD 48
  80: 3444+7	0302  FE3A    	    CP 58 ; Check if less than 58 (less than ASCII 9)
  81:				    ;JR C, STRCONV_BYTES_TO_HEX_2
  82: 3451+5+6	0304  D8      	    RET C
  83: 3456+7	0305  C607    	    ADD 7 ; A-F
  84: 3463+10	0307  C9      	    RET
  85:     -	0308          	STRCONV_BYTES_TO_HEX_2:
  86:				    ;LD D,A
  87: 3473+10	0308  C9      	    RET
  88:				
  89:				
**** main.asm ****
 392:				.include "vdptext.s"
**** include/vdptext.s ****
   1:				; Registers
   2:     -	0080          	TmsCtrl0Reg:            equ 80h
   3:     -	0081          	TmsCtrl1Reg:            equ 81h
   4:     -	0082          	TmsNameReg:             equ 82h
   5:     -	0083          	TmsColorTableReg:       equ 83h
   6:     -	0084          	TmsPatternReg:          equ 84h
   7:     -	0085          	TmsSpriteAttrReg:       equ 85h
   8:     -	0086          	TmsSpritePatternReg:    equ 86h
   9:     -	0087          	TmsColorReg:            equ 87h
  10:				
  11:				; colors
  12:     -	0000          	TmsTransparent:         equ 0
  13:     -	0001          	TmsBlack:               equ 1
  14:     -	0002          	TmsMediumGreen:         equ 2
  15:     -	0003          	TmsLightGreen:          equ 3
  16:     -	0004          	TmsDarkBlue:            equ 4
  17:     -	0005          	TmsLightBlue:           equ 5
  18:     -	0006          	TmsDarkRed:             equ 6
  19:     -	0007          	TmsCyan:                equ 7
  20:     -	0008          	TmsMediumRed:           equ 8
  21:     -	0009          	TmsLightRed:            equ 9
  22:     -	000A          	TmsDarkYellow:          equ 0ah
  23:     -	000B          	TmsLightYellow:         equ 0bh
  24:     -	000C          	TmsDarkGreen:           equ 0ch
  25:     -	000D          	TmsMagenta:             equ 0dh
  26:     -	000E          	TmsGray:                equ 0eh
  27:     -	000F          	TmsWhite:               equ 0fh
  28:				
  29:				; memory locations
  30:     -	3800          	TmsNameLoc:             equ 0x3800
  31:     -	0000          	TmsPatternLoc:          equ 0x0000
  32:     -	2000          	TmsColorTableLoc:       equ 0x2000
  33:				
  34:				; table lengths
  35:				
  36:     -	0300          	TmsTileNameLen:         equ 300h
  37:     -	03C0          	TmsTextNameLen:         equ 3c0h
  38:				
  39:     -	0020          	TmsTileColorLen:        equ 20h
  40:     -	0800          	TmsBitmapColorLen:      equ 800h
  41:				
  42:     -	0800          	TmsTilePatternLen:      equ 800h
  43:     -	0800          	TmsTextPatternLen:      equ 800h
  44:     -	0600          	TmsMulticolorPatternLen: equ 600h
  45:     -	1800          	TmsBitmapPatternLen:    equ 1800h
  46:				
  47:				;VDP initialization
  48:     -	0309          	vdpconsole_init:
  49: 3483+4	0309  AF      	    xor a
  50: 3487+13	030A  320240  	    ld (var_curserx), a ;initialize curser x position with 0
  51: 3500+13	030D  320340  	    ld (var_cursery), a ;initialize curser y position with 0
  52:				
  53: 3513+4	0310  AF      	    xor a
  54: 3517+7	0311  0680    	    ld b, TmsCtrl0Reg
  55: 3524+17	0313  CD7D03  	    call vdp_reg_write  ; Set reg 0 to 0
  56:				
  57: 3541+7	0316  3E90    	    ld a, 0x90          ; Set 16k memory and blank
  58: 3548+7	0318  0681    	    ld b, TmsCtrl1Reg
  59: 3555+17	031A  CD7D03  	    call vdp_reg_write  ; write to reg 1
  60:				
  61:				    ;ld a,0xFC           ;white,blue
  62:				    ;ld a,0xF4           ;white,purple
  63: 3572+7	031D  3EF0    	    ld a,0xF0           ;white,black
  64: 3579+7	031F  0687    	    ld b, TmsColorReg
  65: 3586+17	0321  CD7D03  	    call vdp_reg_write  ; set color to fg:white bg:black
  66:				
  67:				
  68: 3603+10	0324  110000  	    ld de, 0            ; clear entire VRAM
  69: 3613+10	0327  010040  	    ld bc, 0x4000
  70: 3623+7	032A  3E00    	    ld a, 0
  71: 3630+17	032C  CD9E03  	    call vdp_tms_clear
  72:				
  73:				    ;setup adress color
  74: 3647+10	032F  010020  	    ld bc, TmsColorTableLoc ;color base addr
  75: 3657+4	0332  78      	    ld a,b          ;divide by 0x40 (so it fits in 1 byte)
  76: 3661+8	0333  CB11    	    rl c            
  77: 3669+4	0335  17      	    rla
  78: 3673+8	0336  CB11    	    rl c
  79: 3681+4	0338  17      	    rla
  80:				
  81: 3685+7	0339  0683    	    ld b, TmsColorTableReg
  82: 3692+17	033B  CD7D03  	    call vdp_reg_write
  83:				
  84:				    ;setup pattern addr
  85: 3709+10	033E  010000  	    ld bc, TmsPatternLoc
  86: 3719+4	0341  78      	    ld a,b
  87: 3723+4	0342  0F      	    rrca
  88: 3727+4	0343  0F      	    rrca
  89: 3731+4	0344  0F      	    rrca
  90:				
  91: 3735+7	0345  0684    	    ld b, TmsPatternReg
  92: 3742+17	0347  CD7D03  	    call vdp_reg_write
  93:				
  94:				    ;setup name table addr
  95: 3759+10	034A  010038  	    ld bc, TmsNameLoc
  96: 3769+4	034D  78      	    ld a,b
  97: 3773+4	034E  0F      	    rrca
  98: 3777+4	034F  0F      	    rrca
  99: 3781+7	0350  E60F    	    and 0x0F
 100: 3788+7	0352  0682    	    ld b, TmsNameReg
 101: 3795+17	0354  CD7D03  	    call vdp_reg_write
 102:				
 103:				    ;copy charset to video ram
 104:				    ;TmsFont is start symbol of charset
 105: 3812+10	0357  21BB03  	    ld hl,[TmsFont] ;HL contains start addr of font
 106: 3822+10	035A  010008  	    ld bc,TmsTextPatternLen
 107: 3832+10	035D  110000  	    ld de, TmsPatternLoc    ;setup start addr
 108: 3842+17	0360  CD8603  	    call vdp_setup_font
 109:				
 110:				    ;clear memory
 111: 3859+10	0363  110038  	    ld de, TmsNameLoc
 112: 3869+10	0366  01C03B  	    ld bc, TmsNameLoc+960
 113: 3879+17	0369  CD9E03  	    call vdp_tms_clear
 114:				
 115:				    ;set cursor to 0,0
 116: 3896+10	036C  010000  	    ld bc,0
 117: 3906+17	036F  CDB30B  	    call vdp_cursor_set
 118:				
 119:				    ;end of initialization
 120: 3923+7	0372  3ED0    	    ld a, 11010000b ; Set 16k memory and disable blank blank
 121: 3930+7	0374  0681    	    ld b,TmsCtrl1Reg
 122: 3937+17	0376  CD7D03  	    call vdp_reg_write  ; write to reg 1
 123:				
 124:				    ;set cursor position
 125: 3954+17	0379  CDBC0B  	    call vdp_cursor_move
 126:				
 127: 3971+10	037C  C9      	    ret
 128:				
 129:				
 130:				;Output operation to VDP register   
 131:				;A contians Data, B contains Regsiter ID
 132:     -	037D          	vdp_reg_write:
 133: 3981+11	037D  D381    	    out (VDP_REG), a    ;write data byte first
 134: 3992+4	037F  78      	    ld a, b          ;load reg address
 135: 3996+11	0380  D381    	    out (VDP_REG), a    ;write register select
 136: 4007+10	0382  C9      	    ret
 137:				
 138:     -	0383          	vdp_wait:
 139: 4017+4	0383  00      	    nop
 140: 4021+4	0384  00      	    nop
 141:				    ;nop
 142:				    ;nop
 143: 4025+10	0385  C9      	    ret
 144:				
 145:				;HL contianst start addr of font
 146:				;BC Length
 147:				;DE start location
 148:     -	0386          	vdp_setup_font:
 149:				    
 150: 4035+4	0386  7B      	    ld a,e      ;load lsb
 151: 4039+11	0387  D381    	    out (VDP_REG), a
 152: 4050+4	0389  7A      	    ld a,d      ;load msb
 153: 4054+7	038A  E63F    	    and 0x3F    ;mask
 154: 4061+7	038C  F640    	    or 0x40     ;set auto incerement bit
 155: 4068+11	038E  D381    	    out (VDP_REG), a
 156:     -	0390          	vdp_setup_font_loop:
 157: 4079+7	0390  7E      	    ld a,(hl)   ;load current byte
 158: 4086+6	0391  23      	    inc hl      ;incerment pointer
 159: 4092+6	0392  0B      	    dec bc      ;decrement counter
 160:				    ;ld a, 10001000b
 161: 4098+11	0393  D380    	    out (VDP_MEM),a
 162: 4109+17	0395  CD8303  	    call vdp_wait
 163:				
 164: 4126+4	0398  78      	    ld a,b  ;check if bc == 0
 165: 4130+4	0399  B1      	    or c
 166: 4134+10	039A  C29003  	    jp nz, vdp_setup_font_loop  ;if not 0 then loop
 167:				
 168: 4144+10	039D  C9      	    ret
 169:				    
 170:				;DE start addr, BC end addr
 171:     -	039E          	vdp_tms_clear:
 172:				    ;setup start addr
 173: 4154+11	039E  F5      	    push af
 174: 4165+4	039F  79      	    ld a,c      ;load lsb
 175: 4169+11	03A0  D381    	    out (VDP_REG), a
 176:				
 177: 4180+4	03A2  78      	    ld a,b      ;load msb
 178: 4184+7	03A3  E63F    	    and 0x3F    ;mask
 179: 4191+7	03A5  F640    	    or 0x40     ;set auto incerement bit
 180: 4198+11	03A7  D381    	    out (VDP_REG), a
 181:				
 182: 4209+10	03A9  F1      	    pop af
 183: 4219+11	03AA  E5      	    push hl
 184:				
 185:     -	03AB          	vdp_tms_clear_loop:
 186:				    ;write memory out
 187: 4230+4	03AB  AF      	    xor a
 188: 4234+11	03AC  D380    	    out (VDP_MEM), a
 189: 4245+17	03AE  CD8303  	    call vdp_wait
 190:				
 191: 4262+6	03B1  13      	    inc de      ;incerement counter
 192: 4268+4	03B2  60      	    ld h,b
 193: 4272+4	03B3  69      	    ld l,c
 194: 4276+15	03B4  ED52    	    sbc hl,de   ;check if reached maximum
 195: 4291+10	03B6  C2AB03  	    jp nz, vdp_tms_clear_loop   ;if not -> loop
 196:				    
 197: 4301+10	03B9  E1      	    pop hl      ;restore hl and exit sub
 198: 4311+10	03BA  C9      	    ret
 199:				
 200:				.include "tmsfont.s"
**** include/tmsfont.s ****
   1:				; 6x8 bitmap font by Oleg Kosenkov
   2:				; adapted for Z8C by Dennis Gunia
   3:				; Source: https://github.com/idispatch/raster-fonts/blob/master/font-6x8.c
   4:     -	03BB          	TmsFont:
   5:				
   6:     -	03BB  00      	    defb 00000000b
   7:     -	03BC  00      	    defb 00000000b
   8:     -	03BD  00      	    defb 00000000b
   9:     -	03BE  00      	    defb 00000000b
  10:     -	03BF  00      	    defb 00000000b
  11:     -	03C0  00      	    defb 00000000b
  12:     -	03C1  00      	    defb 00000000b
  13:     -	03C2  00      	    defb 00000000b
  14:				
  15:				    ; code=1, hex=0x01, ascii="^A"
  16:     -	03C3  38      	    defb 00111000b
  17:     -	03C4  44      	    defb 01000100b
  18:     -	03C5  6C      	    defb 01101100b
  19:     -	03C6  44      	    defb 01000100b
  20:     -	03C7  54      	    defb 01010100b
  21:     -	03C8  44      	    defb 01000100b
  22:     -	03C9  38      	    defb 00111000b
  23:     -	03CA  00      	    defb 00000000b
  24:				
  25:				    ; code=2, hex=0x02, ascii="^B"
  26:     -	03CB  38      	    defb 00111000b
  27:     -	03CC  7C      	    defb 01111100b
  28:     -	03CD  54      	    defb 01010100b
  29:     -	03CE  7C      	    defb 01111100b
  30:     -	03CF  44      	    defb 01000100b
  31:     -	03D0  7C      	    defb 01111100b
  32:     -	03D1  38      	    defb 00111000b
  33:     -	03D2  00      	    defb 00000000b
  34:				
  35:				    ; code=3, hex=0x03, ascii="^C"
  36:     -	03D3  00      	    defb 00000000b
  37:     -	03D4  28      	    defb 00101000b
  38:     -	03D5  7C      	    defb 01111100b
  39:     -	03D6  7C      	    defb 01111100b
  40:     -	03D7  7C      	    defb 01111100b
  41:     -	03D8  38      	    defb 00111000b
  42:     -	03D9  10      	    defb 00010000b
  43:     -	03DA  00      	    defb 00000000b
  44:				
  45:				    ; code=4, hex=0x04, ascii="^D"
  46:     -	03DB  00      	    defb 00000000b
  47:     -	03DC  10      	    defb 00010000b
  48:     -	03DD  38      	    defb 00111000b
  49:     -	03DE  7C      	    defb 01111100b
  50:     -	03DF  7C      	    defb 01111100b
  51:     -	03E0  38      	    defb 00111000b
  52:     -	03E1  10      	    defb 00010000b
  53:     -	03E2  00      	    defb 00000000b
  54:				
  55:				    ; code=5, hex=0x05, ascii="^E"
  56:     -	03E3  10      	    defb 00010000b
  57:     -	03E4  38      	    defb 00111000b
  58:     -	03E5  38      	    defb 00111000b
  59:     -	03E6  10      	    defb 00010000b
  60:     -	03E7  7C      	    defb 01111100b
  61:     -	03E8  7C      	    defb 01111100b
  62:     -	03E9  10      	    defb 00010000b
  63:     -	03EA  00      	    defb 00000000b
  64:				
  65:				    ; code=6, hex=0x06, ascii="^F"
  66:     -	03EB  00      	    defb 00000000b
  67:     -	03EC  10      	    defb 00010000b
  68:     -	03ED  38      	    defb 00111000b
  69:     -	03EE  7C      	    defb 01111100b
  70:     -	03EF  7C      	    defb 01111100b
  71:     -	03F0  10      	    defb 00010000b
  72:     -	03F1  38      	    defb 00111000b
  73:     -	03F2  00      	    defb 00000000b
  74:				
  75:				    ; code=7, hex=0x07, ascii="^G"
  76:     -	03F3  00      	    defb 00000000b
  77:     -	03F4  00      	    defb 00000000b
  78:     -	03F5  00      	    defb 00000000b
  79:     -	03F6  30      	    defb 00110000b
  80:     -	03F7  30      	    defb 00110000b
  81:     -	03F8  00      	    defb 00000000b
  82:     -	03F9  00      	    defb 00000000b
  83:     -	03FA  00      	    defb 00000000b
  84:				
  85:				    ; code=8, hex=0x08, ascii="^H"
  86:     -	03FB  FC      	    defb 11111100b
  87:     -	03FC  FC      	    defb 11111100b
  88:     -	03FD  FC      	    defb 11111100b
  89:     -	03FE  CC      	    defb 11001100b
  90:     -	03FF  CC      	    defb 11001100b
  91:     -	0400  FC      	    defb 11111100b
  92:     -	0401  FC      	    defb 11111100b
  93:     -	0402  FC      	    defb 11111100b
  94:				
  95:				    ; code=9, hex=0x09, ascii="^I"
  96:     -	0403  00      	    defb 00000000b
  97:     -	0404  00      	    defb 00000000b
  98:     -	0405  78      	    defb 01111000b
  99:     -	0406  48      	    defb 01001000b
 100:     -	0407  48      	    defb 01001000b
 101:     -	0408  78      	    defb 01111000b
 102:     -	0409  00      	    defb 00000000b
 103:     -	040A  00      	    defb 00000000b
 104:				
 105:				    ; code=10, hex=0x0A, ascii="^J"
 106:     -	040B  FC      	    defb 11111100b
 107:     -	040C  FC      	    defb 11111100b
 108:     -	040D  84      	    defb 10000100b
 109:     -	040E  B4      	    defb 10110100b
 110:     -	040F  B4      	    defb 10110100b
 111:     -	0410  84      	    defb 10000100b
 112:     -	0411  FC      	    defb 11111100b
 113:     -	0412  FC      	    defb 11111100b
 114:				
 115:				    ; code=11, hex=0x0B, ascii="^K"
 116:     -	0413  00      	    defb 00000000b
 117:     -	0414  1C      	    defb 00011100b
 118:     -	0415  0C      	    defb 00001100b
 119:     -	0416  34      	    defb 00110100b
 120:     -	0417  48      	    defb 01001000b
 121:     -	0418  48      	    defb 01001000b
 122:     -	0419  30      	    defb 00110000b
 123:     -	041A  00      	    defb 00000000b
 124:				
 125:				    ; code=12, hex=0x0C, ascii="^L"
 126:     -	041B  38      	    defb 00111000b
 127:     -	041C  44      	    defb 01000100b
 128:     -	041D  44      	    defb 01000100b
 129:     -	041E  38      	    defb 00111000b
 130:     -	041F  10      	    defb 00010000b
 131:     -	0420  38      	    defb 00111000b
 132:     -	0421  10      	    defb 00010000b
 133:     -	0422  00      	    defb 00000000b
 134:				
 135:				    ; code=13, hex=0x0D, ascii="^M"
 136:     -	0423  10      	    defb 00010000b
 137:     -	0424  18      	    defb 00011000b
 138:     -	0425  14      	    defb 00010100b
 139:     -	0426  10      	    defb 00010000b
 140:     -	0427  30      	    defb 00110000b
 141:     -	0428  70      	    defb 01110000b
 142:     -	0429  60      	    defb 01100000b
 143:     -	042A  00      	    defb 00000000b
 144:				
 145:				    ; code=14, hex=0x0E, ascii="^N"
 146:     -	042B  0C      	    defb 00001100b
 147:     -	042C  34      	    defb 00110100b
 148:     -	042D  2C      	    defb 00101100b
 149:     -	042E  34      	    defb 00110100b
 150:     -	042F  2C      	    defb 00101100b
 151:     -	0430  6C      	    defb 01101100b
 152:     -	0431  60      	    defb 01100000b
 153:     -	0432  00      	    defb 00000000b
 154:				
 155:				    ; code=15, hex=0x0F, ascii="^O"
 156:     -	0433  00      	    defb 00000000b
 157:     -	0434  54      	    defb 01010100b
 158:     -	0435  38      	    defb 00111000b
 159:     -	0436  6C      	    defb 01101100b
 160:     -	0437  38      	    defb 00111000b
 161:     -	0438  54      	    defb 01010100b
 162:     -	0439  00      	    defb 00000000b
 163:     -	043A  00      	    defb 00000000b
 164:				
 165:				    ; code=16, hex=0x10, ascii="^P"
 166:     -	043B  20      	    defb 00100000b
 167:     -	043C  30      	    defb 00110000b
 168:     -	043D  38      	    defb 00111000b
 169:     -	043E  3C      	    defb 00111100b
 170:     -	043F  38      	    defb 00111000b
 171:     -	0440  30      	    defb 00110000b
 172:     -	0441  20      	    defb 00100000b
 173:     -	0442  00      	    defb 00000000b
 174:				
 175:				    ; code=17, hex=0x11, ascii="^Q"
 176:     -	0443  08      	    defb 00001000b
 177:     -	0444  18      	    defb 00011000b
 178:     -	0445  38      	    defb 00111000b
 179:     -	0446  78      	    defb 01111000b
 180:     -	0447  38      	    defb 00111000b
 181:     -	0448  18      	    defb 00011000b
 182:     -	0449  08      	    defb 00001000b
 183:     -	044A  00      	    defb 00000000b
 184:				
 185:				    ; code=18, hex=0x12, ascii="^R"
 186:     -	044B  10      	    defb 00010000b
 187:     -	044C  38      	    defb 00111000b
 188:     -	044D  7C      	    defb 01111100b
 189:     -	044E  10      	    defb 00010000b
 190:     -	044F  7C      	    defb 01111100b
 191:     -	0450  38      	    defb 00111000b
 192:     -	0451  10      	    defb 00010000b
 193:     -	0452  00      	    defb 00000000b
 194:				
 195:				    ; code=19, hex=0x13, ascii="^S"
 196:     -	0453  28      	    defb 00101000b
 197:     -	0454  28      	    defb 00101000b
 198:     -	0455  28      	    defb 00101000b
 199:     -	0456  28      	    defb 00101000b
 200:     -	0457  28      	    defb 00101000b
 201:     -	0458  00      	    defb 00000000b
 202:     -	0459  28      	    defb 00101000b
 203:     -	045A  00      	    defb 00000000b
 204:				
 205:				    ; code=20, hex=0x14, ascii="^T"
 206:     -	045B  3C      	    defb 00111100b
 207:     -	045C  54      	    defb 01010100b
 208:     -	045D  54      	    defb 01010100b
 209:     -	045E  34      	    defb 00110100b
 210:     -	045F  14      	    defb 00010100b
 211:     -	0460  14      	    defb 00010100b
 212:     -	0461  14      	    defb 00010100b
 213:     -	0462  00      	    defb 00000000b
 214:				
 215:				    ; code=21, hex=0x15, ascii="^U"
 216:     -	0463  38      	    defb 00111000b
 217:     -	0464  44      	    defb 01000100b
 218:     -	0465  30      	    defb 00110000b
 219:     -	0466  28      	    defb 00101000b
 220:     -	0467  18      	    defb 00011000b
 221:     -	0468  44      	    defb 01000100b
 222:     -	0469  38      	    defb 00111000b
 223:     -	046A  00      	    defb 00000000b
 224:				
 225:				    ; code=22, hex=0x16, ascii="^V"
 226:     -	046B  00      	    defb 00000000b
 227:     -	046C  00      	    defb 00000000b
 228:     -	046D  00      	    defb 00000000b
 229:     -	046E  00      	    defb 00000000b
 230:     -	046F  00      	    defb 00000000b
 231:     -	0470  78      	    defb 01111000b
 232:     -	0471  78      	    defb 01111000b
 233:     -	0472  00      	    defb 00000000b
 234:				
 235:				    ; code=23, hex=0x17, ascii="^W"
 236:     -	0473  10      	    defb 00010000b
 237:     -	0474  38      	    defb 00111000b
 238:     -	0475  7C      	    defb 01111100b
 239:     -	0476  10      	    defb 00010000b
 240:     -	0477  7C      	    defb 01111100b
 241:     -	0478  38      	    defb 00111000b
 242:     -	0479  10      	    defb 00010000b
 243:     -	047A  38      	    defb 00111000b
 244:				
 245:				    ; code=24, hex=0x18, ascii="^X"
 246:     -	047B  10      	    defb 00010000b
 247:     -	047C  38      	    defb 00111000b
 248:     -	047D  7C      	    defb 01111100b
 249:     -	047E  10      	    defb 00010000b
 250:     -	047F  10      	    defb 00010000b
 251:     -	0480  10      	    defb 00010000b
 252:     -	0481  10      	    defb 00010000b
 253:     -	0482  00      	    defb 00000000b
 254:				
 255:				    ; code=25, hex=0x19, ascii="^Y"
 256:     -	0483  10      	    defb 00010000b
 257:     -	0484  10      	    defb 00010000b
 258:     -	0485  10      	    defb 00010000b
 259:     -	0486  10      	    defb 00010000b
 260:     -	0487  7C      	    defb 01111100b
 261:     -	0488  38      	    defb 00111000b
 262:     -	0489  10      	    defb 00010000b
 263:     -	048A  00      	    defb 00000000b
 264:				
 265:				    ; code=26, hex=0x1A, ascii="^Z"
 266:     -	048B  00      	    defb 00000000b
 267:     -	048C  10      	    defb 00010000b
 268:     -	048D  18      	    defb 00011000b
 269:     -	048E  7C      	    defb 01111100b
 270:     -	048F  18      	    defb 00011000b
 271:     -	0490  10      	    defb 00010000b
 272:     -	0491  00      	    defb 00000000b
 273:     -	0492  00      	    defb 00000000b
 274:				
 275:				    ; code=27, hex=0x1B, ascii="^["
 276:     -	0493  00      	    defb 00000000b
 277:     -	0494  10      	    defb 00010000b
 278:     -	0495  30      	    defb 00110000b
 279:     -	0496  7C      	    defb 01111100b
 280:     -	0497  30      	    defb 00110000b
 281:     -	0498  10      	    defb 00010000b
 282:     -	0499  00      	    defb 00000000b
 283:     -	049A  00      	    defb 00000000b
 284:				
 285:				    ; code=28, hex=0x1C, ascii="^\"
 286:     -	049B  00      	    defb 00000000b
 287:     -	049C  00      	    defb 00000000b
 288:     -	049D  00      	    defb 00000000b
 289:     -	049E  40      	    defb 01000000b
 290:     -	049F  40      	    defb 01000000b
 291:     -	04A0  40      	    defb 01000000b
 292:     -	04A1  7C      	    defb 01111100b
 293:     -	04A2  00      	    defb 00000000b
 294:				
 295:				    ; code=29, hex=0x1D, ascii="^]"
 296:     -	04A3  00      	    defb 00000000b
 297:     -	04A4  28      	    defb 00101000b
 298:     -	04A5  28      	    defb 00101000b
 299:     -	04A6  7C      	    defb 01111100b
 300:     -	04A7  28      	    defb 00101000b
 301:     -	04A8  28      	    defb 00101000b
 302:     -	04A9  00      	    defb 00000000b
 303:     -	04AA  00      	    defb 00000000b
 304:				
 305:				    ; code=30, hex=0x1E, ascii="^^"
 306:     -	04AB  10      	    defb 00010000b
 307:     -	04AC  10      	    defb 00010000b
 308:     -	04AD  38      	    defb 00111000b
 309:     -	04AE  38      	    defb 00111000b
 310:     -	04AF  7C      	    defb 01111100b
 311:     -	04B0  7C      	    defb 01111100b
 312:     -	04B1  00      	    defb 00000000b
 313:     -	04B2  00      	    defb 00000000b
 314:				
 315:				    ; code=31, hex=0x1F, ascii="^_"
 316:     -	04B3  7C      	    defb 01111100b
 317:     -	04B4  7C      	    defb 01111100b
 318:     -	04B5  38      	    defb 00111000b
 319:     -	04B6  38      	    defb 00111000b
 320:     -	04B7  10      	    defb 00010000b
 321:     -	04B8  10      	    defb 00010000b
 322:     -	04B9  00      	    defb 00000000b
 323:     -	04BA  00      	    defb 00000000b
 324:				
 325:				    ; code=32, hex=0x20, ascii=" "
 326:     -	04BB  00      	    defb 00000000b
 327:     -	04BC  00      	    defb 00000000b
 328:     -	04BD  00      	    defb 00000000b
 329:     -	04BE  00      	    defb 00000000b
 330:     -	04BF  00      	    defb 00000000b
 331:     -	04C0  00      	    defb 00000000b
 332:     -	04C1  00      	    defb 00000000b
 333:     -	04C2  00      	    defb 00000000b
 334:				
 335:				    ; code=33, hex=0x21, ascii="!"
 336:     -	04C3  10      	    defb 00010000b
 337:     -	04C4  38      	    defb 00111000b
 338:     -	04C5  38      	    defb 00111000b
 339:     -	04C6  10      	    defb 00010000b
 340:     -	04C7  10      	    defb 00010000b
 341:     -	04C8  00      	    defb 00000000b
 342:     -	04C9  10      	    defb 00010000b
 343:     -	04CA  00      	    defb 00000000b
 344:				
 345:				    ; code=34, hex=0x22, ascii="""
 346:     -	04CB  6C      	    defb 01101100b
 347:     -	04CC  6C      	    defb 01101100b
 348:     -	04CD  48      	    defb 01001000b
 349:     -	04CE  00      	    defb 00000000b
 350:     -	04CF  00      	    defb 00000000b
 351:     -	04D0  00      	    defb 00000000b
 352:     -	04D1  00      	    defb 00000000b
 353:     -	04D2  00      	    defb 00000000b
 354:				
 355:				    ; code=35, hex=0x23, ascii="#"
 356:     -	04D3  00      	    defb 00000000b
 357:     -	04D4  28      	    defb 00101000b
 358:     -	04D5  7C      	    defb 01111100b
 359:     -	04D6  28      	    defb 00101000b
 360:     -	04D7  28      	    defb 00101000b
 361:     -	04D8  7C      	    defb 01111100b
 362:     -	04D9  28      	    defb 00101000b
 363:     -	04DA  00      	    defb 00000000b
 364:				
 365:				    ; code=36, hex=0x24, ascii="$"
 366:     -	04DB  20      	    defb 00100000b
 367:     -	04DC  38      	    defb 00111000b
 368:     -	04DD  40      	    defb 01000000b
 369:     -	04DE  30      	    defb 00110000b
 370:     -	04DF  08      	    defb 00001000b
 371:     -	04E0  70      	    defb 01110000b
 372:     -	04E1  10      	    defb 00010000b
 373:     -	04E2  00      	    defb 00000000b
 374:				
 375:				    ; code=37, hex=0x25, ascii=""
 376:     -	04E3  64      	    defb 01100100b
 377:     -	04E4  64      	    defb 01100100b
 378:     -	04E5  08      	    defb 00001000b
 379:     -	04E6  10      	    defb 00010000b
 380:     -	04E7  20      	    defb 00100000b
 381:     -	04E8  4C      	    defb 01001100b
 382:     -	04E9  4C      	    defb 01001100b
 383:     -	04EA  00      	    defb 00000000b
 384:				
 385:				    ; code=38, hex=0x26, ascii="&"
 386:     -	04EB  20      	    defb 00100000b
 387:     -	04EC  50      	    defb 01010000b
 388:     -	04ED  50      	    defb 01010000b
 389:     -	04EE  20      	    defb 00100000b
 390:     -	04EF  54      	    defb 01010100b
 391:     -	04F0  48      	    defb 01001000b
 392:     -	04F1  34      	    defb 00110100b
 393:     -	04F2  00      	    defb 00000000b
 394:				
 395:				    ; code=39, hex=0x27, ascii="'"
 396:     -	04F3  30      	    defb 00110000b
 397:     -	04F4  30      	    defb 00110000b
 398:     -	04F5  20      	    defb 00100000b
 399:     -	04F6  00      	    defb 00000000b
 400:     -	04F7  00      	    defb 00000000b
 401:     -	04F8  00      	    defb 00000000b
 402:     -	04F9  00      	    defb 00000000b
 403:     -	04FA  00      	    defb 00000000b
 404:				
 405:				    ; code=40, hex=0x28, ascii="("
 406:     -	04FB  10      	    defb 00010000b
 407:     -	04FC  20      	    defb 00100000b
 408:     -	04FD  20      	    defb 00100000b
 409:     -	04FE  20      	    defb 00100000b
 410:     -	04FF  20      	    defb 00100000b
 411:     -	0500  20      	    defb 00100000b
 412:     -	0501  10      	    defb 00010000b
 413:     -	0502  00      	    defb 00000000b
 414:				
 415:				    ; code=41, hex=0x29, ascii=")"
 416:     -	0503  20      	    defb 00100000b
 417:     -	0504  10      	    defb 00010000b
 418:     -	0505  10      	    defb 00010000b
 419:     -	0506  10      	    defb 00010000b
 420:     -	0507  10      	    defb 00010000b
 421:     -	0508  10      	    defb 00010000b
 422:     -	0509  20      	    defb 00100000b
 423:     -	050A  00      	    defb 00000000b
 424:				
 425:				    ; code=42, hex=0x2A, ascii="*"
 426:     -	050B  00      	    defb 00000000b
 427:     -	050C  28      	    defb 00101000b
 428:     -	050D  38      	    defb 00111000b
 429:     -	050E  7C      	    defb 01111100b
 430:     -	050F  38      	    defb 00111000b
 431:     -	0510  28      	    defb 00101000b
 432:     -	0511  00      	    defb 00000000b
 433:     -	0512  00      	    defb 00000000b
 434:				
 435:				    ; code=43, hex=0x2B, ascii="+"
 436:     -	0513  00      	    defb 00000000b
 437:     -	0514  10      	    defb 00010000b
 438:     -	0515  10      	    defb 00010000b
 439:     -	0516  7C      	    defb 01111100b
 440:     -	0517  10      	    defb 00010000b
 441:     -	0518  10      	    defb 00010000b
 442:     -	0519  00      	    defb 00000000b
 443:     -	051A  00      	    defb 00000000b
 444:				
 445:				    ; code=44, hex=0x2C, ascii=","
 446:     -	051B  00      	    defb 00000000b
 447:     -	051C  00      	    defb 00000000b
 448:     -	051D  00      	    defb 00000000b
 449:     -	051E  00      	    defb 00000000b
 450:     -	051F  00      	    defb 00000000b
 451:     -	0520  30      	    defb 00110000b
 452:     -	0521  30      	    defb 00110000b
 453:     -	0522  20      	    defb 00100000b
 454:				
 455:				    ; code=45, hex=0x2D, ascii="-"
 456:     -	0523  00      	    defb 00000000b
 457:     -	0524  00      	    defb 00000000b
 458:     -	0525  00      	    defb 00000000b
 459:     -	0526  7C      	    defb 01111100b
 460:     -	0527  00      	    defb 00000000b
 461:     -	0528  00      	    defb 00000000b
 462:     -	0529  00      	    defb 00000000b
 463:     -	052A  00      	    defb 00000000b
 464:				
 465:				    ; code=46, hex=0x2E, ascii="."
 466:     -	052B  00      	    defb 00000000b
 467:     -	052C  00      	    defb 00000000b
 468:     -	052D  00      	    defb 00000000b
 469:     -	052E  00      	    defb 00000000b
 470:     -	052F  00      	    defb 00000000b
 471:     -	0530  30      	    defb 00110000b
 472:     -	0531  30      	    defb 00110000b
 473:     -	0532  00      	    defb 00000000b
 474:				
 475:				    ; code=47, hex=0x2F, ascii="/"
 476:     -	0533  00      	    defb 00000000b
 477:     -	0534  04      	    defb 00000100b
 478:     -	0535  08      	    defb 00001000b
 479:     -	0536  10      	    defb 00010000b
 480:     -	0537  20      	    defb 00100000b
 481:     -	0538  40      	    defb 01000000b
 482:     -	0539  00      	    defb 00000000b
 483:     -	053A  00      	    defb 00000000b
 484:				
 485:				    ; code=48, hex=0x30, ascii="0"
 486:     -	053B  38      	    defb 00111000b
 487:     -	053C  44      	    defb 01000100b
 488:     -	053D  4C      	    defb 01001100b
 489:     -	053E  54      	    defb 01010100b
 490:     -	053F  64      	    defb 01100100b
 491:     -	0540  44      	    defb 01000100b
 492:     -	0541  38      	    defb 00111000b
 493:     -	0542  00      	    defb 00000000b
 494:				
 495:				    ; code=49, hex=0x31, ascii="1"
 496:     -	0543  10      	    defb 00010000b
 497:     -	0544  30      	    defb 00110000b
 498:     -	0545  10      	    defb 00010000b
 499:     -	0546  10      	    defb 00010000b
 500:     -	0547  10      	    defb 00010000b
 501:     -	0548  10      	    defb 00010000b
 502:     -	0549  38      	    defb 00111000b
 503:     -	054A  00      	    defb 00000000b
 504:				
 505:				    ; code=50, hex=0x32, ascii="2"
 506:     -	054B  38      	    defb 00111000b
 507:     -	054C  44      	    defb 01000100b
 508:     -	054D  04      	    defb 00000100b
 509:     -	054E  18      	    defb 00011000b
 510:     -	054F  20      	    defb 00100000b
 511:     -	0550  40      	    defb 01000000b
 512:     -	0551  7C      	    defb 01111100b
 513:     -	0552  00      	    defb 00000000b
 514:				
 515:				    ; code=51, hex=0x33, ascii="3"
 516:     -	0553  38      	    defb 00111000b
 517:     -	0554  44      	    defb 01000100b
 518:     -	0555  04      	    defb 00000100b
 519:     -	0556  38      	    defb 00111000b
 520:     -	0557  04      	    defb 00000100b
 521:     -	0558  44      	    defb 01000100b
 522:     -	0559  38      	    defb 00111000b
 523:     -	055A  00      	    defb 00000000b
 524:				
 525:				    ; code=52, hex=0x34, ascii="4"
 526:     -	055B  08      	    defb 00001000b
 527:     -	055C  18      	    defb 00011000b
 528:     -	055D  28      	    defb 00101000b
 529:     -	055E  48      	    defb 01001000b
 530:     -	055F  7C      	    defb 01111100b
 531:     -	0560  08      	    defb 00001000b
 532:     -	0561  08      	    defb 00001000b
 533:     -	0562  00      	    defb 00000000b
 534:				
 535:				    ; code=53, hex=0x35, ascii="5"
 536:     -	0563  7C      	    defb 01111100b
 537:     -	0564  40      	    defb 01000000b
 538:     -	0565  40      	    defb 01000000b
 539:     -	0566  78      	    defb 01111000b
 540:     -	0567  04      	    defb 00000100b
 541:     -	0568  44      	    defb 01000100b
 542:     -	0569  38      	    defb 00111000b
 543:     -	056A  00      	    defb 00000000b
 544:				
 545:				    ; code=54, hex=0x36, ascii="6"
 546:     -	056B  18      	    defb 00011000b
 547:     -	056C  20      	    defb 00100000b
 548:     -	056D  40      	    defb 01000000b
 549:     -	056E  78      	    defb 01111000b
 550:     -	056F  44      	    defb 01000100b
 551:     -	0570  44      	    defb 01000100b
 552:     -	0571  38      	    defb 00111000b
 553:     -	0572  00      	    defb 00000000b
 554:				
 555:				    ; code=55, hex=0x37, ascii="7"
 556:     -	0573  7C      	    defb 01111100b
 557:     -	0574  04      	    defb 00000100b
 558:     -	0575  08      	    defb 00001000b
 559:     -	0576  10      	    defb 00010000b
 560:     -	0577  20      	    defb 00100000b
 561:     -	0578  20      	    defb 00100000b
 562:     -	0579  20      	    defb 00100000b
 563:     -	057A  00      	    defb 00000000b
 564:				
 565:				    ; code=56, hex=0x38, ascii="8"
 566:     -	057B  38      	    defb 00111000b
 567:     -	057C  44      	    defb 01000100b
 568:     -	057D  44      	    defb 01000100b
 569:     -	057E  38      	    defb 00111000b
 570:     -	057F  44      	    defb 01000100b
 571:     -	0580  44      	    defb 01000100b
 572:     -	0581  38      	    defb 00111000b
 573:     -	0582  00      	    defb 00000000b
 574:				
 575:				    ; code=57, hex=0x39, ascii="9"
 576:     -	0583  38      	    defb 00111000b
 577:     -	0584  44      	    defb 01000100b
 578:     -	0585  44      	    defb 01000100b
 579:     -	0586  3C      	    defb 00111100b
 580:     -	0587  04      	    defb 00000100b
 581:     -	0588  08      	    defb 00001000b
 582:     -	0589  30      	    defb 00110000b
 583:     -	058A  00      	    defb 00000000b
 584:				
 585:				    ; code=58, hex=0x3A, ascii=":"
 586:     -	058B  00      	    defb 00000000b
 587:     -	058C  00      	    defb 00000000b
 588:     -	058D  30      	    defb 00110000b
 589:     -	058E  30      	    defb 00110000b
 590:     -	058F  00      	    defb 00000000b
 591:     -	0590  30      	    defb 00110000b
 592:     -	0591  30      	    defb 00110000b
 593:     -	0592  00      	    defb 00000000b
 594:				
 595:				    ; code=59, hex=0x3B, ascii=";"
 596:     -	0593  00      	    defb 00000000b
 597:     -	0594  00      	    defb 00000000b
 598:     -	0595  30      	    defb 00110000b
 599:     -	0596  30      	    defb 00110000b
 600:     -	0597  00      	    defb 00000000b
 601:     -	0598  30      	    defb 00110000b
 602:     -	0599  30      	    defb 00110000b
 603:     -	059A  20      	    defb 00100000b
 604:				
 605:				    ; code=60, hex=0x3C, ascii="<"
 606:     -	059B  08      	    defb 00001000b
 607:     -	059C  10      	    defb 00010000b
 608:     -	059D  20      	    defb 00100000b
 609:     -	059E  40      	    defb 01000000b
 610:     -	059F  20      	    defb 00100000b
 611:     -	05A0  10      	    defb 00010000b
 612:     -	05A1  08      	    defb 00001000b
 613:     -	05A2  00      	    defb 00000000b
 614:				
 615:				    ; code=61, hex=0x3D, ascii="="
 616:     -	05A3  00      	    defb 00000000b
 617:     -	05A4  00      	    defb 00000000b
 618:     -	05A5  7C      	    defb 01111100b
 619:     -	05A6  00      	    defb 00000000b
 620:     -	05A7  00      	    defb 00000000b
 621:     -	05A8  7C      	    defb 01111100b
 622:     -	05A9  00      	    defb 00000000b
 623:     -	05AA  00      	    defb 00000000b
 624:				
 625:				    ; code=62, hex=0x3E, ascii=">"
 626:     -	05AB  20      	    defb 00100000b
 627:     -	05AC  10      	    defb 00010000b
 628:     -	05AD  08      	    defb 00001000b
 629:     -	05AE  04      	    defb 00000100b
 630:     -	05AF  08      	    defb 00001000b
 631:     -	05B0  10      	    defb 00010000b
 632:     -	05B1  20      	    defb 00100000b
 633:     -	05B2  00      	    defb 00000000b
 634:				
 635:				    ; code=63, hex=0x3F, ascii="?"
 636:     -	05B3  38      	    defb 00111000b
 637:     -	05B4  44      	    defb 01000100b
 638:     -	05B5  04      	    defb 00000100b
 639:     -	05B6  18      	    defb 00011000b
 640:     -	05B7  10      	    defb 00010000b
 641:     -	05B8  00      	    defb 00000000b
 642:     -	05B9  10      	    defb 00010000b
 643:     -	05BA  00      	    defb 00000000b
 644:				
 645:				    ; code=64, hex=0x40, ascii="@"
 646:     -	05BB  38      	    defb 00111000b
 647:     -	05BC  44      	    defb 01000100b
 648:     -	05BD  5C      	    defb 01011100b
 649:     -	05BE  54      	    defb 01010100b
 650:     -	05BF  5C      	    defb 01011100b
 651:     -	05C0  40      	    defb 01000000b
 652:     -	05C1  38      	    defb 00111000b
 653:     -	05C2  00      	    defb 00000000b
 654:				
 655:				    ; code=65, hex=0x41, ascii="A"
 656:     -	05C3  38      	    defb 00111000b
 657:     -	05C4  44      	    defb 01000100b
 658:     -	05C5  44      	    defb 01000100b
 659:     -	05C6  44      	    defb 01000100b
 660:     -	05C7  7C      	    defb 01111100b
 661:     -	05C8  44      	    defb 01000100b
 662:     -	05C9  44      	    defb 01000100b
 663:     -	05CA  00      	    defb 00000000b
 664:				
 665:				    ; code=66, hex=0x42, ascii="B"
 666:     -	05CB  78      	    defb 01111000b
 667:     -	05CC  44      	    defb 01000100b
 668:     -	05CD  44      	    defb 01000100b
 669:     -	05CE  78      	    defb 01111000b
 670:     -	05CF  44      	    defb 01000100b
 671:     -	05D0  44      	    defb 01000100b
 672:     -	05D1  78      	    defb 01111000b
 673:     -	05D2  00      	    defb 00000000b
 674:				
 675:				    ; code=67, hex=0x43, ascii="C"
 676:     -	05D3  38      	    defb 00111000b
 677:     -	05D4  44      	    defb 01000100b
 678:     -	05D5  40      	    defb 01000000b
 679:     -	05D6  40      	    defb 01000000b
 680:     -	05D7  40      	    defb 01000000b
 681:     -	05D8  44      	    defb 01000100b
 682:     -	05D9  38      	    defb 00111000b
 683:     -	05DA  00      	    defb 00000000b
 684:				
 685:				    ; code=68, hex=0x44, ascii="D"
 686:     -	05DB  78      	    defb 01111000b
 687:     -	05DC  44      	    defb 01000100b
 688:     -	05DD  44      	    defb 01000100b
 689:     -	05DE  44      	    defb 01000100b
 690:     -	05DF  44      	    defb 01000100b
 691:     -	05E0  44      	    defb 01000100b
 692:     -	05E1  78      	    defb 01111000b
 693:     -	05E2  00      	    defb 00000000b
 694:				
 695:				    ; code=69, hex=0x45, ascii="E"
 696:     -	05E3  7C      	    defb 01111100b
 697:     -	05E4  40      	    defb 01000000b
 698:     -	05E5  40      	    defb 01000000b
 699:     -	05E6  78      	    defb 01111000b
 700:     -	05E7  40      	    defb 01000000b
 701:     -	05E8  40      	    defb 01000000b
 702:     -	05E9  7C      	    defb 01111100b
 703:     -	05EA  00      	    defb 00000000b
 704:				
 705:				    ; code=70, hex=0x46, ascii="F"
 706:     -	05EB  7C      	    defb 01111100b
 707:     -	05EC  40      	    defb 01000000b
 708:     -	05ED  40      	    defb 01000000b
 709:     -	05EE  78      	    defb 01111000b
 710:     -	05EF  40      	    defb 01000000b
 711:     -	05F0  40      	    defb 01000000b
 712:     -	05F1  40      	    defb 01000000b
 713:     -	05F2  00      	    defb 00000000b
 714:				
 715:				    ; code=71, hex=0x47, ascii="G"
 716:     -	05F3  38      	    defb 00111000b
 717:     -	05F4  44      	    defb 01000100b
 718:     -	05F5  40      	    defb 01000000b
 719:     -	05F6  5C      	    defb 01011100b
 720:     -	05F7  44      	    defb 01000100b
 721:     -	05F8  44      	    defb 01000100b
 722:     -	05F9  3C      	    defb 00111100b
 723:     -	05FA  00      	    defb 00000000b
 724:				
 725:				    ; code=72, hex=0x48, ascii="H"
 726:     -	05FB  44      	    defb 01000100b
 727:     -	05FC  44      	    defb 01000100b
 728:     -	05FD  44      	    defb 01000100b
 729:     -	05FE  7C      	    defb 01111100b
 730:     -	05FF  44      	    defb 01000100b
 731:     -	0600  44      	    defb 01000100b
 732:     -	0601  44      	    defb 01000100b
 733:     -	0602  00      	    defb 00000000b
 734:				
 735:				    ; code=73, hex=0x49, ascii="I"
 736:     -	0603  38      	    defb 00111000b
 737:     -	0604  10      	    defb 00010000b
 738:     -	0605  10      	    defb 00010000b
 739:     -	0606  10      	    defb 00010000b
 740:     -	0607  10      	    defb 00010000b
 741:     -	0608  10      	    defb 00010000b
 742:     -	0609  38      	    defb 00111000b
 743:     -	060A  00      	    defb 00000000b
 744:				
 745:				    ; code=74, hex=0x4A, ascii="J"
 746:     -	060B  04      	    defb 00000100b
 747:     -	060C  04      	    defb 00000100b
 748:     -	060D  04      	    defb 00000100b
 749:     -	060E  04      	    defb 00000100b
 750:     -	060F  44      	    defb 01000100b
 751:     -	0610  44      	    defb 01000100b
 752:     -	0611  38      	    defb 00111000b
 753:     -	0612  00      	    defb 00000000b
 754:				
 755:				    ; code=75, hex=0x4B, ascii="K"
 756:     -	0613  44      	    defb 01000100b
 757:     -	0614  48      	    defb 01001000b
 758:     -	0615  50      	    defb 01010000b
 759:     -	0616  60      	    defb 01100000b
 760:     -	0617  50      	    defb 01010000b
 761:     -	0618  48      	    defb 01001000b
 762:     -	0619  44      	    defb 01000100b
 763:     -	061A  00      	    defb 00000000b
 764:				
 765:				    ; code=76, hex=0x4C, ascii="L"
 766:     -	061B  40      	    defb 01000000b
 767:     -	061C  40      	    defb 01000000b
 768:     -	061D  40      	    defb 01000000b
 769:     -	061E  40      	    defb 01000000b
 770:     -	061F  40      	    defb 01000000b
 771:     -	0620  40      	    defb 01000000b
 772:     -	0621  7C      	    defb 01111100b
 773:     -	0622  00      	    defb 00000000b
 774:				
 775:				    ; code=77, hex=0x4D, ascii="M"
 776:     -	0623  44      	    defb 01000100b
 777:     -	0624  6C      	    defb 01101100b
 778:     -	0625  54      	    defb 01010100b
 779:     -	0626  44      	    defb 01000100b
 780:     -	0627  44      	    defb 01000100b
 781:     -	0628  44      	    defb 01000100b
 782:     -	0629  44      	    defb 01000100b
 783:     -	062A  00      	    defb 00000000b
 784:				
 785:				    ; code=78, hex=0x4E, ascii="N"
 786:     -	062B  44      	    defb 01000100b
 787:     -	062C  64      	    defb 01100100b
 788:     -	062D  54      	    defb 01010100b
 789:     -	062E  4C      	    defb 01001100b
 790:     -	062F  44      	    defb 01000100b
 791:     -	0630  44      	    defb 01000100b
 792:     -	0631  44      	    defb 01000100b
 793:     -	0632  00      	    defb 00000000b
 794:				
 795:				    ; code=79, hex=0x4F, ascii="O"
 796:     -	0633  38      	    defb 00111000b
 797:     -	0634  44      	    defb 01000100b
 798:     -	0635  44      	    defb 01000100b
 799:     -	0636  44      	    defb 01000100b
 800:     -	0637  44      	    defb 01000100b
 801:     -	0638  44      	    defb 01000100b
 802:     -	0639  38      	    defb 00111000b
 803:     -	063A  00      	    defb 00000000b
 804:				
 805:				    ; code=80, hex=0x50, ascii="P"
 806:     -	063B  78      	    defb 01111000b
 807:     -	063C  44      	    defb 01000100b
 808:     -	063D  44      	    defb 01000100b
 809:     -	063E  78      	    defb 01111000b
 810:     -	063F  40      	    defb 01000000b
 811:     -	0640  40      	    defb 01000000b
 812:     -	0641  40      	    defb 01000000b
 813:     -	0642  00      	    defb 00000000b
 814:				
 815:				    ; code=81, hex=0x51, ascii="Q"
 816:     -	0643  38      	    defb 00111000b
 817:     -	0644  44      	    defb 01000100b
 818:     -	0645  44      	    defb 01000100b
 819:     -	0646  44      	    defb 01000100b
 820:     -	0647  54      	    defb 01010100b
 821:     -	0648  48      	    defb 01001000b
 822:     -	0649  34      	    defb 00110100b
 823:     -	064A  00      	    defb 00000000b
 824:				
 825:				    ; code=82, hex=0x52, ascii="R"
 826:     -	064B  78      	    defb 01111000b
 827:     -	064C  44      	    defb 01000100b
 828:     -	064D  44      	    defb 01000100b
 829:     -	064E  78      	    defb 01111000b
 830:     -	064F  48      	    defb 01001000b
 831:     -	0650  44      	    defb 01000100b
 832:     -	0651  44      	    defb 01000100b
 833:     -	0652  00      	    defb 00000000b
 834:				
 835:				    ; code=83, hex=0x53, ascii="S"
 836:     -	0653  38      	    defb 00111000b
 837:     -	0654  44      	    defb 01000100b
 838:     -	0655  40      	    defb 01000000b
 839:     -	0656  38      	    defb 00111000b
 840:     -	0657  04      	    defb 00000100b
 841:     -	0658  44      	    defb 01000100b
 842:     -	0659  38      	    defb 00111000b
 843:     -	065A  00      	    defb 00000000b
 844:				
 845:				    ; code=84, hex=0x54, ascii="T"
 846:     -	065B  7C      	    defb 01111100b
 847:     -	065C  10      	    defb 00010000b
 848:     -	065D  10      	    defb 00010000b
 849:     -	065E  10      	    defb 00010000b
 850:     -	065F  10      	    defb 00010000b
 851:     -	0660  10      	    defb 00010000b
 852:     -	0661  10      	    defb 00010000b
 853:     -	0662  00      	    defb 00000000b
 854:				
 855:				    ; code=85, hex=0x55, ascii="U"
 856:     -	0663  44      	    defb 01000100b
 857:     -	0664  44      	    defb 01000100b
 858:     -	0665  44      	    defb 01000100b
 859:     -	0666  44      	    defb 01000100b
 860:     -	0667  44      	    defb 01000100b
 861:     -	0668  44      	    defb 01000100b
 862:     -	0669  38      	    defb 00111000b
 863:     -	066A  00      	    defb 00000000b
 864:				
 865:				    ; code=86, hex=0x56, ascii="V"
 866:     -	066B  44      	    defb 01000100b
 867:     -	066C  44      	    defb 01000100b
 868:     -	066D  44      	    defb 01000100b
 869:     -	066E  44      	    defb 01000100b
 870:     -	066F  44      	    defb 01000100b
 871:     -	0670  28      	    defb 00101000b
 872:     -	0671  10      	    defb 00010000b
 873:     -	0672  00      	    defb 00000000b
 874:				
 875:				    ; code=87, hex=0x57, ascii="W"
 876:     -	0673  44      	    defb 01000100b
 877:     -	0674  44      	    defb 01000100b
 878:     -	0675  54      	    defb 01010100b
 879:     -	0676  54      	    defb 01010100b
 880:     -	0677  54      	    defb 01010100b
 881:     -	0678  54      	    defb 01010100b
 882:     -	0679  28      	    defb 00101000b
 883:     -	067A  00      	    defb 00000000b
 884:				
 885:				    ; code=88, hex=0x58, ascii="X"
 886:     -	067B  44      	    defb 01000100b
 887:     -	067C  44      	    defb 01000100b
 888:     -	067D  28      	    defb 00101000b
 889:     -	067E  10      	    defb 00010000b
 890:     -	067F  28      	    defb 00101000b
 891:     -	0680  44      	    defb 01000100b
 892:     -	0681  44      	    defb 01000100b
 893:     -	0682  00      	    defb 00000000b
 894:				
 895:				    ; code=89, hex=0x59, ascii="Y"
 896:     -	0683  44      	    defb 01000100b
 897:     -	0684  44      	    defb 01000100b
 898:     -	0685  44      	    defb 01000100b
 899:     -	0686  28      	    defb 00101000b
 900:     -	0687  10      	    defb 00010000b
 901:     -	0688  10      	    defb 00010000b
 902:     -	0689  10      	    defb 00010000b
 903:     -	068A  00      	    defb 00000000b
 904:				
 905:				    ; code=90, hex=0x5A, ascii="Z"
 906:     -	068B  78      	    defb 01111000b
 907:     -	068C  08      	    defb 00001000b
 908:     -	068D  10      	    defb 00010000b
 909:     -	068E  20      	    defb 00100000b
 910:     -	068F  40      	    defb 01000000b
 911:     -	0690  40      	    defb 01000000b
 912:     -	0691  78      	    defb 01111000b
 913:     -	0692  00      	    defb 00000000b
 914:				
 915:				    ; code=91, hex=0x5B, ascii="["
 916:     -	0693  38      	    defb 00111000b
 917:     -	0694  20      	    defb 00100000b
 918:     -	0695  20      	    defb 00100000b
 919:     -	0696  20      	    defb 00100000b
 920:     -	0697  20      	    defb 00100000b
 921:     -	0698  20      	    defb 00100000b
 922:     -	0699  38      	    defb 00111000b
 923:     -	069A  00      	    defb 00000000b
 924:				
 925:				    ; code=92, hex=0x5C, ascii="\"
 926:     -	069B  00      	    defb 00000000b
 927:     -	069C  40      	    defb 01000000b
 928:     -	069D  20      	    defb 00100000b
 929:     -	069E  10      	    defb 00010000b
 930:     -	069F  08      	    defb 00001000b
 931:     -	06A0  04      	    defb 00000100b
 932:     -	06A1  00      	    defb 00000000b
 933:     -	06A2  00      	    defb 00000000b
 934:				
 935:				    ; code=93, hex=0x5D, ascii="]"
 936:     -	06A3  38      	    defb 00111000b
 937:     -	06A4  08      	    defb 00001000b
 938:     -	06A5  08      	    defb 00001000b
 939:     -	06A6  08      	    defb 00001000b
 940:     -	06A7  08      	    defb 00001000b
 941:     -	06A8  08      	    defb 00001000b
 942:     -	06A9  38      	    defb 00111000b
 943:     -	06AA  00      	    defb 00000000b
 944:				
 945:				    ; code=94, hex=0x5E, ascii="^"
 946:     -	06AB  10      	    defb 00010000b
 947:     -	06AC  28      	    defb 00101000b
 948:     -	06AD  44      	    defb 01000100b
 949:     -	06AE  00      	    defb 00000000b
 950:     -	06AF  00      	    defb 00000000b
 951:     -	06B0  00      	    defb 00000000b
 952:     -	06B1  00      	    defb 00000000b
 953:     -	06B2  00      	    defb 00000000b
 954:				
 955:				    ; code=95, hex=0x5F, ascii="_"
 956:     -	06B3  00      	    defb 00000000b
 957:     -	06B4  00      	    defb 00000000b
 958:     -	06B5  00      	    defb 00000000b
 959:     -	06B6  00      	    defb 00000000b
 960:     -	06B7  00      	    defb 00000000b
 961:     -	06B8  00      	    defb 00000000b
 962:     -	06B9  00      	    defb 00000000b
 963:     -	06BA  FC      	    defb 11111100b
 964:				
 965:				    ; code=96, hex=0x60, ascii="`"
 966:     -	06BB  30      	    defb 00110000b
 967:     -	06BC  30      	    defb 00110000b
 968:     -	06BD  10      	    defb 00010000b
 969:     -	06BE  00      	    defb 00000000b
 970:     -	06BF  00      	    defb 00000000b
 971:     -	06C0  00      	    defb 00000000b
 972:     -	06C1  00      	    defb 00000000b
 973:     -	06C2  00      	    defb 00000000b
 974:				
 975:				    ; code=97, hex=0x61, ascii="a"
 976:     -	06C3  00      	    defb 00000000b
 977:     -	06C4  00      	    defb 00000000b
 978:     -	06C5  38      	    defb 00111000b
 979:     -	06C6  04      	    defb 00000100b
 980:     -	06C7  3C      	    defb 00111100b
 981:     -	06C8  44      	    defb 01000100b
 982:     -	06C9  3C      	    defb 00111100b
 983:     -	06CA  00      	    defb 00000000b
 984:				
 985:				    ; code=98, hex=0x62, ascii="b"
 986:     -	06CB  40      	    defb 01000000b
 987:     -	06CC  40      	    defb 01000000b
 988:     -	06CD  78      	    defb 01111000b
 989:     -	06CE  44      	    defb 01000100b
 990:     -	06CF  44      	    defb 01000100b
 991:     -	06D0  44      	    defb 01000100b
 992:     -	06D1  78      	    defb 01111000b
 993:     -	06D2  00      	    defb 00000000b
 994:				
 995:				    ; code=99, hex=0x63, ascii="c"
 996:     -	06D3  00      	    defb 00000000b
 997:     -	06D4  00      	    defb 00000000b
 998:     -	06D5  38      	    defb 00111000b
 999:     -	06D6  44      	    defb 01000100b
1000:     -	06D7  40      	    defb 01000000b
1001:     -	06D8  44      	    defb 01000100b
1002:     -	06D9  38      	    defb 00111000b
1003:     -	06DA  00      	    defb 00000000b
1004:				
1005:				    ; code=100, hex=0x64, ascii="d"
1006:     -	06DB  04      	    defb 00000100b
1007:     -	06DC  04      	    defb 00000100b
1008:     -	06DD  3C      	    defb 00111100b
1009:     -	06DE  44      	    defb 01000100b
1010:     -	06DF  44      	    defb 01000100b
1011:     -	06E0  44      	    defb 01000100b
1012:     -	06E1  3C      	    defb 00111100b
1013:     -	06E2  00      	    defb 00000000b
1014:				
1015:				    ; code=101, hex=0x65, ascii="e"
1016:     -	06E3  00      	    defb 00000000b
1017:     -	06E4  00      	    defb 00000000b
1018:     -	06E5  38      	    defb 00111000b
1019:     -	06E6  44      	    defb 01000100b
1020:     -	06E7  78      	    defb 01111000b
1021:     -	06E8  40      	    defb 01000000b
1022:     -	06E9  38      	    defb 00111000b
1023:     -	06EA  00      	    defb 00000000b
1024:				
1025:				    ; code=102, hex=0x66, ascii="f"
1026:     -	06EB  18      	    defb 00011000b
1027:     -	06EC  20      	    defb 00100000b
1028:     -	06ED  20      	    defb 00100000b
1029:     -	06EE  78      	    defb 01111000b
1030:     -	06EF  20      	    defb 00100000b
1031:     -	06F0  20      	    defb 00100000b
1032:     -	06F1  20      	    defb 00100000b
1033:     -	06F2  00      	    defb 00000000b
1034:				
1035:				    ; code=103, hex=0x67, ascii="g"
1036:     -	06F3  00      	    defb 00000000b
1037:     -	06F4  00      	    defb 00000000b
1038:     -	06F5  3C      	    defb 00111100b
1039:     -	06F6  44      	    defb 01000100b
1040:     -	06F7  44      	    defb 01000100b
1041:     -	06F8  3C      	    defb 00111100b
1042:     -	06F9  04      	    defb 00000100b
1043:     -	06FA  38      	    defb 00111000b
1044:				
1045:				    ; code=104, hex=0x68, ascii="h"
1046:     -	06FB  40      	    defb 01000000b
1047:     -	06FC  40      	    defb 01000000b
1048:     -	06FD  70      	    defb 01110000b
1049:     -	06FE  48      	    defb 01001000b
1050:     -	06FF  48      	    defb 01001000b
1051:     -	0700  48      	    defb 01001000b
1052:     -	0701  48      	    defb 01001000b
1053:     -	0702  00      	    defb 00000000b
1054:				
1055:				    ; code=105, hex=0x69, ascii="i"
1056:     -	0703  10      	    defb 00010000b
1057:     -	0704  00      	    defb 00000000b
1058:     -	0705  10      	    defb 00010000b
1059:     -	0706  10      	    defb 00010000b
1060:     -	0707  10      	    defb 00010000b
1061:     -	0708  10      	    defb 00010000b
1062:     -	0709  18      	    defb 00011000b
1063:     -	070A  00      	    defb 00000000b
1064:				
1065:				    ; code=106, hex=0x6A, ascii="j"
1066:     -	070B  08      	    defb 00001000b
1067:     -	070C  00      	    defb 00000000b
1068:     -	070D  18      	    defb 00011000b
1069:     -	070E  08      	    defb 00001000b
1070:     -	070F  08      	    defb 00001000b
1071:     -	0710  08      	    defb 00001000b
1072:     -	0711  48      	    defb 01001000b
1073:     -	0712  30      	    defb 00110000b
1074:				
1075:				    ; code=107, hex=0x6B, ascii="k"
1076:     -	0713  40      	    defb 01000000b
1077:     -	0714  40      	    defb 01000000b
1078:     -	0715  48      	    defb 01001000b
1079:     -	0716  50      	    defb 01010000b
1080:     -	0717  60      	    defb 01100000b
1081:     -	0718  50      	    defb 01010000b
1082:     -	0719  48      	    defb 01001000b
1083:     -	071A  00      	    defb 00000000b
1084:				
1085:				    ; code=108, hex=0x6C, ascii="l"
1086:     -	071B  10      	    defb 00010000b
1087:     -	071C  10      	    defb 00010000b
1088:     -	071D  10      	    defb 00010000b
1089:     -	071E  10      	    defb 00010000b
1090:     -	071F  10      	    defb 00010000b
1091:     -	0720  10      	    defb 00010000b
1092:     -	0721  18      	    defb 00011000b
1093:     -	0722  00      	    defb 00000000b
1094:				
1095:				    ; code=109, hex=0x6D, ascii="m"
1096:     -	0723  00      	    defb 00000000b
1097:     -	0724  00      	    defb 00000000b
1098:     -	0725  68      	    defb 01101000b
1099:     -	0726  54      	    defb 01010100b
1100:     -	0727  54      	    defb 01010100b
1101:     -	0728  44      	    defb 01000100b
1102:     -	0729  44      	    defb 01000100b
1103:     -	072A  00      	    defb 00000000b
1104:				
1105:				    ; code=110, hex=0x6E, ascii="n"
1106:     -	072B  00      	    defb 00000000b
1107:     -	072C  00      	    defb 00000000b
1108:     -	072D  70      	    defb 01110000b
1109:     -	072E  48      	    defb 01001000b
1110:     -	072F  48      	    defb 01001000b
1111:     -	0730  48      	    defb 01001000b
1112:     -	0731  48      	    defb 01001000b
1113:     -	0732  00      	    defb 00000000b
1114:				
1115:				    ; code=111, hex=0x6F, ascii="o"
1116:     -	0733  00      	    defb 00000000b
1117:     -	0734  00      	    defb 00000000b
1118:     -	0735  38      	    defb 00111000b
1119:     -	0736  44      	    defb 01000100b
1120:     -	0737  44      	    defb 01000100b
1121:     -	0738  44      	    defb 01000100b
1122:     -	0739  38      	    defb 00111000b
1123:     -	073A  00      	    defb 00000000b
1124:				
1125:				    ; code=112, hex=0x70, ascii="p"
1126:     -	073B  00      	    defb 00000000b
1127:     -	073C  00      	    defb 00000000b
1128:     -	073D  78      	    defb 01111000b
1129:     -	073E  44      	    defb 01000100b
1130:     -	073F  44      	    defb 01000100b
1131:     -	0740  44      	    defb 01000100b
1132:     -	0741  78      	    defb 01111000b
1133:     -	0742  40      	    defb 01000000b
1134:				
1135:				    ; code=113, hex=0x71, ascii="q"
1136:     -	0743  00      	    defb 00000000b
1137:     -	0744  00      	    defb 00000000b
1138:     -	0745  3C      	    defb 00111100b
1139:     -	0746  44      	    defb 01000100b
1140:     -	0747  44      	    defb 01000100b
1141:     -	0748  44      	    defb 01000100b
1142:     -	0749  3C      	    defb 00111100b
1143:     -	074A  04      	    defb 00000100b
1144:				
1145:				    ; code=114, hex=0x72, ascii="r"
1146:     -	074B  00      	    defb 00000000b
1147:     -	074C  00      	    defb 00000000b
1148:     -	074D  58      	    defb 01011000b
1149:     -	074E  24      	    defb 00100100b
1150:     -	074F  20      	    defb 00100000b
1151:     -	0750  20      	    defb 00100000b
1152:     -	0751  70      	    defb 01110000b
1153:     -	0752  00      	    defb 00000000b
1154:				
1155:				    ; code=115, hex=0x73, ascii="s"
1156:     -	0753  00      	    defb 00000000b
1157:     -	0754  00      	    defb 00000000b
1158:     -	0755  38      	    defb 00111000b
1159:     -	0756  40      	    defb 01000000b
1160:     -	0757  38      	    defb 00111000b
1161:     -	0758  04      	    defb 00000100b
1162:     -	0759  38      	    defb 00111000b
1163:     -	075A  00      	    defb 00000000b
1164:				
1165:				    ; code=116, hex=0x74, ascii="t"
1166:     -	075B  00      	    defb 00000000b
1167:     -	075C  20      	    defb 00100000b
1168:     -	075D  78      	    defb 01111000b
1169:     -	075E  20      	    defb 00100000b
1170:     -	075F  20      	    defb 00100000b
1171:     -	0760  28      	    defb 00101000b
1172:     -	0761  10      	    defb 00010000b
1173:     -	0762  00      	    defb 00000000b
1174:				
1175:				    ; code=117, hex=0x75, ascii="u"
1176:     -	0763  00      	    defb 00000000b
1177:     -	0764  00      	    defb 00000000b
1178:     -	0765  48      	    defb 01001000b
1179:     -	0766  48      	    defb 01001000b
1180:     -	0767  48      	    defb 01001000b
1181:     -	0768  58      	    defb 01011000b
1182:     -	0769  28      	    defb 00101000b
1183:     -	076A  00      	    defb 00000000b
1184:				
1185:				    ; code=118, hex=0x76, ascii="v"
1186:     -	076B  00      	    defb 00000000b
1187:     -	076C  00      	    defb 00000000b
1188:     -	076D  44      	    defb 01000100b
1189:     -	076E  44      	    defb 01000100b
1190:     -	076F  44      	    defb 01000100b
1191:     -	0770  28      	    defb 00101000b
1192:     -	0771  10      	    defb 00010000b
1193:     -	0772  00      	    defb 00000000b
1194:				
1195:				    ; code=119, hex=0x77, ascii="w"
1196:     -	0773  00      	    defb 00000000b
1197:     -	0774  00      	    defb 00000000b
1198:     -	0775  44      	    defb 01000100b
1199:     -	0776  44      	    defb 01000100b
1200:     -	0777  54      	    defb 01010100b
1201:     -	0778  7C      	    defb 01111100b
1202:     -	0779  28      	    defb 00101000b
1203:     -	077A  00      	    defb 00000000b
1204:				
1205:				    ; code=120, hex=0x78, ascii="x"
1206:     -	077B  00      	    defb 00000000b
1207:     -	077C  00      	    defb 00000000b
1208:     -	077D  48      	    defb 01001000b
1209:     -	077E  48      	    defb 01001000b
1210:     -	077F  30      	    defb 00110000b
1211:     -	0780  48      	    defb 01001000b
1212:     -	0781  48      	    defb 01001000b
1213:     -	0782  00      	    defb 00000000b
1214:				
1215:				    ; code=121, hex=0x79, ascii="y"
1216:     -	0783  00      	    defb 00000000b
1217:     -	0784  00      	    defb 00000000b
1218:     -	0785  48      	    defb 01001000b
1219:     -	0786  48      	    defb 01001000b
1220:     -	0787  48      	    defb 01001000b
1221:     -	0788  38      	    defb 00111000b
1222:     -	0789  10      	    defb 00010000b
1223:     -	078A  60      	    defb 01100000b
1224:				
1225:				    ; code=122, hex=0x7A, ascii="z"
1226:     -	078B  00      	    defb 00000000b
1227:     -	078C  00      	    defb 00000000b
1228:     -	078D  78      	    defb 01111000b
1229:     -	078E  08      	    defb 00001000b
1230:     -	078F  30      	    defb 00110000b
1231:     -	0790  40      	    defb 01000000b
1232:     -	0791  78      	    defb 01111000b
1233:     -	0792  00      	    defb 00000000b
1234:				
1235:				    ; code=123, hex=0x7B, ascii="{"
1236:     -	0793  18      	    defb 00011000b
1237:     -	0794  20      	    defb 00100000b
1238:     -	0795  20      	    defb 00100000b
1239:     -	0796  60      	    defb 01100000b
1240:     -	0797  20      	    defb 00100000b
1241:     -	0798  20      	    defb 00100000b
1242:     -	0799  18      	    defb 00011000b
1243:     -	079A  00      	    defb 00000000b
1244:				
1245:				    ; code=124, hex=0x7C, ascii="|"
1246:     -	079B  10      	    defb 00010000b
1247:     -	079C  10      	    defb 00010000b
1248:     -	079D  10      	    defb 00010000b
1249:     -	079E  00      	    defb 00000000b
1250:     -	079F  10      	    defb 00010000b
1251:     -	07A0  10      	    defb 00010000b
1252:     -	07A1  10      	    defb 00010000b
1253:     -	07A2  00      	    defb 00000000b
1254:				
1255:				    ; code=125, hex=0x7D, ascii="}"
1256:     -	07A3  30      	    defb 00110000b
1257:     -	07A4  08      	    defb 00001000b
1258:     -	07A5  08      	    defb 00001000b
1259:     -	07A6  0C      	    defb 00001100b
1260:     -	07A7  08      	    defb 00001000b
1261:     -	07A8  08      	    defb 00001000b
1262:     -	07A9  30      	    defb 00110000b
1263:     -	07AA  00      	    defb 00000000b
1264:				
1265:				    ; code=126, hex=0x7E, ascii="~"
1266:     -	07AB  28      	    defb 00101000b
1267:     -	07AC  50      	    defb 01010000b
1268:     -	07AD  00      	    defb 00000000b
1269:     -	07AE  00      	    defb 00000000b
1270:     -	07AF  00      	    defb 00000000b
1271:     -	07B0  00      	    defb 00000000b
1272:     -	07B1  00      	    defb 00000000b
1273:     -	07B2  00      	    defb 00000000b
1274:				
1275:				    ; code=127, hex=0x7F, ascii="^?"
1276:     -	07B3  10      	    defb 00010000b
1277:     -	07B4  38      	    defb 00111000b
1278:     -	07B5  6C      	    defb 01101100b
1279:     -	07B6  44      	    defb 01000100b
1280:     -	07B7  44      	    defb 01000100b
1281:     -	07B8  7C      	    defb 01111100b
1282:     -	07B9  00      	    defb 00000000b
1283:     -	07BA  00      	    defb 00000000b
1284:				
1285:				    ; code=128, hex=0x80, ascii="!^@"
1286:     -	07BB  38      	    defb 00111000b
1287:     -	07BC  44      	    defb 01000100b
1288:     -	07BD  40      	    defb 01000000b
1289:     -	07BE  40      	    defb 01000000b
1290:     -	07BF  44      	    defb 01000100b
1291:     -	07C0  38      	    defb 00111000b
1292:     -	07C1  10      	    defb 00010000b
1293:     -	07C2  30      	    defb 00110000b
1294:				
1295:				    ; code=129, hex=0x81, ascii="!^A"
1296:     -	07C3  48      	    defb 01001000b
1297:     -	07C4  00      	    defb 00000000b
1298:     -	07C5  48      	    defb 01001000b
1299:     -	07C6  48      	    defb 01001000b
1300:     -	07C7  48      	    defb 01001000b
1301:     -	07C8  58      	    defb 01011000b
1302:     -	07C9  28      	    defb 00101000b
1303:     -	07CA  00      	    defb 00000000b
1304:				
1305:				    ; code=130, hex=0x82, ascii="!^B"
1306:     -	07CB  0C      	    defb 00001100b
1307:     -	07CC  00      	    defb 00000000b
1308:     -	07CD  38      	    defb 00111000b
1309:     -	07CE  44      	    defb 01000100b
1310:     -	07CF  78      	    defb 01111000b
1311:     -	07D0  40      	    defb 01000000b
1312:     -	07D1  38      	    defb 00111000b
1313:     -	07D2  00      	    defb 00000000b
1314:				
1315:				    ; code=131, hex=0x83, ascii="!^C"
1316:     -	07D3  38      	    defb 00111000b
1317:     -	07D4  00      	    defb 00000000b
1318:     -	07D5  38      	    defb 00111000b
1319:     -	07D6  04      	    defb 00000100b
1320:     -	07D7  3C      	    defb 00111100b
1321:     -	07D8  44      	    defb 01000100b
1322:     -	07D9  3C      	    defb 00111100b
1323:     -	07DA  00      	    defb 00000000b
1324:				
1325:				    ; code=132, hex=0x84, ascii="!^D"
1326:     -	07DB  28      	    defb 00101000b
1327:     -	07DC  00      	    defb 00000000b
1328:     -	07DD  38      	    defb 00111000b
1329:     -	07DE  04      	    defb 00000100b
1330:     -	07DF  3C      	    defb 00111100b
1331:     -	07E0  44      	    defb 01000100b
1332:     -	07E1  3C      	    defb 00111100b
1333:     -	07E2  00      	    defb 00000000b
1334:				
1335:				    ; code=133, hex=0x85, ascii="!^E"
1336:     -	07E3  30      	    defb 00110000b
1337:     -	07E4  00      	    defb 00000000b
1338:     -	07E5  38      	    defb 00111000b
1339:     -	07E6  04      	    defb 00000100b
1340:     -	07E7  3C      	    defb 00111100b
1341:     -	07E8  44      	    defb 01000100b
1342:     -	07E9  3C      	    defb 00111100b
1343:     -	07EA  00      	    defb 00000000b
1344:				
1345:				    ; code=134, hex=0x86, ascii="!^F"
1346:     -	07EB  38      	    defb 00111000b
1347:     -	07EC  28      	    defb 00101000b
1348:     -	07ED  38      	    defb 00111000b
1349:     -	07EE  04      	    defb 00000100b
1350:     -	07EF  3C      	    defb 00111100b
1351:     -	07F0  44      	    defb 01000100b
1352:     -	07F1  3C      	    defb 00111100b
1353:     -	07F2  00      	    defb 00000000b
1354:				
1355:				    ; code=135, hex=0x87, ascii="!^G"
1356:     -	07F3  00      	    defb 00000000b
1357:     -	07F4  38      	    defb 00111000b
1358:     -	07F5  44      	    defb 01000100b
1359:     -	07F6  40      	    defb 01000000b
1360:     -	07F7  44      	    defb 01000100b
1361:     -	07F8  38      	    defb 00111000b
1362:     -	07F9  10      	    defb 00010000b
1363:     -	07FA  30      	    defb 00110000b
1364:				
1365:				    ; code=136, hex=0x88, ascii="!^H"
1366:     -	07FB  38      	    defb 00111000b
1367:     -	07FC  00      	    defb 00000000b
1368:     -	07FD  38      	    defb 00111000b
1369:     -	07FE  44      	    defb 01000100b
1370:     -	07FF  78      	    defb 01111000b
1371:     -	0800  40      	    defb 01000000b
1372:     -	0801  38      	    defb 00111000b
1373:     -	0802  00      	    defb 00000000b
1374:				
1375:				    ; code=137, hex=0x89, ascii="!^I"
1376:     -	0803  28      	    defb 00101000b
1377:     -	0804  00      	    defb 00000000b
1378:     -	0805  38      	    defb 00111000b
1379:     -	0806  44      	    defb 01000100b
1380:     -	0807  78      	    defb 01111000b
1381:     -	0808  40      	    defb 01000000b
1382:     -	0809  38      	    defb 00111000b
1383:     -	080A  00      	    defb 00000000b
1384:				
1385:				    ; code=138, hex=0x8A, ascii="!^J"
1386:     -	080B  30      	    defb 00110000b
1387:     -	080C  00      	    defb 00000000b
1388:     -	080D  38      	    defb 00111000b
1389:     -	080E  44      	    defb 01000100b
1390:     -	080F  78      	    defb 01111000b
1391:     -	0810  40      	    defb 01000000b
1392:     -	0811  38      	    defb 00111000b
1393:     -	0812  00      	    defb 00000000b
1394:				
1395:				    ; code=139, hex=0x8B, ascii="!^K"
1396:     -	0813  28      	    defb 00101000b
1397:     -	0814  00      	    defb 00000000b
1398:     -	0815  10      	    defb 00010000b
1399:     -	0816  10      	    defb 00010000b
1400:     -	0817  10      	    defb 00010000b
1401:     -	0818  10      	    defb 00010000b
1402:     -	0819  18      	    defb 00011000b
1403:     -	081A  00      	    defb 00000000b
1404:				
1405:				    ; code=140, hex=0x8C, ascii="!^L"
1406:     -	081B  10      	    defb 00010000b
1407:     -	081C  28      	    defb 00101000b
1408:     -	081D  00      	    defb 00000000b
1409:     -	081E  10      	    defb 00010000b
1410:     -	081F  10      	    defb 00010000b
1411:     -	0820  10      	    defb 00010000b
1412:     -	0821  18      	    defb 00011000b
1413:     -	0822  00      	    defb 00000000b
1414:				
1415:				    ; code=141, hex=0x8D, ascii="!^M"
1416:     -	0823  20      	    defb 00100000b
1417:     -	0824  00      	    defb 00000000b
1418:     -	0825  10      	    defb 00010000b
1419:     -	0826  10      	    defb 00010000b
1420:     -	0827  10      	    defb 00010000b
1421:     -	0828  10      	    defb 00010000b
1422:     -	0829  18      	    defb 00011000b
1423:     -	082A  00      	    defb 00000000b
1424:				
1425:				    ; code=142, hex=0x8E, ascii="!^N"
1426:     -	082B  28      	    defb 00101000b
1427:     -	082C  00      	    defb 00000000b
1428:     -	082D  10      	    defb 00010000b
1429:     -	082E  28      	    defb 00101000b
1430:     -	082F  44      	    defb 01000100b
1431:     -	0830  7C      	    defb 01111100b
1432:     -	0831  44      	    defb 01000100b
1433:     -	0832  00      	    defb 00000000b
1434:				
1435:				    ; code=143, hex=0x8F, ascii="!^O"
1436:     -	0833  38      	    defb 00111000b
1437:     -	0834  28      	    defb 00101000b
1438:     -	0835  38      	    defb 00111000b
1439:     -	0836  6C      	    defb 01101100b
1440:     -	0837  44      	    defb 01000100b
1441:     -	0838  7C      	    defb 01111100b
1442:     -	0839  44      	    defb 01000100b
1443:     -	083A  00      	    defb 00000000b
1444:				
1445:				    ; code=144, hex=0x90, ascii="!^P"
1446:     -	083B  0C      	    defb 00001100b
1447:     -	083C  00      	    defb 00000000b
1448:     -	083D  7C      	    defb 01111100b
1449:     -	083E  40      	    defb 01000000b
1450:     -	083F  78      	    defb 01111000b
1451:     -	0840  40      	    defb 01000000b
1452:     -	0841  7C      	    defb 01111100b
1453:     -	0842  00      	    defb 00000000b
1454:				
1455:				    ; code=145, hex=0x91, ascii="!^Q"
1456:     -	0843  00      	    defb 00000000b
1457:     -	0844  00      	    defb 00000000b
1458:     -	0845  78      	    defb 01111000b
1459:     -	0846  14      	    defb 00010100b
1460:     -	0847  7C      	    defb 01111100b
1461:     -	0848  50      	    defb 01010000b
1462:     -	0849  3C      	    defb 00111100b
1463:     -	084A  00      	    defb 00000000b
1464:				
1465:				    ; code=146, hex=0x92, ascii="!^R"
1466:     -	084B  3C      	    defb 00111100b
1467:     -	084C  50      	    defb 01010000b
1468:     -	084D  50      	    defb 01010000b
1469:     -	084E  7C      	    defb 01111100b
1470:     -	084F  50      	    defb 01010000b
1471:     -	0850  50      	    defb 01010000b
1472:     -	0851  5C      	    defb 01011100b
1473:     -	0852  00      	    defb 00000000b
1474:				
1475:				    ; code=147, hex=0x93, ascii="!^S"
1476:     -	0853  38      	    defb 00111000b
1477:     -	0854  00      	    defb 00000000b
1478:     -	0855  30      	    defb 00110000b
1479:     -	0856  48      	    defb 01001000b
1480:     -	0857  48      	    defb 01001000b
1481:     -	0858  48      	    defb 01001000b
1482:     -	0859  30      	    defb 00110000b
1483:     -	085A  00      	    defb 00000000b
1484:				
1485:				    ; code=148, hex=0x94, ascii="!^T"
1486:     -	085B  28      	    defb 00101000b
1487:     -	085C  00      	    defb 00000000b
1488:     -	085D  30      	    defb 00110000b
1489:     -	085E  48      	    defb 01001000b
1490:     -	085F  48      	    defb 01001000b
1491:     -	0860  48      	    defb 01001000b
1492:     -	0861  30      	    defb 00110000b
1493:     -	0862  00      	    defb 00000000b
1494:				
1495:				    ; code=149, hex=0x95, ascii="!^U"
1496:     -	0863  60      	    defb 01100000b
1497:     -	0864  00      	    defb 00000000b
1498:     -	0865  30      	    defb 00110000b
1499:     -	0866  48      	    defb 01001000b
1500:     -	0867  48      	    defb 01001000b
1501:     -	0868  48      	    defb 01001000b
1502:     -	0869  30      	    defb 00110000b
1503:     -	086A  00      	    defb 00000000b
1504:				
1505:				    ; code=150, hex=0x96, ascii="!^V"
1506:     -	086B  38      	    defb 00111000b
1507:     -	086C  00      	    defb 00000000b
1508:     -	086D  48      	    defb 01001000b
1509:     -	086E  48      	    defb 01001000b
1510:     -	086F  48      	    defb 01001000b
1511:     -	0870  58      	    defb 01011000b
1512:     -	0871  28      	    defb 00101000b
1513:     -	0872  00      	    defb 00000000b
1514:				
1515:				    ; code=151, hex=0x97, ascii="!^W"
1516:     -	0873  60      	    defb 01100000b
1517:     -	0874  00      	    defb 00000000b
1518:     -	0875  48      	    defb 01001000b
1519:     -	0876  48      	    defb 01001000b
1520:     -	0877  48      	    defb 01001000b
1521:     -	0878  58      	    defb 01011000b
1522:     -	0879  28      	    defb 00101000b
1523:     -	087A  00      	    defb 00000000b
1524:				
1525:				    ; code=152, hex=0x98, ascii="!^X"
1526:     -	087B  28      	    defb 00101000b
1527:     -	087C  00      	    defb 00000000b
1528:     -	087D  48      	    defb 01001000b
1529:     -	087E  48      	    defb 01001000b
1530:     -	087F  48      	    defb 01001000b
1531:     -	0880  38      	    defb 00111000b
1532:     -	0881  10      	    defb 00010000b
1533:     -	0882  60      	    defb 01100000b
1534:				
1535:				    ; code=153, hex=0x99, ascii="!^Y"
1536:     -	0883  48      	    defb 01001000b
1537:     -	0884  30      	    defb 00110000b
1538:     -	0885  48      	    defb 01001000b
1539:     -	0886  48      	    defb 01001000b
1540:     -	0887  48      	    defb 01001000b
1541:     -	0888  48      	    defb 01001000b
1542:     -	0889  30      	    defb 00110000b
1543:     -	088A  00      	    defb 00000000b
1544:				
1545:				    ; code=154, hex=0x9A, ascii="!^Z"
1546:     -	088B  28      	    defb 00101000b
1547:     -	088C  00      	    defb 00000000b
1548:     -	088D  48      	    defb 01001000b
1549:     -	088E  48      	    defb 01001000b
1550:     -	088F  48      	    defb 01001000b
1551:     -	0890  48      	    defb 01001000b
1552:     -	0891  30      	    defb 00110000b
1553:     -	0892  00      	    defb 00000000b
1554:				
1555:				    ; code=155, hex=0x9B, ascii="!^["
1556:     -	0893  00      	    defb 00000000b
1557:     -	0894  10      	    defb 00010000b
1558:     -	0895  38      	    defb 00111000b
1559:     -	0896  40      	    defb 01000000b
1560:     -	0897  40      	    defb 01000000b
1561:     -	0898  38      	    defb 00111000b
1562:     -	0899  10      	    defb 00010000b
1563:     -	089A  00      	    defb 00000000b
1564:				
1565:				    ; code=156, hex=0x9C, ascii="!^\"
1566:     -	089B  18      	    defb 00011000b
1567:     -	089C  24      	    defb 00100100b
1568:     -	089D  20      	    defb 00100000b
1569:     -	089E  78      	    defb 01111000b
1570:     -	089F  20      	    defb 00100000b
1571:     -	08A0  24      	    defb 00100100b
1572:     -	08A1  5C      	    defb 01011100b
1573:     -	08A2  00      	    defb 00000000b
1574:				
1575:				    ; code=157, hex=0x9D, ascii="!^]"
1576:     -	08A3  44      	    defb 01000100b
1577:     -	08A4  28      	    defb 00101000b
1578:     -	08A5  10      	    defb 00010000b
1579:     -	08A6  7C      	    defb 01111100b
1580:     -	08A7  10      	    defb 00010000b
1581:     -	08A8  7C      	    defb 01111100b
1582:     -	08A9  10      	    defb 00010000b
1583:     -	08AA  00      	    defb 00000000b
1584:				
1585:				    ; code=158, hex=0x9E, ascii="!^^"
1586:     -	08AB  60      	    defb 01100000b
1587:     -	08AC  50      	    defb 01010000b
1588:     -	08AD  50      	    defb 01010000b
1589:     -	08AE  68      	    defb 01101000b
1590:     -	08AF  5C      	    defb 01011100b
1591:     -	08B0  48      	    defb 01001000b
1592:     -	08B1  48      	    defb 01001000b
1593:     -	08B2  00      	    defb 00000000b
1594:				
1595:				    ; code=159, hex=0x9F, ascii="!^_"
1596:     -	08B3  08      	    defb 00001000b
1597:     -	08B4  14      	    defb 00010100b
1598:     -	08B5  10      	    defb 00010000b
1599:     -	08B6  38      	    defb 00111000b
1600:     -	08B7  10      	    defb 00010000b
1601:     -	08B8  10      	    defb 00010000b
1602:     -	08B9  50      	    defb 01010000b
1603:     -	08BA  20      	    defb 00100000b
1604:				
1605:				    ; code=160, hex=0xA0, ascii="! "
1606:     -	08BB  18      	    defb 00011000b
1607:     -	08BC  00      	    defb 00000000b
1608:     -	08BD  38      	    defb 00111000b
1609:     -	08BE  04      	    defb 00000100b
1610:     -	08BF  3C      	    defb 00111100b
1611:     -	08C0  44      	    defb 01000100b
1612:     -	08C1  3C      	    defb 00111100b
1613:     -	08C2  00      	    defb 00000000b
1614:				
1615:				    ; code=161, hex=0xA1, ascii="!!"
1616:     -	08C3  18      	    defb 00011000b
1617:     -	08C4  00      	    defb 00000000b
1618:     -	08C5  10      	    defb 00010000b
1619:     -	08C6  10      	    defb 00010000b
1620:     -	08C7  10      	    defb 00010000b
1621:     -	08C8  10      	    defb 00010000b
1622:     -	08C9  18      	    defb 00011000b
1623:     -	08CA  00      	    defb 00000000b
1624:				
1625:				    ; code=162, hex=0xA2, ascii="!""
1626:     -	08CB  18      	    defb 00011000b
1627:     -	08CC  00      	    defb 00000000b
1628:     -	08CD  30      	    defb 00110000b
1629:     -	08CE  48      	    defb 01001000b
1630:     -	08CF  48      	    defb 01001000b
1631:     -	08D0  48      	    defb 01001000b
1632:     -	08D1  30      	    defb 00110000b
1633:     -	08D2  00      	    defb 00000000b
1634:				
1635:				    ; code=163, hex=0xA3, ascii="!#"
1636:     -	08D3  18      	    defb 00011000b
1637:     -	08D4  00      	    defb 00000000b
1638:     -	08D5  48      	    defb 01001000b
1639:     -	08D6  48      	    defb 01001000b
1640:     -	08D7  48      	    defb 01001000b
1641:     -	08D8  58      	    defb 01011000b
1642:     -	08D9  28      	    defb 00101000b
1643:     -	08DA  00      	    defb 00000000b
1644:				
1645:				    ; code=164, hex=0xA4, ascii="!$"
1646:     -	08DB  28      	    defb 00101000b
1647:     -	08DC  50      	    defb 01010000b
1648:     -	08DD  00      	    defb 00000000b
1649:     -	08DE  70      	    defb 01110000b
1650:     -	08DF  48      	    defb 01001000b
1651:     -	08E0  48      	    defb 01001000b
1652:     -	08E1  48      	    defb 01001000b
1653:     -	08E2  00      	    defb 00000000b
1654:				
1655:				    ; code=165, hex=0xA5, ascii="!"
1656:     -	08E3  28      	    defb 00101000b
1657:     -	08E4  50      	    defb 01010000b
1658:     -	08E5  00      	    defb 00000000b
1659:     -	08E6  48      	    defb 01001000b
1660:     -	08E7  68      	    defb 01101000b
1661:     -	08E8  58      	    defb 01011000b
1662:     -	08E9  48      	    defb 01001000b
1663:     -	08EA  00      	    defb 00000000b
1664:				
1665:				    ; code=166, hex=0xA6, ascii="!&"
1666:     -	08EB  38      	    defb 00111000b
1667:     -	08EC  04      	    defb 00000100b
1668:     -	08ED  3C      	    defb 00111100b
1669:     -	08EE  44      	    defb 01000100b
1670:     -	08EF  3C      	    defb 00111100b
1671:     -	08F0  00      	    defb 00000000b
1672:     -	08F1  3C      	    defb 00111100b
1673:     -	08F2  00      	    defb 00000000b
1674:				
1675:				    ; code=167, hex=0xA7, ascii="!'"
1676:     -	08F3  30      	    defb 00110000b
1677:     -	08F4  48      	    defb 01001000b
1678:     -	08F5  48      	    defb 01001000b
1679:     -	08F6  48      	    defb 01001000b
1680:     -	08F7  30      	    defb 00110000b
1681:     -	08F8  00      	    defb 00000000b
1682:     -	08F9  78      	    defb 01111000b
1683:     -	08FA  00      	    defb 00000000b
1684:				
1685:				    ; code=168, hex=0xA8, ascii="!("
1686:     -	08FB  10      	    defb 00010000b
1687:     -	08FC  00      	    defb 00000000b
1688:     -	08FD  10      	    defb 00010000b
1689:     -	08FE  30      	    defb 00110000b
1690:     -	08FF  40      	    defb 01000000b
1691:     -	0900  44      	    defb 01000100b
1692:     -	0901  38      	    defb 00111000b
1693:     -	0902  00      	    defb 00000000b
1694:				
1695:				    ; code=169, hex=0xA9, ascii="!)"
1696:     -	0903  00      	    defb 00000000b
1697:     -	0904  00      	    defb 00000000b
1698:     -	0905  7C      	    defb 01111100b
1699:     -	0906  40      	    defb 01000000b
1700:     -	0907  40      	    defb 01000000b
1701:     -	0908  40      	    defb 01000000b
1702:     -	0909  00      	    defb 00000000b
1703:     -	090A  00      	    defb 00000000b
1704:				
1705:				    ; code=170, hex=0xAA, ascii="!*"
1706:     -	090B  00      	    defb 00000000b
1707:     -	090C  00      	    defb 00000000b
1708:     -	090D  FC      	    defb 11111100b
1709:     -	090E  04      	    defb 00000100b
1710:     -	090F  04      	    defb 00000100b
1711:     -	0910  00      	    defb 00000000b
1712:     -	0911  00      	    defb 00000000b
1713:     -	0912  00      	    defb 00000000b
1714:				
1715:				    ; code=171, hex=0xAB, ascii="!+"
1716:     -	0913  40      	    defb 01000000b
1717:     -	0914  48      	    defb 01001000b
1718:     -	0915  50      	    defb 01010000b
1719:     -	0916  38      	    defb 00111000b
1720:     -	0917  44      	    defb 01000100b
1721:     -	0918  08      	    defb 00001000b
1722:     -	0919  1C      	    defb 00011100b
1723:     -	091A  00      	    defb 00000000b
1724:				
1725:				    ; code=172, hex=0xAC, ascii="!,"
1726:     -	091B  40      	    defb 01000000b
1727:     -	091C  48      	    defb 01001000b
1728:     -	091D  50      	    defb 01010000b
1729:     -	091E  2C      	    defb 00101100b
1730:     -	091F  54      	    defb 01010100b
1731:     -	0920  1C      	    defb 00011100b
1732:     -	0921  04      	    defb 00000100b
1733:     -	0922  00      	    defb 00000000b
1734:				
1735:				    ; code=173, hex=0xAD, ascii="!-"
1736:     -	0923  10      	    defb 00010000b
1737:     -	0924  00      	    defb 00000000b
1738:     -	0925  10      	    defb 00010000b
1739:     -	0926  10      	    defb 00010000b
1740:     -	0927  38      	    defb 00111000b
1741:     -	0928  38      	    defb 00111000b
1742:     -	0929  10      	    defb 00010000b
1743:     -	092A  00      	    defb 00000000b
1744:				
1745:				    ; code=174, hex=0xAE, ascii="!."
1746:     -	092B  00      	    defb 00000000b
1747:     -	092C  00      	    defb 00000000b
1748:     -	092D  24      	    defb 00100100b
1749:     -	092E  48      	    defb 01001000b
1750:     -	092F  24      	    defb 00100100b
1751:     -	0930  00      	    defb 00000000b
1752:     -	0931  00      	    defb 00000000b
1753:     -	0932  00      	    defb 00000000b
1754:				
1755:				    ; code=175, hex=0xAF, ascii="!/"
1756:     -	0933  00      	    defb 00000000b
1757:     -	0934  00      	    defb 00000000b
1758:     -	0935  48      	    defb 01001000b
1759:     -	0936  24      	    defb 00100100b
1760:     -	0937  48      	    defb 01001000b
1761:     -	0938  00      	    defb 00000000b
1762:     -	0939  00      	    defb 00000000b
1763:     -	093A  00      	    defb 00000000b
1764:				
1765:				    ; code=176, hex=0xB0, ascii="!0"
1766:     -	093B  54      	    defb 01010100b
1767:     -	093C  00      	    defb 00000000b
1768:     -	093D  A8      	    defb 10101000b
1769:     -	093E  00      	    defb 00000000b
1770:     -	093F  54      	    defb 01010100b
1771:     -	0940  00      	    defb 00000000b
1772:     -	0941  A8      	    defb 10101000b
1773:     -	0942  00      	    defb 00000000b
1774:				
1775:				    ; code=177, hex=0xB1, ascii="!1"
1776:     -	0943  54      	    defb 01010100b
1777:     -	0944  A8      	    defb 10101000b
1778:     -	0945  54      	    defb 01010100b
1779:     -	0946  A8      	    defb 10101000b
1780:     -	0947  54      	    defb 01010100b
1781:     -	0948  A8      	    defb 10101000b
1782:     -	0949  54      	    defb 01010100b
1783:     -	094A  A8      	    defb 10101000b
1784:				
1785:				    ; code=178, hex=0xB2, ascii="!2"
1786:     -	094B  A8      	    defb 10101000b
1787:     -	094C  FC      	    defb 11111100b
1788:     -	094D  54      	    defb 01010100b
1789:     -	094E  FC      	    defb 11111100b
1790:     -	094F  A8      	    defb 10101000b
1791:     -	0950  FC      	    defb 11111100b
1792:     -	0951  54      	    defb 01010100b
1793:     -	0952  FC      	    defb 11111100b
1794:				
1795:				    ; code=180, hex=0xB4, ascii="!4"
1796:     -	0953  10      	    defb 00010000b
1797:     -	0954  10      	    defb 00010000b
1798:     -	0955  10      	    defb 00010000b
1799:     -	0956  F0      	    defb 11110000b
1800:     -	0957  10      	    defb 00010000b
1801:     -	0958  10      	    defb 00010000b
1802:     -	0959  10      	    defb 00010000b
1803:     -	095A  10      	    defb 00010000b
1804:				
1805:				    ; code=181, hex=0xB5, ascii="!5"
1806:     -	095B  10      	    defb 00010000b
1807:     -	095C  F0      	    defb 11110000b
1808:     -	095D  10      	    defb 00010000b
1809:     -	095E  F0      	    defb 11110000b
1810:     -	095F  10      	    defb 00010000b
1811:     -	0960  10      	    defb 00010000b
1812:     -	0961  10      	    defb 00010000b
1813:     -	0962  10      	    defb 00010000b
1814:				
1815:				    ; code=182, hex=0xB6, ascii="!6"
1816:     -	0963  50      	    defb 01010000b
1817:     -	0964  50      	    defb 01010000b
1818:     -	0965  50      	    defb 01010000b
1819:     -	0966  D0      	    defb 11010000b
1820:     -	0967  50      	    defb 01010000b
1821:     -	0968  50      	    defb 01010000b
1822:     -	0969  50      	    defb 01010000b
1823:     -	096A  50      	    defb 01010000b
1824:				
1825:				    ; code=183, hex=0xB7, ascii="!7"
1826:     -	096B  00      	    defb 00000000b
1827:     -	096C  00      	    defb 00000000b
1828:     -	096D  00      	    defb 00000000b
1829:     -	096E  F0      	    defb 11110000b
1830:     -	096F  50      	    defb 01010000b
1831:     -	0970  50      	    defb 01010000b
1832:     -	0971  50      	    defb 01010000b
1833:     -	0972  50      	    defb 01010000b
1834:				
1835:				    ; code=184, hex=0xB8, ascii="!8"
1836:     -	0973  00      	    defb 00000000b
1837:     -	0974  F0      	    defb 11110000b
1838:     -	0975  10      	    defb 00010000b
1839:     -	0976  F0      	    defb 11110000b
1840:     -	0977  10      	    defb 00010000b
1841:     -	0978  10      	    defb 00010000b
1842:     -	0979  10      	    defb 00010000b
1843:     -	097A  10      	    defb 00010000b
1844:				
1845:				    ; code=185, hex=0xB9, ascii="!9"
1846:     -	097B  50      	    defb 01010000b
1847:     -	097C  D0      	    defb 11010000b
1848:     -	097D  10      	    defb 00010000b
1849:     -	097E  D0      	    defb 11010000b
1850:     -	097F  50      	    defb 01010000b
1851:     -	0980  50      	    defb 01010000b
1852:     -	0981  50      	    defb 01010000b
1853:     -	0982  50      	    defb 01010000b
1854:				
1855:				    ; code=186, hex=0xBA, ascii="!:"
1856:     -	0983  50      	    defb 01010000b
1857:     -	0984  50      	    defb 01010000b
1858:     -	0985  50      	    defb 01010000b
1859:     -	0986  50      	    defb 01010000b
1860:     -	0987  50      	    defb 01010000b
1861:     -	0988  50      	    defb 01010000b
1862:     -	0989  50      	    defb 01010000b
1863:     -	098A  50      	    defb 01010000b
1864:				
1865:				    ; code=187, hex=0xBB, ascii="!;"
1866:     -	098B  00      	    defb 00000000b
1867:     -	098C  F0      	    defb 11110000b
1868:     -	098D  10      	    defb 00010000b
1869:     -	098E  D0      	    defb 11010000b
1870:     -	098F  50      	    defb 01010000b
1871:     -	0990  50      	    defb 01010000b
1872:     -	0991  50      	    defb 01010000b
1873:     -	0992  50      	    defb 01010000b
1874:				
1875:				    ; code=188, hex=0xBC, ascii="!<"
1876:     -	0993  50      	    defb 01010000b
1877:     -	0994  D0      	    defb 11010000b
1878:     -	0995  10      	    defb 00010000b
1879:     -	0996  F0      	    defb 11110000b
1880:     -	0997  00      	    defb 00000000b
1881:     -	0998  00      	    defb 00000000b
1882:     -	0999  00      	    defb 00000000b
1883:     -	099A  00      	    defb 00000000b
1884:				
1885:				    ; code=189, hex=0xBD, ascii="!="
1886:     -	099B  50      	    defb 01010000b
1887:     -	099C  50      	    defb 01010000b
1888:     -	099D  50      	    defb 01010000b
1889:     -	099E  F0      	    defb 11110000b
1890:     -	099F  00      	    defb 00000000b
1891:     -	09A0  00      	    defb 00000000b
1892:     -	09A1  00      	    defb 00000000b
1893:     -	09A2  00      	    defb 00000000b
1894:				
1895:				    ; code=190, hex=0xBE, ascii="!>"
1896:     -	09A3  10      	    defb 00010000b
1897:     -	09A4  F0      	    defb 11110000b
1898:     -	09A5  10      	    defb 00010000b
1899:     -	09A6  F0      	    defb 11110000b
1900:     -	09A7  00      	    defb 00000000b
1901:     -	09A8  00      	    defb 00000000b
1902:     -	09A9  00      	    defb 00000000b
1903:     -	09AA  00      	    defb 00000000b
1904:				
1905:				    ; code=191, hex=0xBF, ascii="!?"
1906:     -	09AB  00      	    defb 00000000b
1907:     -	09AC  00      	    defb 00000000b
1908:     -	09AD  00      	    defb 00000000b
1909:     -	09AE  F0      	    defb 11110000b
1910:     -	09AF  10      	    defb 00010000b
1911:     -	09B0  10      	    defb 00010000b
1912:     -	09B1  10      	    defb 00010000b
1913:     -	09B2  10      	    defb 00010000b
1914:				
1915:				    ; code=192, hex=0xC0, ascii="!@"
1916:     -	09B3  10      	    defb 00010000b
1917:     -	09B4  10      	    defb 00010000b
1918:     -	09B5  10      	    defb 00010000b
1919:     -	09B6  1C      	    defb 00011100b
1920:     -	09B7  00      	    defb 00000000b
1921:     -	09B8  00      	    defb 00000000b
1922:     -	09B9  00      	    defb 00000000b
1923:     -	09BA  00      	    defb 00000000b
1924:				
1925:				    ; code=193, hex=0xC1, ascii="!A"
1926:     -	09BB  10      	    defb 00010000b
1927:     -	09BC  10      	    defb 00010000b
1928:     -	09BD  10      	    defb 00010000b
1929:     -	09BE  FC      	    defb 11111100b
1930:     -	09BF  00      	    defb 00000000b
1931:     -	09C0  00      	    defb 00000000b
1932:     -	09C1  00      	    defb 00000000b
1933:     -	09C2  00      	    defb 00000000b
1934:				
1935:				    ; code=194, hex=0xC2, ascii="!B"
1936:     -	09C3  00      	    defb 00000000b
1937:     -	09C4  00      	    defb 00000000b
1938:     -	09C5  00      	    defb 00000000b
1939:     -	09C6  FC      	    defb 11111100b
1940:     -	09C7  10      	    defb 00010000b
1941:     -	09C8  10      	    defb 00010000b
1942:     -	09C9  10      	    defb 00010000b
1943:     -	09CA  10      	    defb 00010000b
1944:				
1945:				    ; code=195, hex=0xC3, ascii="!C"
1946:     -	09CB  10      	    defb 00010000b
1947:     -	09CC  10      	    defb 00010000b
1948:     -	09CD  10      	    defb 00010000b
1949:     -	09CE  1C      	    defb 00011100b
1950:     -	09CF  10      	    defb 00010000b
1951:     -	09D0  10      	    defb 00010000b
1952:     -	09D1  10      	    defb 00010000b
1953:     -	09D2  10      	    defb 00010000b
1954:				
1955:				    ; code=196, hex=0xC4, ascii="!D"
1956:     -	09D3  00      	    defb 00000000b
1957:     -	09D4  00      	    defb 00000000b
1958:     -	09D5  00      	    defb 00000000b
1959:     -	09D6  FC      	    defb 11111100b
1960:     -	09D7  00      	    defb 00000000b
1961:     -	09D8  00      	    defb 00000000b
1962:     -	09D9  00      	    defb 00000000b
1963:     -	09DA  00      	    defb 00000000b
1964:				
1965:				    ; code=197, hex=0xC5, ascii="!E"
1966:     -	09DB  10      	    defb 00010000b
1967:     -	09DC  10      	    defb 00010000b
1968:     -	09DD  10      	    defb 00010000b
1969:     -	09DE  FC      	    defb 11111100b
1970:     -	09DF  10      	    defb 00010000b
1971:     -	09E0  10      	    defb 00010000b
1972:     -	09E1  10      	    defb 00010000b
1973:     -	09E2  10      	    defb 00010000b
1974:				
1975:				    ; code=198, hex=0xC6, ascii="!F"
1976:     -	09E3  10      	    defb 00010000b
1977:     -	09E4  1C      	    defb 00011100b
1978:     -	09E5  10      	    defb 00010000b
1979:     -	09E6  1C      	    defb 00011100b
1980:     -	09E7  10      	    defb 00010000b
1981:     -	09E8  10      	    defb 00010000b
1982:     -	09E9  10      	    defb 00010000b
1983:     -	09EA  10      	    defb 00010000b
1984:				
1985:				    ; code=199, hex=0xC7, ascii="!G"
1986:     -	09EB  50      	    defb 01010000b
1987:     -	09EC  50      	    defb 01010000b
1988:     -	09ED  50      	    defb 01010000b
1989:     -	09EE  5C      	    defb 01011100b
1990:     -	09EF  50      	    defb 01010000b
1991:     -	09F0  50      	    defb 01010000b
1992:     -	09F1  50      	    defb 01010000b
1993:     -	09F2  50      	    defb 01010000b
1994:				
1995:				    ; code=200, hex=0xC8, ascii="!H"
1996:     -	09F3  50      	    defb 01010000b
1997:     -	09F4  5C      	    defb 01011100b
1998:     -	09F5  40      	    defb 01000000b
1999:     -	09F6  7C      	    defb 01111100b
2000:     -	09F7  00      	    defb 00000000b
2001:     -	09F8  00      	    defb 00000000b
2002:     -	09F9  00      	    defb 00000000b
2003:     -	09FA  00      	    defb 00000000b
2004:				
2005:				    ; code=201, hex=0xC9, ascii="!I"
2006:     -	09FB  00      	    defb 00000000b
2007:     -	09FC  7C      	    defb 01111100b
2008:     -	09FD  40      	    defb 01000000b
2009:     -	09FE  5C      	    defb 01011100b
2010:     -	09FF  50      	    defb 01010000b
2011:     -	0A00  50      	    defb 01010000b
2012:     -	0A01  50      	    defb 01010000b
2013:     -	0A02  50      	    defb 01010000b
2014:				
2015:				    ; code=202, hex=0xCA, ascii="!J"
2016:     -	0A03  50      	    defb 01010000b
2017:     -	0A04  DC      	    defb 11011100b
2018:     -	0A05  00      	    defb 00000000b
2019:     -	0A06  FC      	    defb 11111100b
2020:     -	0A07  00      	    defb 00000000b
2021:     -	0A08  00      	    defb 00000000b
2022:     -	0A09  00      	    defb 00000000b
2023:     -	0A0A  00      	    defb 00000000b
2024:				
2025:				    ; code=203, hex=0xCB, ascii="!K"
2026:     -	0A0B  00      	    defb 00000000b
2027:     -	0A0C  FC      	    defb 11111100b
2028:     -	0A0D  00      	    defb 00000000b
2029:     -	0A0E  DC      	    defb 11011100b
2030:     -	0A0F  50      	    defb 01010000b
2031:     -	0A10  50      	    defb 01010000b
2032:     -	0A11  50      	    defb 01010000b
2033:     -	0A12  50      	    defb 01010000b
2034:				
2035:				    ; code=204, hex=0xCC, ascii="!L"
2036:     -	0A13  50      	    defb 01010000b
2037:     -	0A14  5C      	    defb 01011100b
2038:     -	0A15  40      	    defb 01000000b
2039:     -	0A16  5C      	    defb 01011100b
2040:     -	0A17  50      	    defb 01010000b
2041:     -	0A18  50      	    defb 01010000b
2042:     -	0A19  50      	    defb 01010000b
2043:     -	0A1A  50      	    defb 01010000b
2044:				
2045:				    ; code=205, hex=0xCD, ascii="!M"
2046:     -	0A1B  00      	    defb 00000000b
2047:     -	0A1C  FC      	    defb 11111100b
2048:     -	0A1D  00      	    defb 00000000b
2049:     -	0A1E  FC      	    defb 11111100b
2050:     -	0A1F  00      	    defb 00000000b
2051:     -	0A20  00      	    defb 00000000b
2052:     -	0A21  00      	    defb 00000000b
2053:     -	0A22  00      	    defb 00000000b
2054:				
2055:				    ; code=206, hex=0xCE, ascii="!N"
2056:     -	0A23  50      	    defb 01010000b
2057:     -	0A24  DC      	    defb 11011100b
2058:     -	0A25  00      	    defb 00000000b
2059:     -	0A26  DC      	    defb 11011100b
2060:     -	0A27  50      	    defb 01010000b
2061:     -	0A28  50      	    defb 01010000b
2062:     -	0A29  50      	    defb 01010000b
2063:     -	0A2A  50      	    defb 01010000b
2064:				
2065:				    ; code=207, hex=0xCF, ascii="!O"
2066:     -	0A2B  10      	    defb 00010000b
2067:     -	0A2C  FC      	    defb 11111100b
2068:     -	0A2D  00      	    defb 00000000b
2069:     -	0A2E  FC      	    defb 11111100b
2070:     -	0A2F  00      	    defb 00000000b
2071:     -	0A30  00      	    defb 00000000b
2072:     -	0A31  00      	    defb 00000000b
2073:     -	0A32  00      	    defb 00000000b
2074:				
2075:				    ; code=208, hex=0xD0, ascii="!P"
2076:     -	0A33  50      	    defb 01010000b
2077:     -	0A34  50      	    defb 01010000b
2078:     -	0A35  50      	    defb 01010000b
2079:     -	0A36  FC      	    defb 11111100b
2080:     -	0A37  00      	    defb 00000000b
2081:     -	0A38  00      	    defb 00000000b
2082:     -	0A39  00      	    defb 00000000b
2083:     -	0A3A  00      	    defb 00000000b
2084:				
2085:				    ; code=209, hex=0xD1, ascii="!Q"
2086:     -	0A3B  00      	    defb 00000000b
2087:     -	0A3C  FC      	    defb 11111100b
2088:     -	0A3D  00      	    defb 00000000b
2089:     -	0A3E  FC      	    defb 11111100b
2090:     -	0A3F  10      	    defb 00010000b
2091:     -	0A40  10      	    defb 00010000b
2092:     -	0A41  10      	    defb 00010000b
2093:     -	0A42  10      	    defb 00010000b
2094:				
2095:				    ; code=210, hex=0xD2, ascii="!R"
2096:     -	0A43  00      	    defb 00000000b
2097:     -	0A44  00      	    defb 00000000b
2098:     -	0A45  00      	    defb 00000000b
2099:     -	0A46  FC      	    defb 11111100b
2100:     -	0A47  50      	    defb 01010000b
2101:     -	0A48  50      	    defb 01010000b
2102:     -	0A49  50      	    defb 01010000b
2103:     -	0A4A  50      	    defb 01010000b
2104:				
2105:				    ; code=211, hex=0xD3, ascii="!S"
2106:     -	0A4B  50      	    defb 01010000b
2107:     -	0A4C  50      	    defb 01010000b
2108:     -	0A4D  50      	    defb 01010000b
2109:     -	0A4E  7C      	    defb 01111100b
2110:     -	0A4F  00      	    defb 00000000b
2111:     -	0A50  00      	    defb 00000000b
2112:     -	0A51  00      	    defb 00000000b
2113:     -	0A52  00      	    defb 00000000b
2114:				
2115:				    ; code=212, hex=0xD4, ascii="!T"
2116:     -	0A53  10      	    defb 00010000b
2117:     -	0A54  1C      	    defb 00011100b
2118:     -	0A55  10      	    defb 00010000b
2119:     -	0A56  1C      	    defb 00011100b
2120:     -	0A57  00      	    defb 00000000b
2121:     -	0A58  00      	    defb 00000000b
2122:     -	0A59  00      	    defb 00000000b
2123:     -	0A5A  00      	    defb 00000000b
2124:				
2125:				    ; code=213, hex=0xD5, ascii="!U"
2126:     -	0A5B  00      	    defb 00000000b
2127:     -	0A5C  1C      	    defb 00011100b
2128:     -	0A5D  10      	    defb 00010000b
2129:     -	0A5E  1C      	    defb 00011100b
2130:     -	0A5F  10      	    defb 00010000b
2131:     -	0A60  10      	    defb 00010000b
2132:     -	0A61  10      	    defb 00010000b
2133:     -	0A62  10      	    defb 00010000b
2134:				
2135:				    ; code=214, hex=0xD6, ascii="!V"
2136:     -	0A63  00      	    defb 00000000b
2137:     -	0A64  00      	    defb 00000000b
2138:     -	0A65  00      	    defb 00000000b
2139:     -	0A66  7C      	    defb 01111100b
2140:     -	0A67  50      	    defb 01010000b
2141:     -	0A68  50      	    defb 01010000b
2142:     -	0A69  50      	    defb 01010000b
2143:     -	0A6A  50      	    defb 01010000b
2144:				
2145:				    ; code=215, hex=0xD7, ascii="!W"
2146:     -	0A6B  50      	    defb 01010000b
2147:     -	0A6C  50      	    defb 01010000b
2148:     -	0A6D  50      	    defb 01010000b
2149:     -	0A6E  DC      	    defb 11011100b
2150:     -	0A6F  50      	    defb 01010000b
2151:     -	0A70  50      	    defb 01010000b
2152:     -	0A71  50      	    defb 01010000b
2153:     -	0A72  50      	    defb 01010000b
2154:				
2155:				    ; code=216, hex=0xD8, ascii="!X"
2156:     -	0A73  10      	    defb 00010000b
2157:     -	0A74  FC      	    defb 11111100b
2158:     -	0A75  00      	    defb 00000000b
2159:     -	0A76  FC      	    defb 11111100b
2160:     -	0A77  10      	    defb 00010000b
2161:     -	0A78  10      	    defb 00010000b
2162:     -	0A79  10      	    defb 00010000b
2163:     -	0A7A  10      	    defb 00010000b
2164:				
2165:				    ; code=217, hex=0xD9, ascii="!Y"
2166:     -	0A7B  10      	    defb 00010000b
2167:     -	0A7C  10      	    defb 00010000b
2168:     -	0A7D  10      	    defb 00010000b
2169:     -	0A7E  F0      	    defb 11110000b
2170:     -	0A7F  00      	    defb 00000000b
2171:     -	0A80  00      	    defb 00000000b
2172:     -	0A81  00      	    defb 00000000b
2173:     -	0A82  00      	    defb 00000000b
2174:				
2175:				    ; code=218, hex=0xDA, ascii="!Z"
2176:     -	0A83  00      	    defb 00000000b
2177:     -	0A84  00      	    defb 00000000b
2178:     -	0A85  00      	    defb 00000000b
2179:     -	0A86  1C      	    defb 00011100b
2180:     -	0A87  10      	    defb 00010000b
2181:     -	0A88  10      	    defb 00010000b
2182:     -	0A89  10      	    defb 00010000b
2183:     -	0A8A  10      	    defb 00010000b
2184:				
2185:				    ; code=219, hex=0xDB, ascii="!["
2186:     -	0A8B  FC      	    defb 11111100b
2187:     -	0A8C  FC      	    defb 11111100b
2188:     -	0A8D  FC      	    defb 11111100b
2189:     -	0A8E  FC      	    defb 11111100b
2190:     -	0A8F  FC      	    defb 11111100b
2191:     -	0A90  FC      	    defb 11111100b
2192:     -	0A91  FC      	    defb 11111100b
2193:     -	0A92  FC      	    defb 11111100b
2194:				
2195:				    ; code=220, hex=0xDC, ascii="!\"
2196:     -	0A93  00      	    defb 00000000b
2197:     -	0A94  00      	    defb 00000000b
2198:     -	0A95  00      	    defb 00000000b
2199:     -	0A96  00      	    defb 00000000b
2200:     -	0A97  FC      	    defb 11111100b
2201:     -	0A98  FC      	    defb 11111100b
2202:     -	0A99  FC      	    defb 11111100b
2203:     -	0A9A  FC      	    defb 11111100b
2204:				
2205:				    ; code=221, hex=0xDD, ascii="!]"
2206:     -	0A9B  E0      	    defb 11100000b
2207:     -	0A9C  E0      	    defb 11100000b
2208:     -	0A9D  E0      	    defb 11100000b
2209:     -	0A9E  E0      	    defb 11100000b
2210:     -	0A9F  E0      	    defb 11100000b
2211:     -	0AA0  E0      	    defb 11100000b
2212:     -	0AA1  E0      	    defb 11100000b
2213:     -	0AA2  E0      	    defb 11100000b
2214:				
2215:				    ; code=222, hex=0xDE, ascii="!^"
2216:     -	0AA3  1C      	    defb 00011100b
2217:     -	0AA4  1C      	    defb 00011100b
2218:     -	0AA5  1C      	    defb 00011100b
2219:     -	0AA6  1C      	    defb 00011100b
2220:     -	0AA7  1C      	    defb 00011100b
2221:     -	0AA8  1C      	    defb 00011100b
2222:     -	0AA9  1C      	    defb 00011100b
2223:     -	0AAA  1C      	    defb 00011100b
2224:				
2225:				    ; code=223, hex=0xDF, ascii="!_"
2226:     -	0AAB  FC      	    defb 11111100b
2227:     -	0AAC  FC      	    defb 11111100b
2228:     -	0AAD  FC      	    defb 11111100b
2229:     -	0AAE  FC      	    defb 11111100b
2230:     -	0AAF  00      	    defb 00000000b
2231:     -	0AB0  00      	    defb 00000000b
2232:     -	0AB1  00      	    defb 00000000b
2233:     -	0AB2  00      	    defb 00000000b
2234:				
2235:				    ; code=224, hex=0xE0, ascii="!`"
2236:     -	0AB3  00      	    defb 00000000b
2237:     -	0AB4  00      	    defb 00000000b
2238:     -	0AB5  34      	    defb 00110100b
2239:     -	0AB6  48      	    defb 01001000b
2240:     -	0AB7  48      	    defb 01001000b
2241:     -	0AB8  34      	    defb 00110100b
2242:     -	0AB9  00      	    defb 00000000b
2243:     -	0ABA  00      	    defb 00000000b
2244:				
2245:				    ; code=225, hex=0xE1, ascii="!a"
2246:     -	0ABB  00      	    defb 00000000b
2247:     -	0ABC  70      	    defb 01110000b
2248:     -	0ABD  48      	    defb 01001000b
2249:     -	0ABE  70      	    defb 01110000b
2250:     -	0ABF  48      	    defb 01001000b
2251:     -	0AC0  48      	    defb 01001000b
2252:     -	0AC1  70      	    defb 01110000b
2253:     -	0AC2  40      	    defb 01000000b
2254:				
2255:				    ; code=226, hex=0xE2, ascii="!b"
2256:     -	0AC3  78      	    defb 01111000b
2257:     -	0AC4  48      	    defb 01001000b
2258:     -	0AC5  40      	    defb 01000000b
2259:     -	0AC6  40      	    defb 01000000b
2260:     -	0AC7  40      	    defb 01000000b
2261:     -	0AC8  40      	    defb 01000000b
2262:     -	0AC9  40      	    defb 01000000b
2263:     -	0ACA  00      	    defb 00000000b
2264:				
2265:				    ; code=227, hex=0xE3, ascii="!c"
2266:     -	0ACB  00      	    defb 00000000b
2267:     -	0ACC  7C      	    defb 01111100b
2268:     -	0ACD  28      	    defb 00101000b
2269:     -	0ACE  28      	    defb 00101000b
2270:     -	0ACF  28      	    defb 00101000b
2271:     -	0AD0  28      	    defb 00101000b
2272:     -	0AD1  28      	    defb 00101000b
2273:     -	0AD2  00      	    defb 00000000b
2274:				
2275:				    ; code=228, hex=0xE4, ascii="!d"
2276:     -	0AD3  78      	    defb 01111000b
2277:     -	0AD4  48      	    defb 01001000b
2278:     -	0AD5  20      	    defb 00100000b
2279:     -	0AD6  10      	    defb 00010000b
2280:     -	0AD7  20      	    defb 00100000b
2281:     -	0AD8  48      	    defb 01001000b
2282:     -	0AD9  78      	    defb 01111000b
2283:     -	0ADA  00      	    defb 00000000b
2284:				
2285:				    ; code=229, hex=0xE5, ascii="!e"
2286:     -	0ADB  00      	    defb 00000000b
2287:     -	0ADC  00      	    defb 00000000b
2288:     -	0ADD  3C      	    defb 00111100b
2289:     -	0ADE  48      	    defb 01001000b
2290:     -	0ADF  48      	    defb 01001000b
2291:     -	0AE0  30      	    defb 00110000b
2292:     -	0AE1  00      	    defb 00000000b
2293:     -	0AE2  00      	    defb 00000000b
2294:				
2295:				    ; code=230, hex=0xE6, ascii="!f"
2296:     -	0AE3  00      	    defb 00000000b
2297:     -	0AE4  00      	    defb 00000000b
2298:     -	0AE5  48      	    defb 01001000b
2299:     -	0AE6  48      	    defb 01001000b
2300:     -	0AE7  48      	    defb 01001000b
2301:     -	0AE8  70      	    defb 01110000b
2302:     -	0AE9  40      	    defb 01000000b
2303:     -	0AEA  40      	    defb 01000000b
2304:				
2305:				    ; code=231, hex=0xE7, ascii="!g"
2306:     -	0AEB  00      	    defb 00000000b
2307:     -	0AEC  00      	    defb 00000000b
2308:     -	0AED  28      	    defb 00101000b
2309:     -	0AEE  50      	    defb 01010000b
2310:     -	0AEF  10      	    defb 00010000b
2311:     -	0AF0  10      	    defb 00010000b
2312:     -	0AF1  10      	    defb 00010000b
2313:     -	0AF2  00      	    defb 00000000b
2314:				
2315:				    ; code=232, hex=0xE8, ascii="!h"
2316:     -	0AF3  38      	    defb 00111000b
2317:     -	0AF4  10      	    defb 00010000b
2318:     -	0AF5  38      	    defb 00111000b
2319:     -	0AF6  44      	    defb 01000100b
2320:     -	0AF7  38      	    defb 00111000b
2321:     -	0AF8  10      	    defb 00010000b
2322:     -	0AF9  38      	    defb 00111000b
2323:     -	0AFA  00      	    defb 00000000b
2324:				
2325:				    ; code=233, hex=0xE9, ascii="!i"
2326:     -	0AFB  30      	    defb 00110000b
2327:     -	0AFC  48      	    defb 01001000b
2328:     -	0AFD  48      	    defb 01001000b
2329:     -	0AFE  78      	    defb 01111000b
2330:     -	0AFF  48      	    defb 01001000b
2331:     -	0B00  48      	    defb 01001000b
2332:     -	0B01  30      	    defb 00110000b
2333:     -	0B02  00      	    defb 00000000b
2334:				
2335:				    ; code=234, hex=0xEA, ascii="!j"
2336:     -	0B03  00      	    defb 00000000b
2337:     -	0B04  38      	    defb 00111000b
2338:     -	0B05  44      	    defb 01000100b
2339:     -	0B06  44      	    defb 01000100b
2340:     -	0B07  28      	    defb 00101000b
2341:     -	0B08  28      	    defb 00101000b
2342:     -	0B09  6C      	    defb 01101100b
2343:     -	0B0A  00      	    defb 00000000b
2344:				
2345:				    ; code=235, hex=0xEB, ascii="!k"
2346:     -	0B0B  30      	    defb 00110000b
2347:     -	0B0C  40      	    defb 01000000b
2348:     -	0B0D  20      	    defb 00100000b
2349:     -	0B0E  10      	    defb 00010000b
2350:     -	0B0F  38      	    defb 00111000b
2351:     -	0B10  48      	    defb 01001000b
2352:     -	0B11  30      	    defb 00110000b
2353:     -	0B12  00      	    defb 00000000b
2354:				
2355:				    ; code=236, hex=0xEC, ascii="!l"
2356:     -	0B13  00      	    defb 00000000b
2357:     -	0B14  00      	    defb 00000000b
2358:     -	0B15  28      	    defb 00101000b
2359:     -	0B16  54      	    defb 01010100b
2360:     -	0B17  54      	    defb 01010100b
2361:     -	0B18  28      	    defb 00101000b
2362:     -	0B19  00      	    defb 00000000b
2363:     -	0B1A  00      	    defb 00000000b
2364:				
2365:				    ; code=237, hex=0xED, ascii="!m"
2366:     -	0B1B  00      	    defb 00000000b
2367:     -	0B1C  10      	    defb 00010000b
2368:     -	0B1D  38      	    defb 00111000b
2369:     -	0B1E  54      	    defb 01010100b
2370:     -	0B1F  54      	    defb 01010100b
2371:     -	0B20  38      	    defb 00111000b
2372:     -	0B21  10      	    defb 00010000b
2373:     -	0B22  00      	    defb 00000000b
2374:				
2375:				    ; code=238, hex=0xEE, ascii="!n"
2376:     -	0B23  00      	    defb 00000000b
2377:     -	0B24  38      	    defb 00111000b
2378:     -	0B25  40      	    defb 01000000b
2379:     -	0B26  78      	    defb 01111000b
2380:     -	0B27  40      	    defb 01000000b
2381:     -	0B28  38      	    defb 00111000b
2382:     -	0B29  00      	    defb 00000000b
2383:     -	0B2A  00      	    defb 00000000b
2384:				
2385:				    ; code=239, hex=0xEF, ascii="!o"
2386:     -	0B2B  00      	    defb 00000000b
2387:     -	0B2C  30      	    defb 00110000b
2388:     -	0B2D  48      	    defb 01001000b
2389:     -	0B2E  48      	    defb 01001000b
2390:     -	0B2F  48      	    defb 01001000b
2391:     -	0B30  48      	    defb 01001000b
2392:     -	0B31  00      	    defb 00000000b
2393:     -	0B32  00      	    defb 00000000b
2394:				
2395:				    ; code=240, hex=0xF0, ascii="!p"
2396:     -	0B33  00      	    defb 00000000b
2397:     -	0B34  78      	    defb 01111000b
2398:     -	0B35  00      	    defb 00000000b
2399:     -	0B36  78      	    defb 01111000b
2400:     -	0B37  00      	    defb 00000000b
2401:     -	0B38  78      	    defb 01111000b
2402:     -	0B39  00      	    defb 00000000b
2403:     -	0B3A  00      	    defb 00000000b
2404:				
2405:				    ; code=241, hex=0xF1, ascii="!q"
2406:     -	0B3B  00      	    defb 00000000b
2407:     -	0B3C  10      	    defb 00010000b
2408:     -	0B3D  38      	    defb 00111000b
2409:     -	0B3E  10      	    defb 00010000b
2410:     -	0B3F  00      	    defb 00000000b
2411:     -	0B40  38      	    defb 00111000b
2412:     -	0B41  00      	    defb 00000000b
2413:     -	0B42  00      	    defb 00000000b
2414:				
2415:				    ; code=242, hex=0xF2, ascii="!r"
2416:     -	0B43  40      	    defb 01000000b
2417:     -	0B44  30      	    defb 00110000b
2418:     -	0B45  08      	    defb 00001000b
2419:     -	0B46  30      	    defb 00110000b
2420:     -	0B47  40      	    defb 01000000b
2421:     -	0B48  00      	    defb 00000000b
2422:     -	0B49  78      	    defb 01111000b
2423:     -	0B4A  00      	    defb 00000000b
2424:				
2425:				    ; code=243, hex=0xF3, ascii="!s"
2426:     -	0B4B  08      	    defb 00001000b
2427:     -	0B4C  30      	    defb 00110000b
2428:     -	0B4D  40      	    defb 01000000b
2429:     -	0B4E  30      	    defb 00110000b
2430:     -	0B4F  08      	    defb 00001000b
2431:     -	0B50  00      	    defb 00000000b
2432:     -	0B51  78      	    defb 01111000b
2433:     -	0B52  00      	    defb 00000000b
2434:				
2435:				    ; code=244, hex=0xF4, ascii="!t"
2436:     -	0B53  00      	    defb 00000000b
2437:     -	0B54  08      	    defb 00001000b
2438:     -	0B55  14      	    defb 00010100b
2439:     -	0B56  10      	    defb 00010000b
2440:     -	0B57  10      	    defb 00010000b
2441:     -	0B58  10      	    defb 00010000b
2442:     -	0B59  10      	    defb 00010000b
2443:     -	0B5A  10      	    defb 00010000b
2444:				
2445:				    ; code=245, hex=0xF5, ascii="!u"
2446:     -	0B5B  10      	    defb 00010000b
2447:     -	0B5C  10      	    defb 00010000b
2448:     -	0B5D  10      	    defb 00010000b
2449:     -	0B5E  10      	    defb 00010000b
2450:     -	0B5F  10      	    defb 00010000b
2451:     -	0B60  50      	    defb 01010000b
2452:     -	0B61  20      	    defb 00100000b
2453:     -	0B62  00      	    defb 00000000b
2454:				
2455:				    ; code=246, hex=0xF6, ascii="!v"
2456:     -	0B63  00      	    defb 00000000b
2457:     -	0B64  10      	    defb 00010000b
2458:     -	0B65  00      	    defb 00000000b
2459:     -	0B66  7C      	    defb 01111100b
2460:     -	0B67  00      	    defb 00000000b
2461:     -	0B68  10      	    defb 00010000b
2462:     -	0B69  00      	    defb 00000000b
2463:     -	0B6A  00      	    defb 00000000b
2464:				
2465:				    ; code=247, hex=0xF7, ascii="!w"
2466:     -	0B6B  00      	    defb 00000000b
2467:     -	0B6C  28      	    defb 00101000b
2468:     -	0B6D  50      	    defb 01010000b
2469:     -	0B6E  00      	    defb 00000000b
2470:     -	0B6F  28      	    defb 00101000b
2471:     -	0B70  50      	    defb 01010000b
2472:     -	0B71  00      	    defb 00000000b
2473:     -	0B72  00      	    defb 00000000b
2474:				
2475:				    ; code=248, hex=0xF8, ascii="!x"
2476:     -	0B73  30      	    defb 00110000b
2477:     -	0B74  48      	    defb 01001000b
2478:     -	0B75  48      	    defb 01001000b
2479:     -	0B76  30      	    defb 00110000b
2480:     -	0B77  00      	    defb 00000000b
2481:     -	0B78  00      	    defb 00000000b
2482:     -	0B79  00      	    defb 00000000b
2483:     -	0B7A  00      	    defb 00000000b
2484:				
2485:				    ; code=249, hex=0xF9, ascii="!y"
2486:     -	0B7B  00      	    defb 00000000b
2487:     -	0B7C  00      	    defb 00000000b
2488:     -	0B7D  00      	    defb 00000000b
2489:     -	0B7E  30      	    defb 00110000b
2490:     -	0B7F  30      	    defb 00110000b
2491:     -	0B80  00      	    defb 00000000b
2492:     -	0B81  00      	    defb 00000000b
2493:     -	0B82  00      	    defb 00000000b
2494:				
2495:				    ; code=250, hex=0xFA, ascii="!z"
2496:     -	0B83  00      	    defb 00000000b
2497:     -	0B84  00      	    defb 00000000b
2498:     -	0B85  00      	    defb 00000000b
2499:     -	0B86  20      	    defb 00100000b
2500:     -	0B87  00      	    defb 00000000b
2501:     -	0B88  00      	    defb 00000000b
2502:     -	0B89  00      	    defb 00000000b
2503:     -	0B8A  00      	    defb 00000000b
2504:				
2505:				    ; code=251, hex=0xFB, ascii="!{"
2506:     -	0B8B  00      	    defb 00000000b
2507:     -	0B8C  1C      	    defb 00011100b
2508:     -	0B8D  10      	    defb 00010000b
2509:     -	0B8E  10      	    defb 00010000b
2510:     -	0B8F  50      	    defb 01010000b
2511:     -	0B90  50      	    defb 01010000b
2512:     -	0B91  20      	    defb 00100000b
2513:     -	0B92  00      	    defb 00000000b
2514:				
2515:				    ; code=252, hex=0xFC, ascii="!|"
2516:     -	0B93  50      	    defb 01010000b
2517:     -	0B94  28      	    defb 00101000b
2518:     -	0B95  28      	    defb 00101000b
2519:     -	0B96  28      	    defb 00101000b
2520:     -	0B97  00      	    defb 00000000b
2521:     -	0B98  00      	    defb 00000000b
2522:     -	0B99  00      	    defb 00000000b
2523:     -	0B9A  00      	    defb 00000000b
2524:				
2525:				    ; code=253, hex=0xFD, ascii="!}"
2526:     -	0B9B  60      	    defb 01100000b
2527:     -	0B9C  10      	    defb 00010000b
2528:     -	0B9D  20      	    defb 00100000b
2529:     -	0B9E  70      	    defb 01110000b
2530:     -	0B9F  00      	    defb 00000000b
2531:     -	0BA0  00      	    defb 00000000b
2532:     -	0BA1  00      	    defb 00000000b
2533:     -	0BA2  00      	    defb 00000000b
2534:				
2535:				    ; code=254, hex=0xFE, ascii="!~"
2536:     -	0BA3  00      	    defb 00000000b
2537:     -	0BA4  00      	    defb 00000000b
2538:     -	0BA5  78      	    defb 01111000b
2539:     -	0BA6  78      	    defb 01111000b
2540:     -	0BA7  78      	    defb 01111000b
2541:     -	0BA8  78      	    defb 01111000b
2542:     -	0BA9  00      	    defb 00000000b
2543:     -	0BAA  00      	    defb 00000000b
2544:				
2545:				    ; code=255, hex=0xFF, ascii="!^"
2546:     -	0BAB  00      	    defb 00000000b
2547:     -	0BAC  00      	    defb 00000000b
2548:     -	0BAD  00      	    defb 00000000b
2549:     -	0BAE  00      	    defb 00000000b
2550:     -	0BAF  00      	    defb 00000000b
2551:     -	0BB0  00      	    defb 00000000b
2552:     -	0BB1  00      	    defb 00000000b
**** include/vdptext.s ****
 201:     -	0BB2  00      	    defb 00000000b
 202:				
 203:				
 204:				
 205:				; b contains x
 206:				; c contains y
 207:     -	0BB3          	vdp_cursor_set:
 208: 4321+4	0BB3  78      	    ld a, b
 209: 4325+13	0BB4  320240  	    ld (var_curserx),a
 210: 4338+4	0BB7  79      	    ld a,c
 211: 4342+13	0BB8  320340  	    ld (var_cursery),a
 212: 4355+10	0BBB  C9      	    ret
 213:				
 214:     -	0BBC          	vdp_cursor_move:
 215: 4365+11	0BBC  E5      	    push hl
 216: 4376+11	0BBD  D5      	    push de
 217: 4387+10	0BBE  210000  	    ld hl,0
 218: 4397+7	0BC1  1600    	    ld d,0
 219: 4404+13	0BC3  3A0340  	    ld a,(var_cursery)
 220: 4417+4	0BC6  5F      	    ld e,a
 221: 4421+11	0BC7  19      	    add hl,de   ;  Y x 1
 222: 4432+11	0BC8  29      	    add hl,hl   ;x2
 223: 4443+11	0BC9  29      	    add hl,hl   ;x4
 224: 4454+11	0BCA  19      	    add hl,de   ;x5
 225: 4465+11	0BCB  29      	    add hl, hl  ;x10
 226: 4476+11	0BCC  29      	    add hl, hl  ;x20
 227: 4487+11	0BCD  29      	    add hl, hl  ;x40 
 228: 4498+13	0BCE  3A0240  	    ld a,(var_curserx)
 229: 4511+4	0BD1  5F      	    ld e,a
 230: 4515+11	0BD2  19      	    add hl,de   ;add x
 231: 4526+10	0BD3  110038  	    ld de, TmsNameLoc
 232: 4536+11	0BD6  19      	    add hl,de   ;add table offset
 233: 4547+4	0BD7  7D      	    ld a,l
 234: 4551+11	0BD8  D381    	    out (VDP_REG),a
 235: 4562+4	0BDA  7C      	    ld a,h
 236: 4566+7	0BDB  F640    	    or 0x40
 237: 4573+11	0BDD  D381    	    out (VDP_REG),a
 238: 4584+10	0BDF  D1      	    pop de
 239: 4594+10	0BE0  E1      	    pop hl
 240: 4604+10	0BE1  C9      	    ret
 241:				
 242:				; HL contains address
 243:     -	0BE2          	vdp_address:
 244: 4614+4	0BE2  7D      	    ld a,l
 245: 4618+11	0BE3  D381    	    out (VDP_REG),a
 246: 4629+4	0BE5  7C      	    ld a,h
 247: 4633+7	0BE6  F640    	    or 0x40
 248: 4640+11	0BE8  D381    	    out (VDP_REG),a  
 249: 4651+10	0BEA  C9      	    ret
 250:				
 251:     -	0BEB          	vdp_char:
 252: 4661+11	0BEB  F5      	    push af             ;store to-print char
 253: 4672+13	0BEC  3A0240  	    ld a,(var_curserx)  ;load x
 254: 4685+7	0BEF  FE28    	    cp 40               ;if eol reached
 255: 4692+7+5	0BF1  280B    	    jr z,vdp_char_nl     
 256: 4699+4	0BF3  3C      	    inc a               ;else incerment
 257: 4703+13	0BF4  320240  	    ld (var_curserx),a  ;and store
 258: 4716+10	0BF7  F1      	    pop af              ;print char
 259: 4726+11	0BF8  D380    	    out (VDP_MEM),a
 260: 4737+17	0BFA  CD8303  	    call vdp_wait
 261: 4754+10	0BFD  C9      	    ret
 262:     -	0BFE          	vdp_char_nl:    ;new line
 263: 4764+4	0BFE  AF      	    xor a               ;reset x pos
 264: 4768+13	0BFF  320240  	    ld (var_curserx),a  ;
 265: 4781+13	0C02  3A0340  	    ld a,(var_cursery)
 266: 4794+7	0C05  FE18    	    cp 24
 267: 4801+7+5	0C07  280B    	    jr z,vdp_char_scroll
 268: 4808+4	0C09  3C      	    inc a
 269: 4812+13	0C0A  320340  	    ld (var_cursery),a  
 270: 4825+10	0C0D  F1      	    pop af              ;print char
 271: 4835+11	0C0E  D380    	    out (VDP_MEM),a
 272: 4846+17	0C10  CD8303  	    call vdp_wait
 273: 4863+10	0C13  C9      	    ret
 274:     -	0C14          	vdp_char_scroll:    ;last line full -> scroll
 275: 4873+17	0C14  CD2A0C  	    call vdp_scroll
 276: 4890+4	0C17  AF      	    xor a               
 277: 4894+13	0C18  320240  	    ld (var_curserx),a  
 278: 4907+7	0C1B  3E17    	    ld a,23
 279: 4914+13	0C1D  320340  	    ld (var_cursery),a  
 280: 4927+17	0C20  CDBC0B  	    call vdp_cursor_move
 281: 4944+10	0C23  F1      	    pop af              ;print char
 282: 4954+11	0C24  D380    	    out (VDP_MEM),a
 283: 4965+17	0C26  CD8303  	    call vdp_wait
 284: 4982+10	0C29  C9      	    ret
 285:				
 286:     -	0C2A          	vdp_scroll:
 287: 4992+11	0C2A  E5      	    push hl
 288: 5003+11	0C2B  C5      	    push bc
 289: 5014+11	0C2C  D5      	    push de
 290:				    ;BC = first position (dest)
 291:				    ;HL = second position (src)
 292: 5025+10	0C2D  010038  	    ld bc, TmsNameLoc    ; load start of text-buffer (name table) into reg bc
 293:     -	0C30          	vdp_scroll_line:
 294: 5035+4	0C30  60      	    ld h,b
 295: 5039+4	0C31  69      	    ld l,c
 296:				
 297: 5043+10	0C32  112800  	    ld de, 40   ; line width
 298: 5053+11	0C35  19      	    add hl, de  ;HL is now the second position
 299:				
 300: 5064+4	0C36  7D      	    ld a,l          ; setup VDP address
 301: 5068+11	0C37  D381    	    out (VDP_REG),a
 302: 5079+4	0C39  7C      	    ld a,h
 303: 5083+7	0C3A  E63F    	    and 3fh
 304: 5090+11	0C3C  D381    	    out (VDP_REG),a
 305: 5101+17	0C3E  CD8303  	    call vdp_wait
 306: 5118+11	0C41  DB80    	    in a, (VDP_MEM)    ; read byte
 307: 5129+11	0C43  F5      	    push af
 308:				
 309: 5140+4	0C44  79      	    ld a,c          ; setup VDP address
 310: 5144+11	0C45  D381    	    out (VDP_REG),a
 311: 5155+4	0C47  78      	    ld a,b
 312: 5159+7	0C48  E63F    	    and 3fh         
 313: 5166+7	0C4A  F640    	    or 40h          ; write bit
 314: 5173+11	0C4C  D381    	    out (VDP_REG),a
 315: 5184+10	0C4E  F1      	    pop af
 316: 5194+17	0C4F  CD8303  	    call vdp_wait
 317: 5211+11	0C52  D380    	    out (VDP_MEM),a
 318:				
 319: 5222+6	0C54  03      	    inc bc
 320:				
 321: 5228+4	0C55  60      	    ld h,b
 322: 5232+4	0C56  69      	    ld l,c
 323: 5236+10	0C57  11C03B  	    ld de, TmsNameLoc + 960    ; buffer end
 324: 5246+15	0C5A  ED52    	    sbc hl, de
 325:				
 326: 5261+10	0C5C  C2300C  	    jp nz, vdp_scroll_line
 327:				
 328:     -	0C5F          	vdp_scroll_clear_l24:
 329: 5271+10	0C5F  01983B  	    ld bc, TmsNameLoc + 920
 330:     -	0C62          	vdp_scroll_clear_l24_loop:
 331:				
 332: 5281+4	0C62  79      	    ld a,c          ; setup VDP addressh
 333: 5285+11	0C63  D381    	    out (VDP_REG),a
 334: 5296+4	0C65  78      	    ld a,b
 335: 5300+7	0C66  E63F    	    and 3fh         
 336: 5307+7	0C68  F640    	    or 40h          ; write bit
 337: 5314+11	0C6A  D381    	    out (VDP_REG),a
 338: 5325+7	0C6C  3E20    	    ld a, ' '
 339: 5332+11	0C6E  D380    	    out (VDP_MEM),a
 340: 5343+17	0C70  CD8303  	    call vdp_wait
 341:				
 342: 5360+6	0C73  03      	    inc bc
 343: 5366+4	0C74  60      	    ld h,b
 344: 5370+4	0C75  69      	    ld l,c
 345: 5374+10	0C76  11C03B  	    ld de, TmsNameLoc + 960   ; buffer end
 346: 5384+15	0C79  ED52    	    sbc hl, de
 347:				
 348: 5399+10	0C7B  C2620C  	    jp nz, vdp_scroll_clear_l24_loop
 349:				
 350: 5409+10	0C7E  D1      	    pop de
 351: 5419+10	0C7F  C1      	    pop bc
 352: 5429+10	0C80  E1      	    pop hl
 353: 5439+10	0C81  C9      	    ret
 354:				
 355:				
 356:     -	0C82          	vdp_im2_pos:
 357: 5449+11	0C82  E5      	    push hl
 358: 5460+11	0C83  D5      	    push de
 359: 5471+10	0C84  210000  	    ld hl,0
 360: 5481+7	0C87  1600    	    ld d,0
 361: 5488+13	0C89  3A0340  	    ld a,(var_cursery)
 362: 5501+4	0C8C  5F      	    ld e,a
 363: 5505+11	0C8D  19      	    add hl,de   ;  Y x 1
 364: 5516+11	0C8E  29      	    add hl,hl   ;x2
 365: 5527+11	0C8F  29      	    add hl,hl   ;x4
 366: 5538+11	0C90  29      	    add hl,hl   ;x8
 367: 5549+11	0C91  29      	    add hl,hl   ;x16
 368: 5560+11	0C92  29      	    add hl,hl   ;x32 
 369: 5571+13	0C93  3A0240  	    ld a,(var_curserx)
 370: 5584+4	0C96  5F      	    ld e,a
 371: 5588+11	0C97  19      	    add hl,de   ;add x
 372: 5599+10	0C98  110038  	    ld de, TmsNameLoc
 373: 5609+11	0C9B  19      	    add hl,de   ;add table offset
 374: 5620+4	0C9C  7D      	    ld a,l
 375: 5624+11	0C9D  D381    	    out (VDP_REG),a
 376: 5635+4	0C9F  7C      	    ld a,h
 377: 5639+7	0CA0  F640    	    or 0x40
 378: 5646+11	0CA2  D381    	    out (VDP_REG),a
 379: 5657+10	0CA4  D1      	    pop de
 380: 5667+10	0CA5  E1      	    pop hl
**** main.asm ****
 393: 5677+10	0CA6  C9      	    ret
 394:				.include "ps2.s"
**** include/ps2.s ****
   1:				;PS2 Implementation
   2:				;PIO1 Port C has PS2 Pins
   3:				;C/0 -> INPUT   CLK
   4:				;C/1 -> INPUT   DATA
   5:				;C/2 -> OUTPUT  CLK_LOW (ACTIVE_LOW)
   6:				;C/3 -> OUTPUT  DATA_LOW (ACTIVE_LOW)
   7:				;DATA and CLK are pulled high via 4.7k resistor
   8:				;C/4-7 are unused
   9:				
  10:     -	4014          	var_ps2_timeout equ var_ps2mem  ;16bit integer
  11:     -	4016          	var_ps2_state   equ var_ps2mem+2    ;8bit status code
  12:     -	4017          	var_ps2_led     equ var_ps2mem+3    ;8bit status code
  13:     -	4018          	var_ps2_err     equ var_ps2mem+4    ;8bit error code
  14:				
  15:     -	00D0          	ps2_err_timeout equ 0xD0
  16:     -	00D1          	ps2_err_parity  equ 0xD1
  17:     -	00D2          	ps2_err_unexpected equ 0xD2
  18:     -	0000          	ps2_ok          equ 0x00
  19:				;-------------------------------------------------------
  20:				; Wait for clock states
  21:				;-------------------------------------------------------
  22:				; Z-Flag is set if timeout
  23:				; Z-Flag is reset in level is detected
  24:				
  25:     -	0CA7          	keyboard_wait_clk_high:             ;wait until high
  26: 5687+13	0CA7  3A1440  	    ld a,(var_ps2_timeout) 
  27: 5700+4	0CAA  57      	    ld d,a
  28:     -	0CAB          	keyboard_wait_clk_high_loop:    ;39 T-States
  29: 5704+4	0CAB  15      	    dec d                      ;increment loop counter  ;4  
  30: 5708+7+5	0CAC  2819    	    jr z, keyboard_wait_timout  ;if equal -> timout     ;7
  31:				
  32: 5715+11	0CAE  DB66    	    in a,(IO_PIO_1_B_D)         ;else continue wait     ;11
  33: 5726+7	0CB0  E601    	    and 0x01                                            ;7
  34: 5733+10	0CB2  CAAB0C  	    jp z,keyboard_wait_clk_high_loop                    ;10
  35:				
  36:				    ;or 1    ;reset zero flag not needed because of jump condition
  37: 5743+10	0CB5  C9      	    ret
  38:				
  39:     -	0CB6          	keyboard_wait_clk_low:             ;wait until high
  40: 5753+13	0CB6  3A1440  	    ld a,(var_ps2_timeout) 
  41: 5766+4	0CB9  57      	    ld d,a
  42:				    
  43:     -	0CBA          	keyboard_wait_clk_low_loop:
  44: 5770+4	0CBA  15      	    dec d                      ;increment loop counter  ;4  
  45: 5774+7+5	0CBB  280A    	    jr z, keyboard_wait_timout  ;if equal -> timout     ;7
  46:				
  47: 5781+11	0CBD  DB66    	    in a,(IO_PIO_1_B_D)         ;else continue wait
  48: 5792+7	0CBF  E601    	    and 0x01
  49: 5799+10	0CC1  C2BA0C  	    jp nz,keyboard_wait_clk_low_loop
  50:				
  51: 5809+7	0CC4  F601    	    or 1    ;reset zero flag
  52: 5816+10	0CC6  C9      	    ret
  53:				
  54:				
  55:     -	0CC7          	keyboard_wait_timout:
  56: 5826+7	0CC7  3ED0    	    ld a, ps2_err_timeout
  57: 5833+13	0CC9  321840  	    ld (var_ps2_err),a
  58: 5846+4	0CCC  BF      	    cp a    ;set zero flag
  59: 5850+10	0CCD  C9      	    ret
  60:				
  61:				
  62:     -	0CCE          	keyboard_wait_clk_rising:
  63: 5860+17	0CCE  CDB60C  	    call keyboard_wait_clk_low
  64: 5877+5+6	0CD1  C8      	    ret z
  65: 5882+17	0CD2  CDA70C  	    call keyboard_wait_clk_high
  66: 5899+10	0CD5  C9      	    ret
  67:     -	0CD6          	keyboard_wait_clk_falling:
  68: 5909+17	0CD6  CDA70C  	    call keyboard_wait_clk_high
  69: 5926+5+6	0CD9  C8      	    ret z
  70: 5931+17	0CDA  CDB60C  	    call keyboard_wait_clk_low
  71: 5948+10	0CDD  C9      	    ret
  72:				;-------------------------------------------------------
  73:				; Keyboard initialization
  74:				;-------------------------------------------------------
  75:     -	0CDE          	keyboard_init_io:   ;called befor VDP init
  76: 5958+7	0CDE  3ECF    	    ld a, 0xCF  ;controll word: Set mode 3 (no interrupts)
  77: 5965+11	0CE0  D367    	    out (IO_PIO_1_B_C), a
  78: 5976+7	0CE2  3E03    	    ld a, 0x03  ;bit mask: 1 and 2 input, rest output (I/!O)
  79: 5983+11	0CE4  D367    	    out (IO_PIO_1_B_C), a
  80:				
  81: 5994+7	0CE6  3E00    	    ld a, 0x00  ; CLK_LOW, DATA_LOW pulldown (RX enable)
  82: 6001+11	0CE8  D366    	    out (IO_PIO_1_B_D), a
  83: 6012+10	0CEA  C9      	    ret
  84:				
  85:     -	0CEB          	keyboard_init:      ;called after VDP init
  86: 6022+4	0CEB  AF      	    xor a
  87: 6026+13	0CEC  321640  	    ld (var_ps2_state),a
  88: 6039+13	0CEF  321840  	    ld (var_ps2_err),a
  89: 6052+13	0CF2  321740  	    ld (var_ps2_led),a
  90: 6065+7	0CF5  3EFF    	    ld a,255
  91: 6072+13	0CF7  321440  	    ld (var_ps2_timeout),a
  92:				
  93: 6085+7	0CFA  3EFF    	    ld a, 0xFF  ;Reset KB
  94: 6092+17	0CFC  CD1B0E  	    call keyboard_send_wrapper
  95:				
  96:				
  97:     -	0CFF          	keyboard_init_wait: ;wait until KB is ready
  98: 6109+17	0CFF  CD610D  	    call keyboard_read 
  99: 6126+7	0D02  FEAA    	    cp 0xAA
 100: 6133+7+5	0D04  20F9    	    jr nz, keyboard_init_wait
 101:				
 102:				    ;set leds
 103: 6140+7	0D06  3EED    	    ld a, 0xED 
 104: 6147+17	0D08  CD1B0E  	    call keyboard_send_wrapper
 105:				
 106: 6164+7	0D0B  3E04    	    ld a, 0x04
 107: 6171+17	0D0D  CD1B0E  	    call keyboard_send_wrapper
 108:				
 109:				
 110:     -	0D10          	keyboard_init_okay:
 111: 6188+17	0D10  CD4302  	    call print_newLine
 112: 6205+10	0D13  21240D  	    ld hl, [STR_keyboard_init_okay]
 113: 6215+17	0D16  CD3702  	    call print_str
 114: 6232+10	0D19  C9      	    ret
 115:				
 116:     -	0D1A          	keyboard_init_err:
 117: 6242+17	0D1A  CD4302  	    call print_newLine
 118: 6259+10	0D1D  213F0D  	    ld hl, [STR_keyboard_init_err]
 119: 6269+17	0D20  CD3702  	    call print_str
 120: 6286+4	0D23  76      	    halt
 121:				
 122:     -	0D24          	STR_keyboard_init_okay:
 123:     -	0D24  50532F32	    db "PS/2 Keyboard initialized.",0
	              204B6579
	              626F6172
	              6420696E
	              69746961
	              6C697A65
	              642E00
 124:     -	0D3F          	STR_keyboard_init_err:
 125:     -	0D3F  50532F32	    db "PS/2 Keyboard error! System HALT!",0
	              204B6579
	              626F6172
	              64206572
	              726F7221
	              20537973
	              74656D20
	              48414C54
	              2100
 126:				
 127:				
 128:				;-------------------------------------------------------
 129:				; Keyboard Read
 130:				;-------------------------------------------------------
 131:				
 132:				; a contains result
 133:     -	0D61          	keyboard_read:
 134: 6290+4	0D61  AF      	    xor a
 135: 6294+13	0D62  321840  	    ld (var_ps2_err),a  ;reset error code
 136: 6307+17	0D65  CD130E  	    call keyboard_on
 137: 6324+17	0D68  CDD60C  	    call keyboard_wait_clk_falling
 138: 6341+10	0D6B  CADA0D  	    jp z, keyboard_read_null   ;timeout condition -> no message received
 139: 6351+11	0D6E  DB66    	    in a,(IO_PIO_1_B_D) ;read data bit
 140: 6362+7	0D70  E602    	    and 0x02
 141: 6369+10	0D72  C2C60D  	    jp nz, keyboard_read_fault_byte  ;if startbit not 0 then fault
 142: 6379+7	0D75  0680    	    ld b,0x80      ;b is buffer for input data
 143: 6386+7	0D77  0E00    	    ld c,0          ;parity counter
 144:     -	0D79          	keyboard_read_loop:
 145: 6393+17	0D79  CDD60C  	    call keyboard_wait_clk_falling
 146: 6410+10	0D7C  CACD0D  	    jp z, keyboard_read_fault   ;timeout condition
 147: 6420+11	0D7F  DB66    	    in a,(IO_PIO_1_B_D) ;read data bit
 148: 6431+4	0D81  0F      	    rrca        ;carry now contains the clock bit
 149: 6435+4	0D82  0F      	    rrca        ;carry now contains the received bit
 150: 6439+7+5	0D83  3002    	    jr nc, keyboard_read_loop_odd
 151: 6446+4	0D85  0C      	    inc c   ;if positiv bit, incement parity counter
 152: 6450+4	0D86  37      	    scf     ;preserver carry flag
 153:     -	0D87          	keyboard_read_loop_odd:
 154: 6454+4	0D87  78      	    ld a,b      ;load buffer in a
 155: 6458+4	0D88  1F      	    rra         ;carry bit is now appended to buffer
 156: 6462+4	0D89  47      	    ld b,a      ;store a to buffer
 157: 6466+10	0D8A  D2790D  	    jp nc, keyboard_read_loop   ;repeat for 8 times
 158:     -	0D8D          	keyboard_read_parity:
 159: 6476+17	0D8D  CDD60C  	    call keyboard_wait_clk_falling
 160: 6493+10	0D90  CACD0D  	    jp z, keyboard_read_fault   ;timeout condition
 161: 6503+4	0D93  79      	    ld a,c  ;load parity counter to a and calculate parity
 162: 6507+4	0D94  1F      	    rra     ;if bit1 is set -> odd # of 1s else even # of 1s
 163: 6511+7+5	0D95  3808    	    jr c, keyboard_read_podd
 164:				    ;parity even
 165: 6518+11	0D97  DB66    	    in a,(IO_PIO_1_B_D) ;read parity bit
 166: 6529+7	0D99  E602    	    and 0x02    ;test if parity bit is also even
 167: 6536+7+5	0D9B  2822    	    jr z, keyboard_read_fault_parity
 168: 6543+12	0D9D  1806    	    jr keyboard_read_stop
 169:     -	0D9F          	keyboard_read_podd:
 170:				    ;parity odd
 171: 6555+11	0D9F  DB66    	    in a,(IO_PIO_1_B_D) ;read parity bit
 172: 6566+7	0DA1  E602    	    and 0x02    ;test if parity bit is also odd
 173: 6573+7+5	0DA3  201A    	    jr nz, keyboard_read_fault_parity
 174:     -	0DA5          	keyboard_read_stop:
 175: 6580+17	0DA5  CDD60C  	    call keyboard_wait_clk_falling
 176: 6597+10	0DA8  CACD0D  	    jp z, keyboard_read_fault   ;timeout condition  
 177: 6607+11	0DAB  DB66    	    in a,(IO_PIO_1_B_D) ;read data bit
 178: 6618+7	0DAD  E602    	    and 0x02
 179: 6625+10	0DAF  CAC60D  	    jp z, keyboard_read_fault_byte  ;if stopbit not 1 then fault
 180:				
 181: 6635+17	0DB2  CDA70C  	    call keyboard_wait_clk_high
 182: 6652+10	0DB5  CACD0D  	    jp z, keyboard_read_fault   ;timeout condition
 183: 6662+4	0DB8  00      	    nop
 184: 6666+4	0DB9  00      	    nop
 185: 6670+17	0DBA  CD0E0E  	    call keyboard_off
 186: 6687+4	0DBD  78      	    ld a,b  ;else load buffer to a
 187: 6691+10	0DBE  C9      	    ret     ;and return
 188:				
 189:     -	0DBF          	keyboard_read_fault_parity:
 190: 6701+7	0DBF  3ED1    	    ld a,ps2_err_parity
 191: 6708+13	0DC1  321840  	    ld (var_ps2_err), a
 192: 6721+12	0DC4  1807    	    jr keyboard_read_fault
 193:     -	0DC6          	keyboard_read_fault_byte:
 194: 6733+7	0DC6  3ED2    	    ld a,ps2_err_unexpected
 195: 6740+13	0DC8  321840  	    ld (var_ps2_err), a
 196: 6753+12	0DCB  1800    	    jr keyboard_read_fault
 197:     -	0DCD          	keyboard_read_fault:
 198: 6765+17	0DCD  CDF00D  	    call keyboard_abort
 199: 6782+7	0DD0  3E0C    	    ld a,0x0C   ;deactivate clock pulldown
 200: 6789+11	0DD2  D366    	    out (IO_PIO_1_B_D),a
 201: 6800+17	0DD4  CD0E0E  	    call keyboard_off
 202: 6817+7	0DD7  3EFF    	    ld a,0xFF
 203: 6824+10	0DD9  C9      	    ret
 204:     -	0DDA          	keyboard_read_null:
 205: 6834+17	0DDA  CD0E0E  	    call keyboard_off
 206: 6851+7	0DDD  3E00    	    ld a,0x00
 207: 6858+10	0DDF  C9      	    ret
 208:				
 209:				
 210:				
 211:				
 212:     -	0DE0          	keyboard_wait_data_low_only:             ;wait until low
 213: 6868+11	0DE0  DB66    	    in a,(IO_PIO_1_B_D)             
 214: 6879+7	0DE2  E602    	    and 0x02
 215: 6886+10	0DE4  C2E00D  	    jp nz,keyboard_wait_data_low_only
 216: 6896+10	0DE7  C9      	    ret
 217:				
 218:     -	0DE8          	keyboard_wait_data_high_only:             ;wait until high
 219: 6906+11	0DE8  DB66    	    in a,(IO_PIO_1_B_D)             
 220: 6917+7	0DEA  E602    	    and 0x02
 221: 6924+10	0DEC  CAE00D  	    jp z,keyboard_wait_data_low_only
 222: 6934+10	0DEF  C9      	    ret
 223:				
 224:     -	0DF0          	keyboard_abort:
 225: 6944+11	0DF0  C5      	    push bc
 226: 6955+7	0DF1  0600    	    ld b,0
 227: 6962+7	0DF3  0E01    	    ld c,1
 228: 6969+7	0DF5  3E08    	    ld a,0x08   ;activate clock pulldown
 229: 6976+11	0DF7  D366    	    out (IO_PIO_1_B_D),a
 230: 6987+10	0DF9  210C00  	    ld hl,12
 231: 6997+17	0DFC  CD010E  	    call delay
 232: 7014+10	0DFF  C1      	    pop bc
 233: 7024+10	0E00  C9      	    ret
 234:				
 235:				; hl contains loops (0.00000949433 s/loop)
 236:     -	0E01          	delay:
 237: 7034+11	0E01  C5      	    push bc
 238: 7045+10	0E02  010100  	    ld bc, 1
 239:     -	0E05          	delay_loop:
 240: 7055+15	0E05  ED42    	    sbc hl,bc                       ;15 T-States
 241: 7070+4	0E07  00      	    nop                             ;4  T-States
 242: 7074+4	0E08  00      	    nop                             ;4  T-States
 243: 7078+10	0E09  C2050E  	    jp nz, delay_loop     ;12 T-States
 244:				
 245: 7088+10	0E0C  C1      	    pop bc
 246: 7098+10	0E0D  C9      	    ret
 247:				
 248:				;0b00001100
 249:				;      |||+IN CLK
 250:				;      ||+-IN DATA
 251:				;      |+--OUT CLK (LOW = Pulled low)
 252:				;      +---OUT DATA (LOW = Pulled low)
 253:				
 254:     -	0E0E          	keyboard_off:
 255: 7108+7	0E0E  3E08    	    ld a,0x08   ;activate clock pulldown
 256: 7115+11	0E10  D366    	    out (IO_PIO_1_B_D),a
 257: 7126+10	0E12  C9      	    ret
 258:				
 259:     -	0E13          	keyboard_on:
 260: 7136+17	0E13  CDE80D  	    call keyboard_wait_data_high_only
 261: 7153+7	0E16  3E0C    	    ld a,0x0C   ;deactivate clock pulldown
 262: 7160+11	0E18  D366    	    out (IO_PIO_1_B_D),a
 263: 7171+10	0E1A  C9      	    ret
 264:				
 265:				; a contains data
 266:     -	0E1B          	keyboard_send_wrapper:
 267: 7181+7	0E1B  0604    	    ld b,4  ;amount of retries
 268: 7188+11	0E1D  C5      	    push bc
 269: 7199+17	0E1E  CD260E  	    call keyboard_send  ;send bit
 270: 7216+17	0E21  CD610D  	    call keyboard_read  ;wait for response
 271: 7233+10	0E24  C1      	    pop bc
 272: 7243+10	0E25  C9      	    ret
 273:				
 274:				;a contains data
 275:     -	0E26          	keyboard_send:
 276:				
 277: 7253+4	0E26  4F      	    ld c,a      ;store data in b
 278: 7257+7	0E27  1E00    	    ld e,0      ;parity counter
 279:				    
 280: 7264+4	0E29  AF      	    xor a
 281: 7268+13	0E2A  321840  	    ld (var_ps2_err),a  ;reset error code
 282:				
 283: 7281+7	0E2D  3E0C    	    ld a,0x0C   ;release clock and data
 284: 7288+11	0E2F  D366    	    out (IO_PIO_1_B_D),a
 285:				
 286: 7299+10	0E31  210100  	    ld hl, 1    ;~20us
 287: 7309+17	0E34  CD010E  	    call delay
 288:				
 289: 7326+7	0E37  3E08    	    ld a,0x08   ;set clock low for 60us
 290: 7333+11	0E39  D366    	    out (IO_PIO_1_B_D),a
 291:				
 292: 7344+10	0E3B  210B00  	    ld hl, 11    ;~100us
 293: 7354+17	0E3E  CD010E  	    call delay
 294:				
 295: 7371+4	0E41  AF      	    xor a               ; 2) Bring the Data and Clock line low.
 296: 7375+11	0E42  D366    	    out (IO_PIO_1_B_D),a
 297: 7386+11	0E44  F5      	    push af     ;small delay
 298: 7397+10	0E45  F1      	    pop af
 299: 7407+7	0E46  3E04    	    ld a,0x04           ; 3) Release the Clock line. Keep data low
 300: 7414+11	0E48  D366    	    out (IO_PIO_1_B_D),a
 301:				
 302:     -	0E4A          	keyboard_send_initial_delay:
 303: 7425+17	0E4A  CDBA0C  	    call keyboard_wait_clk_low_loop     ; 4) Wait for the device to bring the Clock line low.
 304: 7442+10	0E4D  CA4A0E  	    jp z, keyboard_send_initial_delay   ;initial delay is much looooonger then the rest
 305:				                                        ;so no timeout error here
 306: 7452+7	0E50  0608    	    ld b,8      ;setup byte counter
 307:				
 308:				
 309:     -	0E52          	keyboard_send_loop: ; 5) Set/reset the Data line to send the first data bit
 310:				    ;call keyboard_wait_clk_low_only ;first cycle
 311: 7459+4	0E52  79      	    ld a,c      ;load data from c
 312: 7463+4	0E53  1F      	    rra
 313: 7467+4	0E54  4F      	    ld c,a
 314: 7471+7+5	0E55  3807    	    jr c, keyboard_send_loop_high
 315: 7478+7	0E57  3E04    	    ld a,0x04   ;activate data pulldown -> data = 0
 316: 7485+11	0E59  D366    	    out (IO_PIO_1_B_D),a
 317: 7496+4	0E5B  1C      	    inc e
 318: 7500+12	0E5C  1804    	    jr keyboard_send_loop_continue
 319:     -	0E5E          	keyboard_send_loop_high:
 320: 7512+7	0E5E  3E0C    	    ld a,0x0C   ;deactivate data pulldown -> data = 1
 321: 7519+11	0E60  D366    	    out (IO_PIO_1_B_D),a
 322:     -	0E62          	keyboard_send_loop_continue:
 323: 7530+17	0E62  CDD60C  	    call keyboard_wait_clk_falling
 324: 7547+10	0E65  CAA00E  	    jp z, keyboard_send_timeout
 325: 7557+8+5	0E68  10E8    	    djnz keyboard_send_loop          ; 8a) Repeat steps 5-7 for the other seven data bits 
 326:     -	0E6A          	keyboard_send_parity:                ; 8b) and the parity bit
 327: 7565+4	0E6A  7B      	    ld a,e  ;load 
 328: 7569+4	0E6B  1F      	    rra
 329: 7573+7+5	0E6C  3006    	    jr nc, keyboard_send_parity_high
 330: 7580+7	0E6E  3E04    	    ld a,0x04   ;activate data pulldown -> data = 0
 331: 7587+11	0E70  D366    	    out (IO_PIO_1_B_D),a
 332: 7598+12	0E72  1804    	    jr keyboard_send_stopbit
 333:     -	0E74          	keyboard_send_parity_high:
 334: 7610+7	0E74  3E0C    	    ld a,0x0C   ;deactivate data pulldown -> data = 1
 335: 7617+11	0E76  D366    	    out (IO_PIO_1_B_D),a
 336:     -	0E78          	keyboard_send_stopbit:
 337: 7628+17	0E78  CDD60C  	    call keyboard_wait_clk_falling  ; 6) Wait for the device to bring Clock high.
 338: 7645+10	0E7B  CAA00E  	    jp z, keyboard_send_timeout     ; 7) Wait for the device to bring Clock low.
 339: 7655+7	0E7E  3E0C    	    ld a,0x0C                        ; 9) Release the Data line
 340: 7662+11	0E80  D366    	    out (IO_PIO_1_B_D),a
 341:     -	0E82          	keyboard_get_ack:
 342: 7673+17	0E82  CDA70C  	    call keyboard_wait_clk_high
 343: 7690+10	0E85  CAA00E  	    jp z, keyboard_send_timeout
 344:				
 345: 7700+17	0E88  CDE00D  	    call keyboard_wait_data_low_only ; 10) Wait for the device to bring Data low.
 346: 7717+17	0E8B  CDB60C  	    call keyboard_wait_clk_low  ; 11) Wait for the device to bring Clock low.
 347: 7734+10	0E8E  CAA00E  	    jp z, keyboard_send_timeout
 348: 7744+17	0E91  CDE80D  	    call keyboard_wait_data_high_only   ; 12) Wait for the device to release Data and Clock
 349: 7761+17	0E94  CDA70C  	    call keyboard_wait_clk_high
 350: 7778+10	0E97  CAA00E  	    jp z, keyboard_send_timeout
 351: 7788+4	0E9A  00      	    nop
 352: 7792+4	0E9B  00      	    nop
 353: 7796+17	0E9C  CD0E0E  	    call keyboard_off
 354: 7813+10	0E9F  C9      	    ret
 355:				
 356:     -	0EA0          	keyboard_send_timeout:
 357: 7823+10	0EA0  C9      	    ret
 358:				
 359:				
 360:				;keyboard_send:
 361:				;    ld c,a      ;store data in b
 362:				;    ld d,0      ;parity counter
 363:				;
 364:				;    ld a,0x0C   ;release clock and data
 365:				;    out (IO_PIO_1_B_D),a
 366:				;
 367:				;    ld hl, 1    ;~20us
 368:				;    call delay
 369:				;
 370:				;    ld a,0x08   ;set clock low for 60us
 371:				;    out (IO_PIO_1_B_D),a
 372:				;
 373:				;    ld hl, 11    ;~100us
 374:				;    call delay
 375:				;
 376:				;    xor a               ; 2) Bring the Data and Clock line low.
 377:				;    out (IO_PIO_1_B_D),a
 378:				;    push af
 379:				;    pop af
 380:				;    ld a,0x04           ; 3) Release the Clock line. Keep data low
 381:				;    out (IO_PIO_1_B_D),a
 382:				;    ;nop
 383:				;    ;nop
 384:				;    
 385:				;    call keyboard_wait_clk_high_only    ;maybe this helps
 386:				;    call keyboard_wait_clk_low_only ; 4) Wait for the device to bring the Clock line low.
 387:				;
 388:				;    ld b,8
 389:				;keyboard_send_loop: ; 5) Set/reset the Data line to send the first data bit
 390:				;    ;call keyboard_wait_clk_low_only ;first cycle
 391:				;    ld a,c      ;load data from c
 392:				;    rra
 393:				;    ld c,a
 394:				;    jr c, keyboard_send_loop_high
 395:				;    ld a,0x04   ;activate data pulldown -> data = 0
 396:				;    out (IO_PIO_1_B_D),a
 397:				;    inc d
 398:				;    jr keyboard_send_loop_continue
 399:				;keyboard_send_loop_high:
 400:				;    ld a,0x0C   ;deactivate data pulldown -> data = 1
 401:				;    out (IO_PIO_1_B_D),a
 402:				;keyboard_send_loop_continue:
 403:				;    call 
 404:				;    call keyboard_wait_clk_high_only ; 6) Wait for the device to bring Clock high.
 405:				;    call keyboard_wait_clk_low_only  ; 7) Wait for the device to bring Clock low.
 406:				;    djnz keyboard_send_loop          ; 8a) Repeat steps 5-7 for the other seven data bits 
 407:				;
 408:				;keyboard_send_parity:                ; 8b) and the parity bit
 409:				;    ld a,d
 410:				;    rra
 411:				;    jr nc, keyboard_send_parity_high
 412:				;    ld a,0x04   ;activate data pulldown -> data = 0
 413:				;    out (IO_PIO_1_B_D),a
 414:				;    jr keyboard_send_stopbit
 415:				;keyboard_send_parity_high:
 416:				;    ld a,0x0C   ;deactivate data pulldown -> data = 1
 417:				;    out (IO_PIO_1_B_D),a
 418:				;keyboard_send_stopbit:
 419:				;    call keyboard_wait_clk_high_only ; 6) Wait for the device to bring Clock high.
 420:				;    call keyboard_wait_clk_low_only  ; 7) Wait for the device to bring Clock low.
 421:				;
 422:				;    ld a,0x0C                        ; 9) Release the Data line
 423:				;    out (IO_PIO_1_B_D),a
 424:				;keyboard_get_ack:
 425:				;    call keyboard_wait_clk_high_only
 426:				;
 427:				;    call keyboard_wait_data_low_only ; 10) Wait for the device to bring Data low.
 428:				;    call keyboard_wait_clk_low_only  ; 11) Wait for the device to bring Clock low.
 429:				;    call keyboard_wait_data_high_only   ; 12) Wait for the device to release Data and Clock
 430:				;    call keyboard_wait_clk_high_only
 431:				;    nop
 432:				;    nop
 433:				;    call keyboard_off
**** main.asm ****
 395:				;    ret
 396:				.include "prg_ps2demo.s"
**** include/prg_ps2demo.s ****
   1:     -	0EA1          	ps2demo_run:
   2:				
   3: 7833+17	0EA1  CDEB0C  	    call keyboard_init
   4:				
   5:     -	0EA4          	ps2demo_run_loop:
   6: 7850+17	0EA4  CD610D  	    call keyboard_read
   7: 7867+4	0EA7  B7      	    or a
   8: 7871+7+5	0EA8  28FA    	    jr z, ps2demo_run_loop
   9: 7878+11	0EAA  F5      	    push af
  10: 7889+7	0EAB  3E45    	    ld a,"E"
  11: 7896+17	0EAD  CD3302  	    call print_char
  12: 7913+7	0EB0  3E20    	    ld a," "
  13: 7920+17	0EB2  CD3302  	    call print_char
  14: 7937+13	0EB5  3A1840  	    ld a,(var_ps2_err)
  15: 7950+17	0EB8  CD6302  	    call print_a_hex
  16: 7967+7	0EBB  3E20    	    ld a," "
  17: 7974+17	0EBD  CD3302  	    call print_char
  18: 7991+7	0EC0  3E20    	    ld a," "
  19: 7998+17	0EC2  CD3302  	    call print_char
  20: 8015+7	0EC5  3E44    	    ld a,"D"
  21: 8022+17	0EC7  CD3302  	    call print_char
  22: 8039+7	0ECA  3E20    	    ld a," "
  23: 8046+17	0ECC  CD3302  	    call print_char
  24: 8063+10	0ECF  F1      	    pop af
  25: 8073+17	0ED0  CD6302  	    call print_a_hex
  26: 8090+17	0ED3  CD4302  	    call print_newLine
**** main.asm ****
 397: 8107+12	0ED6  18CC    	    jr ps2demo_run_loop
 398:				.include "prg_splash.s"
**** include/prg_splash.s ****
   1:				; Z8C Splash-Screen
   2:				
   3:     -	0ED8          	splash_run:
   4: 8119+7	0ED8  3EC0    	    ld a, 11000000b ; Set 16k memory and disable blank blank and Mode I
   5: 8126+7	0EDA  0681    	    ld b,TmsCtrl1Reg
   6: 8133+17	0EDC  CD7D03  	    call vdp_reg_write  ; write to reg 1
   7:				
   8:				    ;clear memory
   9: 8150+10	0EDF  110038  	    ld de, TmsNameLoc
  10: 8160+10	0EE2  01C03B  	    ld bc, TmsNameLoc+960
  11: 8170+17	0EE5  CD9E03  	    call vdp_tms_clear
  12:				
  13: 8187+10	0EE8  110004  	    ld de, TmsPatternLoc + (128*8)    ;setup start addr
  14: 8197+10	0EEB  21CD0F  	    ld hl,[spash_pattern] ;HL contains start addr of spash_pattern
  15: 8207+10	0EEE  010801  	    ld bc,8 + (32*8)
  16: 8217+17	0EF1  CD8603  	    call vdp_setup_font
  17:				
  18:				    ;create color table entry
  19: 8234+10	0EF4  210020  	    ld hl, TmsColorTableLoc
  20: 8244+17	0EF7  CDE20B  	    call vdp_address
  21:				
  22: 8261+7	0EFA  0620    	    ld b, 32
  23:     -	0EFC          	splash_run_ld_clr_loop:
  24: 8268+7	0EFC  3EF0    	    ld a, 0xF0
  25: 8275+11	0EFE  D380    	    out (VDP_MEM),a
  26: 8286+4	0F00  05      	    dec b
  27: 8290+4	0F01  78      	    ld a,b
  28: 8294+7	0F02  FE10    	    cp 16
  29: 8301+10	0F04  C2FC0E  	    jp nz, splash_run_ld_clr_loop
  30:     -	0F07          	splash_run_ld_clr_loop2:
  31: 8311+7	0F07  3E90    	    ld a, 0x90
  32: 8318+11	0F09  D380    	    out (VDP_MEM),a
  33: 8329+4	0F0B  05      	    dec b
  34: 8333+10	0F0C  C2070F  	    jp nz, splash_run_ld_clr_loop2
  35:				
  36:				
  37:				    ;print pattern
  38: 8343+10	0F0F  210038  	    ld hl, TmsNameLoc
  39: 8353+17	0F12  CDE20B  	    call vdp_address
  40: 8370+4	0F15  AF      	    xor a
  41:				
  42:				
  43:				
  44: 8374+7	0F16  3E80    	    ld a, 128 ;first tile
  45: 8381+7	0F18  0600    	    ld b, 0 ;start x
  46: 8388+7	0F1A  0E00    	    ld c, 0 ;start y
  47: 8395+7	0F1C  1608    	    ld d, 8 ;size x
  48: 8402+7	0F1E  1E04    	    ld e, 4 ;size y
  49:				
  50: 8409+13	0F20  320440  	    ld (var_scratch), a
  51: 8422+4	0F23  7A      	    ld a,d
  52: 8426+13	0F24  320540  	    ld (var_scratch + 1), a
  53:				
  54: 8439+4	0F27  78      	    ld a,b
  55: 8443+13	0F28  320240  	    ld (var_curserx), a
  56: 8456+4	0F2B  79      	    ld a,c
  57: 8460+13	0F2C  320340  	    ld (var_cursery), a
  58: 8473+17	0F2F  CD820C  	    call vdp_im2_pos
  59:				    
  60:     -	0F32          	_pattern_loop_column:
  61: 8490+13	0F32  3A0440  	    ld a,(var_scratch)
  62: 8503+11	0F35  D380    	    out (VDP_MEM),a
  63: 8514+4	0F37  3C      	    inc a
  64: 8518+13	0F38  320440  	    ld (var_scratch),a
  65: 8531+4	0F3B  15      	    dec d
  66: 8535+10	0F3C  CA420F  	    jp z,_pattern_loop_next_row
  67: 8545+10	0F3F  C3320F  	    jp _pattern_loop_column
  68:				
  69:     -	0F42          	_pattern_loop_next_row:
  70: 8555+13	0F42  3A0540  	    ld a, (var_scratch + 1)
  71: 8568+4	0F45  57      	    ld d,a
  72: 8572+4	0F46  1D      	    dec e
  73: 8576+10	0F47  CA570F  	    jp z,_pattern_loop_next_end
  74:				    
  75: 8586+13	0F4A  3A0340  	    ld a,(var_cursery)
  76: 8599+4	0F4D  3C      	    inc a
  77: 8603+13	0F4E  320340  	    ld (var_cursery), a
  78: 8616+17	0F51  CD820C  	    call vdp_im2_pos
  79:				
  80: 8633+10	0F54  C3320F  	    jp _pattern_loop_column
  81:				
  82:     -	0F57          	_pattern_loop_next_end:
  83:				
  84: 8643+7	0F57  3E09    	    ld a,9
  85: 8650+13	0F59  320240  	    ld (var_curserx), a
  86: 8663+7	0F5C  3E00    	    ld a,0
  87: 8670+13	0F5E  320340  	    ld (var_cursery), a
  88: 8683+17	0F61  CD820C  	    call vdp_im2_pos
  89: 8700+10	0F64  21910F  	    ld hl, [STR_Title1]
  90: 8710+17	0F67  CD3702  	    call print_str
  91:				
  92: 8727+7	0F6A  3E02    	    ld a,2
  93: 8734+13	0F6C  320340  	    ld (var_cursery), a
  94: 8747+7	0F6F  3E09    	    ld a,9
  95: 8754+13	0F71  320240  	    ld (var_curserx), a
  96: 8767+17	0F74  CD820C  	    call vdp_im2_pos
  97: 8784+10	0F77  21A50F  	    ld hl, [STR_Title2]
  98: 8794+17	0F7A  CD3702  	    call print_str
  99: 8811+7	0F7D  3E03    	    ld a,3
 100: 8818+13	0F7F  320340  	    ld (var_cursery), a
 101: 8831+7	0F82  3E09    	    ld a,9
 102: 8838+13	0F84  320240  	    ld (var_curserx), a
 103: 8851+17	0F87  CD820C  	    call vdp_im2_pos
 104: 8868+10	0F8A  21BA0F  	    ld hl, [STR_Title3]
 105: 8878+17	0F8D  CD3702  	    call print_str
 106: 8895+4	0F90  76      	    halt
 107:				
 108:				
 109:     -	0F91          	STR_Title1:
 110:     -	0F91  4120486F	    db 'A Homebrew Computer',0
	              6D656272
	              65772043
	              6F6D7075
	              74657200
 111:     -	0FA5          	STR_Title2:
 112:     -	0FA5  62792044	    db 'by Dennis Gunia 2022',0
	              656E6E69
	              73204775
	              6E696120
	              32303232
	              00
 113:     -	0FBA          	STR_Title3:
 114:     -	0FBA  7777772E	    db 'www.dennisgunia.de',0
	              64656E6E
	              69736775
	              6E69612E
	              646500
 115:				
 116:     -	0FCD          	spash_pattern:
 117:     -	0FCD          	tile_0: ;(0,0)
 118:     -	0FCD  003F7F7F	    db 0,63,127,127,127,63,0,0
	              7F3F0000
 119:     -	0FD5          	tile_1: ;(1,0)
 120:     -	0FD5  00FFFFFF	    db 0,255,255,255,255,255,3,7
	              FFFF0307
 121:     -	0FDD          	tile_2: ;(2,0)
 122:     -	0FDD  00FCFEFE	    db 0,252,254,254,254,253,253,249
	              FEFDFDF9
 123:     -	0FE5          	tile_3: ;(3,0)
 124:     -	0FE5  000F7FFF	    db 0,15,127,255,255,252,248,248
	              FFFCF8F8
 125:     -	0FED          	tile_4: ;(4,0)
 126:     -	0FED  00FFFFFF	    db 0,255,255,255,255,127,63,63
	              FF7F3F3F
 127:     -	0FF5          	tile_5: ;(5,0)
 128:     -	0FF5  00FFFFFF	    db 0,255,255,255,255,255,15,31
	              FFFF0F1F
 129:     -	0FFD          	tile_6: ;(6,0)
 130:     -	0FFD  00FFFFFF	    db 0,255,255,255,255,255,240,224
	              FFFFF0E0
 131:     -	1005          	tile_7: ;(7,0)
 132:     -	1005  00E0FCFE	    db 0,224,252,254,254,254,28,0
	              FEFE1C00
 133:     -	100D          	tile_8: ;(0,1)
 134:     -	100D  00000000	    db 0,0,0,0,0,0,1,3
	              00000103
 135:     -	1015          	tile_9: ;(1,1)
 136:     -	1015  0F1F3F3F	    db 15,31,63,63,127,255,254,252
	              7FFFFEFC
 137:     -	101D          	tile_10: ;(2,1)
 138:     -	101D  F1E1C0C0	    db 241,225,192,192,128,0,0,1
	              80000001
 139:     -	1025          	tile_11: ;(3,1)
 140:     -	1025  F8F8FC7F	    db 248,248,252,127,63,127,255,248
	              3F7FFFF8
 141:     -	102D          	tile_12: ;(4,1)
 142:     -	102D  3F3F7EFC	    db 63,63,126,252,248,252,254,63
	              F8FCFE3F
 143:     -	1035          	tile_13: ;(5,1)
 144:     -	1035  1F3F3F3F	    db 31,63,63,63,63,63,63,63
	              3F3F3F3F
 145:     -	103D          	tile_14: ;(6,1)
 146:     -	103D  C0800000	    db 192,128,0,0,0,0,0,0
	              00000000
 147:     -	1045          	tile_15: ;(7,1)
 148:     -	1045  00000000	    db 0,0,0,0,0,0,0,0
	              00000000
 149:     -	104D          	tile_16: ;(0,2)
 150:     -	104D  03070F1F	    db 3,7,15,31,63,127,127,127
	              3F7F7F7F
 151:     -	1055          	tile_17: ;(1,2)
 152:     -	1055  F8F8F0E0	    db 248,248,240,224,192,255,255,255
	              C0FFFFFF
 153:     -	105D          	tile_18: ;(2,2)
 154:     -	105D  03030303	    db 3,3,3,3,3,255,255,255
	              03FFFFFF
 155:     -	1065          	tile_19: ;(3,2)
 156:     -	1065  F0F0F0F0	    db 240,240,240,240,240,248,255,255
	              F0F8FFFF
 157:     -	106D          	tile_20: ;(4,2)
 158:     -	106D  1F1F1F1F	    db 31,31,31,31,31,63,255,254
	              1F3FFFFE
 159:     -	1075          	tile_21: ;(5,2)
 160:     -	1075  BFBF9F9F	    db 191,191,159,159,143,135,7,1
	              8F870701
 161:     -	107D          	tile_22: ;(6,2)
 162:     -	107D  0080C0E0	    db 0,128,192,224,240,255,255,255
	              F0FFFFFF
 163:     -	1085          	tile_23: ;(7,2)
 164:     -	1085  00000000	    db 0,0,0,0,28,254,254,254
	              1CFEFEFE
 165:     -	108D          	tile_24: ;(0,3)
 166:     -	108D  7F3F0000	    db 127,63,0,0,0,0,0,0
	              00000000
 167:     -	1095          	tile_25: ;(1,3)
 168:     -	1095  FFFF0000	    db 255,255,0,0,0,0,0,0
	              00000000
 169:     -	109D          	tile_26: ;(2,3)
 170:     -	109D  FFFF0000	    db 255,255,0,0,0,0,0,0
	              00000000
 171:     -	10A5          	tile_27: ;(3,3)
 172:     -	10A5  FFFF0000	    db 255,255,0,0,0,0,0,0
	              00000000
 173:     -	10AD          	tile_28: ;(4,3)
 174:     -	10AD  FCF00000	    db 252,240,0,0,0,0,0,0
	              00000000
 175:     -	10B5          	tile_29: ;(5,3)
 176:     -	10B5  00000000	    db 0,0,0,0,0,0,0,0
	              00000000
 177:     -	10BD          	tile_30: ;(6,3)
 178:     -	10BD  FF1F0000	    db 255,31,0,0,0,0,0,0
	              00000000
 179:     -	10C5          	tile_31: ;(7,3)
 180:     -	10C5  FCE00000	    db 252,224,0,0,0,0,0,0
	              00000000
**** main.asm ****
 399:				.include "parity.s"
**** include/parity.s ****
   1:				; a contains data
   2:				; bc destroied
   3:				; carry is set if odd, reset if even
   4:     -	10CD          	calc_parity:
   5: 8899+7	10CD  0E00    	    ld c,0  ;parity data
   6: 8906+7	10CF  0608    	    ld b,8  ;byte counter
   7:     -	10D1          	calc_parity_loop:
   8: 8913+4	10D1  0F      	    rrca
   9: 8917+7+5	10D2  3001    	    jr nc,calc_parity_loop_2    ;if not zero then skip increment
  10: 8924+4	10D4  0C      	    inc c
  11:     -	10D5          	calc_parity_loop_2:
  12: 8928+8+5	10D5  10FA    	    djnz calc_parity_loop
  13: 8936+4	10D7  79      	    ld a,c
  14: 8940+4	10D8  1F      	    rra     ;carry is set to bit 0 of high-counter. 
  15:				            ;if bit1 is set -> odd # of 1s else even # of 1s
**** main.asm ****
 400: 8944+10	10D9  C9      	    ret
 401:				; Strings
 402:     -	10DA          	STR_Banner_Start:
 403:     -	10DA  5A384320	    db "Z8C Monitor V2 by Dennis Gunia (2022)",0
	              4D6F6E69
	              746F7220
	              56322062
	              79204465
	              6E6E6973
	              2047756E
	              69612028
	              32303232
	              2900
 404:     -	1100          	STR_SyntaxError:
 405:     -	1100  73796E3F	    db "syn?",0
	              00
 406:     -	1105          	STR_Unknown:
 407:     -	1105  636D643F	    db "cmd?",0
	              00
 408:     -	110A          	STR_HEXDUMP_HEADER:
 409:     -	110A  42415345	    db 'BASE 0  1  2  3  4  5  6  7',0
	              20302020
	              31202032
	              20203320
	              20342020
	              35202036
	              20203700
 410:				
 411:				.include "xmodem.s"
**** include/xmodem.s ****
   1:				;-------------------------------------------------------------------------
   2:				; Z80 XMODEM implementation by Dennis Gunia
   3:				; 2022 - www,dennisgunia.de
   4:				;
   5:				; important doc: https://web.mit.edu/6.115/www/amulet/xmodem.htm
   6:				;                http://www.blunk-electronic.de/train-z/pdf/xymodem.pdf
   7:				;-------------------------------------------------------------------------
   8:				
   9:				;Symbols
  10:     -	0001          	SYM_SOH equ 0x01
  11:     -	0004          	SYM_EOT equ 0x04
  12:     -	0006          	SYM_ACK equ 0x06
  13:     -	0015          	SYM_NAK equ 0x15
  14:     -	0017          	SYM_ETB equ 0x17
  15:     -	0018          	SYM_CAN equ 0x18
  16:     -	0043          	SYM_C   equ 0x43
  17:				
  18:				;Memory locations
  19:     -	40FB          	MEM_VAR_BLOCK equ 0x40FB    ;last block
  20:     -	40FC          	MEM_VAR_TIMEA equ 0x40FC    ;timer var (mills)
  21:     -	40FE          	MEM_VAR_TIMER equ 0x40FE    ;timer var (seconds)
  22:     -	40FE          	MEM_INT_VEC_T equ 0x40FE    ;interrupt vector table
  23:				
  24:     -	4400          	MEM_LOC_LOAD  equ 0x4400    ;load location for program
  25:				
  26:				;XMODEM routine
  27:     -	1126          	xmodem_init:
  28: 8954+17	1126  CDA602  	    call A_RTS_OFF
  29:				    
  30: 8971+7	1129  3EA7    	    LD A,10100111b      ; Init CTC Channel 3
  31: 8978+11	112B  D302    	    OUT (IO_CTC0_C2),A
  32: 8989+7	112D  3E0E    	    LD A,14             ; 1028.57Hz ISR
  33: 8996+11	112F  D302    	    OUT (IO_CTC0_C2),A
  34: 9007+7	1131  3E00    	    LD A,00h            ; Set CTC Ch3 Interrupt Vector
  35: 9014+11	1133  D300    	    OUT (IO_CTC0_C0),A
  36:				    ;load int vector to ram
  37: 9025+10	1135  210312  	    ld hl,xmodem_int        ;CTC Ch3 INT routine
  38: 9035+16	1138  220442  	    ld (0x4200 + 0x04),hl   
  39:				    ;reset timer vars
  40: 9051+10	113B  210000  	    ld hl,0x0000
  41: 9061+16	113E  22FC40  	    ld (MEM_VAR_TIMEA),hl
  42: 9077+16	1141  22FE40  	    ld (MEM_VAR_TIMER),hl
  43:				
  44: 9093+7	1144  3E42    	    ld a,0x42           ; Set interrupt vector register
  45: 9100+9	1146  ED47    	    ld i,a
  46: 9109+8	1148  ED5E    	    im 2                ; Z80 Interrupt mode
  47:				
  48: 9117+10	114A  217E12  	    ld hl,MSG_START     ; Print start banner
  49: 9127+17	114D  CD3702  	    call print_str
  50: 9144+4	1150  FB      	    ei                  ; Enable interrupts
  51:				    ; init done. Continue with xmodem_await_conn
  52:				
  53:     -	1151          	xmodem_await_conn:          ;Wait for initial connection
  54: 9148+7	1151  3E43    	    ld a, SYM_C             ;Send C to notify sender, that we want CRC
  55: 9155+17	1153  CD5412  	    call xmodem_out         
  56: 9172+17	1156  CD2712  	    call xmodem_read_wait   ;Read with timeout
  57: 9189+10	1159  DA5111  	    jp c, xmodem_await_conn ;Carry flag set = timeout -> repeat
  58:				    ;else continue
  59:				
  60:     -	115C          	xmodem_packet:              ;XmodemCRC packet start
  61:				    ;use 1st byte to decide further processing
  62: 9199+7	115C  FE04    	    cp SYM_EOT              ;End of Transmission 
  63: 9206+10	115E  CABA11  	    jp z, xmodem_packet_EOT
  64: 9216+7	1161  FE18    	    cp SYM_CAN              ;Cancel (Force receiver to start sending C's)
  65: 9223+10	1163  CA5111  	    jp z, xmodem_await_conn
  66: 9233+7	1166  FE01    	    cp SYM_SOH              ;Start of 
  67: 9240+10	1168  CA6E11  	    jp z, xmodem_packet_get
  68:				
  69: 9250+10	116B  C3C211  	    jp xmodem_err           ;anything else is an error -> abort transmission
  70:				
  71:     -	116E          	xmodem_packet_get:          ;if first byte == SYM_SOH -> receive block
  72: 9260+17	116E  CD2712  	    call xmodem_read_wait   ;get byte 2 => block ID
  73: 9277+10	1171  DAA612  	    jp c, xmodem_nak
  74: 9287+4	1174  47      	    ld b,a
  75: 9291+13	1175  32FB40  	    ld (MEM_VAR_BLOCK), a   ;store block id to memory
  76: 9304+17	1178  CD2712  	    call xmodem_read_wait   ;get byte 3 => block ID complement 
  77: 9321+10	117B  DAA612  	    jp c, xmodem_nak
  78: 9331+4	117E  80      	    add b
  79: 9335+7	117F  FEFF    	    cp 255                  ;both size infos should always sum to 255
  80: 9342+10	1181  C2C211  	    jp nz,xmodem_err        ;if not 255 then its an error
  81:				
  82:				    ;calculate block start address in RAM
  83:				    ;multiply by 128
  84:				    ;use more efficient bit-wise operations
  85: 9352+4	1184  3D      	    dec a       ;a-1 to remove 1 sector offset
  86: 9356+4	1185  78      	    ld a,b
  87: 9360+4	1186  1F      	    rra         ;shift 1 bit to the right
  88: 9364+7	1187  E67F    	    and 0x7F
  89: 9371+4	1189  67      	    ld h,a
  90: 9375+4	118A  78      	    ld a,b
  91: 9379+4	118B  3D      	    dec a       ;a-1 to remove 1 sector offset
  92: 9383+4	118C  0F      	    rrca        ;shift bit0 to bit 7
  93: 9387+7	118D  E680    	    and 0x80    ;mask out all other bits
  94: 9394+4	118F  6F      	    ld l,a
  95:				    ;result:
  96:				    ;hl = 0aaaaaaa a000000
  97:				
  98: 9398+10	1190  110044  	    ld de,MEM_LOC_LOAD  
  99: 9408+11	1193  19      	    add hl,de               ;add calculated offset to base address
 100:				    ;hl now contains the true start address of this sector
 101:				
 102: 9419+7	1194  0680    	    ld b,128    ;preload counter for data baytes
 103: 9426+7	1196  0E00    	    ld c,0      ;packet length counter ( used for overflow error )
 104:				
 105:     -	1198          	xmodem_packet_get_data: ;get 128 data bytes (loop)
 106: 9433+11	1198  E5      	    push hl                 ;push hl onto stack because xmodem_read_wait destroys hl
 107: 9444+17	1199  CD2712  	    call xmodem_read_wait   ;read byte or timeout
 108: 9461+10	119C  DAA612  	    jp c, xmodem_nak        ;if timeout -> nak and retry
 109: 9471+10	119F  E1      	    pop hl                  ;restore hl
 110: 9481+7	11A0  77      	    ld (hl), a              ;store received byte in memory
 111: 9488+6	11A1  23      	    inc hl                  ;increment pointer
 112: 9494+4	11A2  0C      	    inc c                   ;increment packet length counter 
 113: 9498+4	11A3  05      	    dec b                   ;decerment data bytes remmaining
 114: 9502+10	11A4  C29811  	    jp nz, xmodem_packet_get_data   ;if bytes remaining, loop
 115:				    ;else continue with crc bytes
 116:				
 117:     -	11A7          	xmodem_packet_get_crc:      ;get 16-Bit CRC
 118: 9512+17	11A7  CD2712  	    call xmodem_read_wait  
 119: 9529+10	11AA  DAA612  	    jp c, xmodem_nak
 120: 9539+4	11AD  57      	    ld d,a
 121: 9543+4	11AE  0C      	    inc c
 122: 9547+17	11AF  CD2712  	    call xmodem_read_wait   
 123: 9564+10	11B2  DAA612  	    jp c, xmodem_nak
 124: 9574+4	11B5  5F      	    ld e,a 
 125: 9578+4	11B6  0C      	    inc c
 126:				    ;de now contains CRC value
 127:				    ;check if c is not bigger than 130 byte (128 data + 2crc)
 128:				    ;TODO if so NACK
 129:				
 130:				    ;de contains 16-bit CRC
 131:				    ;TODO if crc error NACK
 132: 9582+10	11B7  C39812  	    jp xmodem_ack         ;ack block -> then jump to start again
 133:				
 134:     -	11BA          	xmodem_packet_EOT:          ;End of transmission SUB. 
 135: 9592+7	11BA  3E06    	    ld a, SYM_ACK           ;Acknowledge EOT
 136: 9599+17	11BC  CD5412  	    call xmodem_out
 137: 9616+10	11BF  C3FC11  	    jp xmodem_end           ;and end xmodem
 138:				
 139:				
 140:				
 141:     -	11C2          	xmodem_err:                 ;non recoverable error -> abort
 142: 9626+7	11C2  3E18    	    ld a, SYM_CAN
 143: 9633+17	11C4  CD5412  	    call xmodem_out
 144: 9650+7	11C7  3E18    	    ld a, SYM_CAN
 145: 9657+17	11C9  CD5412  	    call xmodem_out
 146: 9674+7	11CC  3E18    	    ld a, SYM_CAN
 147: 9681+17	11CE  CD5412  	    call xmodem_out
 148: 9698+7	11D1  3E18    	    ld a, SYM_CAN
 149: 9705+17	11D3  CD5412  	    call xmodem_out
 150: 9722+7	11D6  3E18    	    ld a, SYM_CAN
 151: 9729+17	11D8  CD5412  	    call xmodem_out
 152: 9746+7	11DB  3E18    	    ld a, SYM_CAN
 153: 9753+17	11DD  CD5412  	    call xmodem_out
 154: 9770+7	11E0  3E18    	    ld a, SYM_CAN
 155: 9777+17	11E2  CD5412  	    call xmodem_out
 156: 9794+7	11E5  3E18    	    ld a, SYM_CAN
 157: 9801+17	11E7  CD5412  	    call xmodem_out
 158: 9818+7	11EA  3E18    	    ld a, SYM_CAN
 159: 9825+17	11EC  CD5412  	    call xmodem_out
 160: 9842+7	11EF  3E18    	    ld a, SYM_CAN
 161: 9849+17	11F1  CD5412  	    call xmodem_out
 162: 9866+7	11F4  3E18    	    ld a, SYM_CAN
 163:				
 164: 9873+10	11F6  216512  	    ld hl, MSG_ERROR
 165: 9883+17	11F9  CD3702  	    call print_str
 166:				
 167:				    ;overflow to end
 168:     -	11FC          	xmodem_end:
 169: 9900+4	11FC  F3      	    di                      ;disable interrupts
 170: 9904+17	11FD  CD4302  	    call print_newLine      ;print new line
 171: 9921+10	1200  C39C00  	    jp PROMPT_BEGIN         ;return ti prompt
 172:				
 173:				;isr is used as counter for timeouts
 174:     -	1203          	xmodem_int:
 175: 9931+4	1203  F3      	    di                      ;setup ISR (disable further interrupts, exchange registers)
 176: 9935+4	1204  08      	    ex AF,AF'
 177: 9939+4	1205  D9      	    exx
 178:				
 179: 9943+16	1206  2AFC40  	    ld hl,(MEM_VAR_TIMEA)   ;millis counter
 180: 9959+6	1209  23      	    inc hl
 181: 9965+16	120A  22FC40  	    ld (MEM_VAR_TIMEA),hl
 182:				
 183: 9981+10	120D  110404  	    ld de,1028              ;every 1028 millis counter
 184: 9991+15	1210  ED52    	    sbc hl,de
 185:10006+10	1212  C22212  	    jp nz, xmodem_int_cont  ;if less than 1028 millis, loop
 186:				
 187:10016+10	1215  210000  	    ld hl,0                 ;reset millis
 188:10026+16	1218  22FC40  	    ld (MEM_VAR_TIMEA),hl   
 189:10042+16	121B  2AFE40  	    ld hl,(MEM_VAR_TIMER)   ;incement seconds
 190:10058+6	121E  23      	    inc hl
 191:10064+16	121F  22FE40  	    ld (MEM_VAR_TIMER),hl
 192:     -	1222          	xmodem_int_cont:            ;end isr
 193:10080+4	1222  08      	    ex AF,AF'               ;restore registers
 194:10084+4	1223  D9      	    exx
 195:10088+4	1224  FB      	    EI                      ;enable interrupts
 196:10092+14	1225  ED4D    	    reti                    ;exit ISR
 197:				
 198:				
 199:				
 200:				
 201:				
 202:				; A returns char
 203:				; Carry is set if timeout
 204:     -	0003          	xmodem_read_timeount    equ     3  ;3 seconds timeout
 205:     -	1227          	xmodem_read_wait:
 206:10106+4	1227  F3      	    di
 207:10110+10	1228  210000  	    ld hl,0
 208:10120+16	122B  22FC40  	    ld (MEM_VAR_TIMEA),hl
 209:10136+16	122E  22FE40  	    ld (MEM_VAR_TIMER),hl
 210:10152+4	1231  FB      	    ei
 211:10156+17	1232  CDAF02  	    call A_RTS_ON
 212:     -	1235          	xmodem_read_wait_loop:
 213:				    ;check timeout
 214:10173+16	1235  2AFE40  	    ld hl,(MEM_VAR_TIMER)
 215:10189+4	1238  7D      	    ld a, l
 216:10193+7	1239  FE03    	    cp xmodem_read_timeount
 217:10200+10	123B  CA5212  	    jp z, xmodem_read_wait_timeout    ;if timeout retry
 218:				
 219:				    ; if no timeout
 220:10210+4	123E  AF      	    xor a               ; a = 0
 221:10214+11	123F  D313    	    out (IO_SIO0B_C), a ; select reg 0
 222:10225+11	1241  DB13    	    in a, (IO_SIO0B_C)  ; read reg 0
 223:10236+7	1243  E601    	    and	1               ; mask D0 (recieve char available)
 224:10243+10	1245  CA3512  	    jp Z,xmodem_read_wait_loop  ; wait if no char
 225:				    
 226:				    ; if char avail
 227:10253+11	1248  DB11    	    in a, (IO_SIO0B_D)  ; read char 
 228:				    ;call debug_a_hex
 229:10264+11	124A  F5      	    push af
 230:10275+17	124B  CDA602  	    call A_RTS_OFF
 231:10292+10	124E  F1      	    pop af
 232:10302+4	124F  37      	    scf
 233:10306+4	1250  3F      	    ccf
 234:10310+10	1251  C9      	    ret                 ; return
 235:     -	1252          	xmodem_read_wait_timeout:
 236:10320+4	1252  37      	    scf
 237:10324+10	1253  C9      	    ret
 238:				
 239:				
 240:     -	1254          	xmodem_out:
 241:10334+11	1254  D311    	    out (IO_SIO0B_D), a
 242:10345+17	1256  CD5A12  	    call xmodem_wait_out
 243:10362+10	1259  C9      	    ret
 244:				
 245:     -	125A          	xmodem_wait_out:
 246:10372+4	125A  97      	    sub a ;clear a, write into WR0: select RR0
 247:10376+4	125B  3C      	    inc a ;select RR1
 248:10380+11	125C  D313    	    out (IO_SIO0B_C),A
 249:10391+11	125E  DB13    	    in A,(IO_SIO0B_C) ;read RRx
 250:10402+8	1260  CB47    	    bit 0,A
 251:10410+7+5	1262  28F6    	    jr z,xmodem_wait_out
 252:10417+10	1264  C9      	    ret
 253:				
 254:     -	1265          	MSG_ERROR:
 255:     -	1265  4572726F	    db "Error: unexpected byte",13,10,0
	              723A2075
	              6E657870
	              65637465
	              64206279
	              74650D0A
	              00
 256:				
 257:     -	127E          	MSG_START:
 258:     -	127E  41776169	    db "Await xmodem connection",13,10,0
	              7420786D
	              6F64656D
	              20636F6E
	              6E656374
	              696F6E0D
	              0A00
 259:				
 260:				
 261:     -	1298          	xmodem_ack:             ;ack routine. Only use when expecting transmission afterwards.
 262:10427+7	1298  3E06    	    ld a, SYM_ACK       ;send ACK
 263:10434+17	129A  CD5412  	    call xmodem_out 
 264:10451+17	129D  CD2712  	    call xmodem_read_wait   ;wait for response
 265:10468+10	12A0  DA9812  	    jp c, xmodem_ack        ;if timeout repeat
 266:10478+10	12A3  C35C11  	    jp xmodem_packet        ;if received, continue with new packet
 267:				
 268:     -	12A6          	xmodem_nak:             ;nak routine. Only use when expecting transmission afterwards.
 269:10488+7	12A6  3E15    	    ld a, SYM_NAK           ;send NAK
 270:10495+17	12A8  CD5412  	    call xmodem_out         
 271:10512+17	12AB  CD2712  	    call xmodem_read_wait   ;wait for response
 272:10529+10	12AE  DAA612  	    jp c, xmodem_nak        ;if timeout repeat
 273:10539+10	12B1  C35C11  	    jp xmodem_packet        ;if received, continue with new packet
**** main.asm ****
**** main.asm ****
 412:				;.include "debug.s"



Statistics:

     4	passes
     0	jr promotions
   291	symbols
  4788	bytes



Symbol Table:

AY0_WRITE_REG   94        148
A_RTS_OFF        2A6      678
A_RTS_ON         2AF      687
CMD_EXEC         11D      285
CMD_IO_READ      20B      523
CMD_IO_WRITE     1E2      482
CMD_SET          1A6      422
CMD_SET_END      1DC      476
CMD_SET_LOOP     1C1      449
CMD_SYNTAX_ERROR  227      551
CMD_VIEW         13C      316
CMD_VIEW_END     1A0      416
CMD_VIEW_ROW     175      373
CMD_VIEW_ROW_LOOP  187      391
DHEX_TO_BYTE     2B8      696
DHEX_TO_BYTE_FAILED  2D4      724
HEX_TO_BIN       2D8      728
HEX_TO_BIN_2     2E6      742
HEX_TO_INVALID_2  2ED      749
IO_AY0_ADDR    =40        64
IO_AY0_DATA    =41        65
IO_AY1_ADDR    =42        66
IO_AY1_DATA    =43        67
IO_CTC0_C0     =00        0
IO_CTC0_C1     =01        1
IO_CTC0_C2     =02        2
IO_CTC0_C3     =03        3
IO_PIO_0_A_C   =61        97
IO_PIO_0_A_D   =60        96
IO_PIO_0_B_C   =63        99
IO_PIO_0_B_D   =62        98
IO_PIO_1_A_C   =65        101
IO_PIO_1_A_D   =64        100
IO_PIO_1_B_C   =67        103
IO_PIO_1_B_D   =66        102
IO_REG0        =20        32
IO_RTC_AMPM    =25        37
IO_RTC_CTR_D   =2D        45
IO_RTC_CTR_E   =2E        46
IO_RTC_CTR_F   =2F        47
IO_RTC_DAY0    =26        38
IO_RTC_DAY1    =27        39
IO_RTC_HOUR    =24        36
IO_RTC_MIN0    =22        34
IO_RTC_MIN1    =23        35
IO_RTC_MON0    =28        40
IO_RTC_MON1    =29        41
IO_RTC_SEC0    =20        32
IO_RTC_SEC1    =21        33
IO_RTC_WEEK    =2C        44
IO_RTC_YEAR1   =2B        43
IO_RTC_YERR0   =2A        42
IO_SIO0A_C     =12        18
IO_SIO0A_D     =10        16
IO_SIO0B_C     =13        19
IO_SIO0B_D     =11        17
Includes         233      563
MEM_INT_VEC_T  =40FE      16638
MEM_LOC_LOAD   =4400      17408
MEM_VAR_BLOCK  =40FB      16635
MEM_VAR_TIMEA  =40FC      16636
MEM_VAR_TIMER  =40FE      16638
MSG_ERROR       1265      4709
MSG_START       127E      4734
PRG_RAM_START  =4110      16656
PRG_RAM_TOP    =FF00      65280
PROG_MEM_START =4000      16384
PROG_ROM_START = 100      256
PROMPT_BEGIN    9C        156
PROMPT_BEGIN_READ_BACKSPACE D5        213
PROMPT_BEGIN_READ_LOOP AB        171
PROMPT_BEGIN_READ_PROCESS EF        239
STACK_RAM_TOP  =FFFF      65535
START_ROM      =00        0
STRCONV_BYTES_TO_HEX  2EF      751
STRCONV_BYTES_TO_HEX_1  2FE      766
STRCONV_BYTES_TO_HEX_2  308      776
STR_Banner_Start 10DA      4314
STR_HEXDUMP_HEADER 110A      4362
STR_SyntaxError 1100      4352
STR_Title1       F91      3985
STR_Title2       FA5      4005
STR_Title3       FBA      4026
STR_Unknown     1105      4357
STR_keyboard_init_err  D3F      3391
STR_keyboard_init_okay  D24      3364
SYM_ACK        =06        6
SYM_C          =43        67
SYM_CAN        =18        24
SYM_EOT        =04        4
SYM_ETB        =17        23
SYM_NAK        =15        21
SYM_SOH        =01        1
SYS_BUF_START  =4010      16400
SYS_RAM_START  =4000      16384
TmsBitmapColorLen= 800      2048
TmsBitmapPatternLen=1800      6144
TmsBlack       =01        1
TmsColorReg    =87        135
TmsColorTableLoc=2000      8192
TmsColorTableReg=83        131
TmsCtrl0Reg    =80        128
TmsCtrl1Reg    =81        129
TmsCyan        =07        7
TmsDarkBlue    =04        4
TmsDarkGreen   =0C        12
TmsDarkRed     =06        6
TmsDarkYellow  =0A        10
TmsFont          3BB      955
TmsGray        =0E        14
TmsLightBlue   =05        5
TmsLightGreen  =03        3
TmsLightRed    =09        9
TmsLightYellow =0B        11
TmsMagenta     =0D        13
TmsMediumGreen =02        2
TmsMediumRed   =08        8
TmsMulticolorPatternLen= 600      1536
TmsNameLoc     =3800      14336
TmsNameReg     =82        130
TmsPatternLoc  =00        0
TmsPatternReg  =84        132
TmsSpriteAttrReg=85        133
TmsSpritePatternReg=86        134
TmsTextNameLen = 3C0      960
TmsTextPatternLen= 800      2048
TmsTileColorLen=20        32
TmsTileNameLen = 300      768
TmsTilePatternLen= 800      2048
TmsTransparent =00        0
TmsWhite       =0F        15
VAR_CONSOLE_BAUD=18        24
VAR_CONSOLE_CONF=0F        15
VDP_MEM        =80        128
VDP_REG        =81        129
_pattern_loop_column  F32      3890
_pattern_loop_next_end  F57      3927
_pattern_loop_next_row  F42      3906
calc_parity     10CD      4301
calc_parity_loop 10D1      4305
calc_parity_loop_2 10D5      4309
delay            E01      3585
delay_loop       E05      3589
keyboard_abort   DF0      3568
keyboard_get_ack  E82      3714
keyboard_init    CEB      3307
keyboard_init_err  D1A      3354
keyboard_init_io  CDE      3294
keyboard_init_okay  D10      3344
keyboard_init_wait  CFF      3327
keyboard_off     E0E      3598
keyboard_on      E13      3603
keyboard_read    D61      3425
keyboard_read_fault  DCD      3533
keyboard_read_fault_byte  DC6      3526
keyboard_read_fault_parity  DBF      3519
keyboard_read_loop  D79      3449
keyboard_read_loop_odd  D87      3463
keyboard_read_null  DDA      3546
keyboard_read_parity  D8D      3469
keyboard_read_podd  D9F      3487
keyboard_read_stop  DA5      3493
keyboard_send    E26      3622
keyboard_send_initial_delay  E4A      3658
keyboard_send_loop  E52      3666
keyboard_send_loop_continue  E62      3682
keyboard_send_loop_high  E5E      3678
keyboard_send_parity  E6A      3690
keyboard_send_parity_high  E74      3700
keyboard_send_stopbit  E78      3704
keyboard_send_timeout  EA0      3744
keyboard_send_wrapper  E1B      3611
keyboard_wait_clk_falling  CD6      3286
keyboard_wait_clk_high  CA7      3239
keyboard_wait_clk_high_loop  CAB      3243
keyboard_wait_clk_low  CB6      3254
keyboard_wait_clk_low_loop  CBA      3258
keyboard_wait_clk_rising  CCE      3278
keyboard_wait_data_high_only  DE8      3560
keyboard_wait_data_low_only  DE0      3552
keyboard_wait_timout  CC7      3271
main            00        0
mon_start_complete 81        129
mon_start_init_serial 3D        61
mon_start_init_sound 28        40
mon_start_ram   6D        109
mon_start_ram_loop 76        118
mon_var_template 03        3
mon_var_template_end 4025      16421
print_a_hex      263      611
print_char       233      563
print_clear      242      578
print_delete     27F      639
print_delete_end  295      661
print_newLine    243      579
print_newLine_scroll  257      599
print_parity     296      662
print_parity_odd  29F      671
print_str        237      567
print_str_end    241      577
ps2_err_parity =D1        209
ps2_err_timeout=D0        208
ps2_err_unexpected=D2        210
ps2_ok         =00        0
ps2demo_run      EA1      3745
ps2demo_run_loop  EA4      3748
read_char        274      628
spash_pattern    FCD      4045
splash_run       ED8      3800
splash_run_ld_clr_loop  EFC      3836
splash_run_ld_clr_loop2  F07      3847
tile_0           FCD      4045
tile_1           FD5      4053
tile_10         101D      4125
tile_11         1025      4133
tile_12         102D      4141
tile_13         1035      4149
tile_14         103D      4157
tile_15         1045      4165
tile_16         104D      4173
tile_17         1055      4181
tile_18         105D      4189
tile_19         1065      4197
tile_2           FDD      4061
tile_20         106D      4205
tile_21         1075      4213
tile_22         107D      4221
tile_23         1085      4229
tile_24         108D      4237
tile_25         1095      4245
tile_26         109D      4253
tile_27         10A5      4261
tile_28         10AD      4269
tile_29         10B5      4277
tile_3           FE5      4069
tile_30         10BD      4285
tile_31         10C5      4293
tile_4           FED      4077
tile_5           FF5      4085
tile_6           FFD      4093
tile_7          1005      4101
tile_8          100D      4109
tile_9          1015      4117
var_buffer      4024      16420
var_buffer_len  4000      16384
var_curserx     4002      16386
var_cursery     4003      16387
var_last_char   4001      16385
var_ps2_err    =4018      16408
var_ps2_led    =4017      16407
var_ps2_state  =4016      16406
var_ps2_timeout=4014      16404
var_ps2mem      4014      16404
var_scratch     4004      16388
vdp_address      BE2      3042
vdp_char         BEB      3051
vdp_char_nl      BFE      3070
vdp_char_scroll  C14      3092
vdp_cursor_move  BBC      3004
vdp_cursor_set   BB3      2995
vdp_im2_pos      C82      3202
vdp_reg_write    37D      893
vdp_scroll       C2A      3114
vdp_scroll_clear_l24  C5F      3167
vdp_scroll_clear_l24_loop  C62      3170
vdp_scroll_line  C30      3120
vdp_setup_font   386      902
vdp_setup_font_loop  390      912
vdp_tms_clear    39E      926
vdp_tms_clear_loop  3AB      939
vdp_wait         383      899
vdpconsole_init  309      777
xmodem_ack      1298      4760
xmodem_await_conn 1151      4433
xmodem_end      11FC      4604
xmodem_err      11C2      4546
xmodem_init     1126      4390
xmodem_int      1203      4611
xmodem_int_cont 1222      4642
xmodem_nak      12A6      4774
xmodem_out      1254      4692
xmodem_packet   115C      4444
xmodem_packet_EOT 11BA      4538
xmodem_packet_get 116E      4462
xmodem_packet_get_crc 11A7      4519
xmodem_packet_get_data 1198      4504
xmodem_read_timeount=03        3
xmodem_read_wait 1227      4647
xmodem_read_wait_loop 1235      4661
xmodem_read_wait_timeout 1252      4690
xmodem_wait_out 125A      4698

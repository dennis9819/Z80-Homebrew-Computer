   1:     -	4000          	SYS_RAM_START   equ 0x4000
   2:     -	4010          	SYS_BUF_START   equ 0x4010
   3:     -	4110          	PRG_RAM_START   equ 0x4110
   4:     -	FF00          	PRG_RAM_TOP     equ 0xFF00
   5:     -	FFFF          	STACK_RAM_TOP   equ 0xFFFF
   6:				
   7:				;VAR_CONSOLE_CONF    equ 0x07  ;CLK/TRG Clock @ 1843220.5/s
   8:     -	000F          	VAR_CONSOLE_CONF    equ 0x0F  ;CPU/16  Clock @ 230402.5625/s
   9:				
  10:     -	0018          	VAR_CONSOLE_BAUD    equ 24  ;BAUD timer constant
  11:				                            ;CLK/TRG Clock @ 1843220.5/s
  12:				                            ; -> 0x16 : 14400
  13:				                            ;CPU/16  Clock @ 230402.5625/s
  14:				                            ; -> 12 : 19200
  15:				                            ; -> 24 : 9600
  16:				
  17:				; include IO device addresses
  18:				.include "addresses.s"
**** include/addresses.s ****
   1:     -	0000          	IO_CTC0_C0  equ 0x00
   2:     -	0001          	IO_CTC0_C1  equ 0x01
   3:     -	0002          	IO_CTC0_C2  equ 0x02
   4:     -	0003          	IO_CTC0_C3  equ 0x03
   5:				
   6:     -	0012          	IO_SIO0A_C  equ 00010010b
   7:     -	0010          	IO_SIO0A_D  equ 00010000b
   8:     -	0013          	IO_SIO0B_C  equ 00010011b
   9:     -	0011          	IO_SIO0B_D  equ 00010001b
  10:				
  11:     -	0020          	IO_RTC_SEC0  equ 00100000b
  12:     -	0021          	IO_RTC_SEC1  equ 00100001b
  13:     -	0022          	IO_RTC_MIN0  equ 00100010b
  14:     -	0023          	IO_RTC_MIN1  equ 00100011b
  15:     -	0024          	IO_RTC_HOUR  equ 00100100b
  16:     -	0025          	IO_RTC_AMPM  equ 00100101b
  17:     -	0026          	IO_RTC_DAY0  equ 00100110b
  18:     -	0027          	IO_RTC_DAY1  equ 00100111b
  19:     -	0028          	IO_RTC_MON0  equ 00101000b
  20:     -	0029          	IO_RTC_MON1  equ 00101001b
  21:     -	002A          	IO_RTC_YERR0 equ 00101010b
  22:     -	002B          	IO_RTC_YEAR1 equ 00101011b
  23:     -	002C          	IO_RTC_WEEK  equ 00101100b
  24:     -	002D          	IO_RTC_CTR_D equ 00101101b
  25:     -	002E          	IO_RTC_CTR_E equ 00101110b
  26:     -	002F          	IO_RTC_CTR_F equ 00101111b
  27:				
  28:     -	0040          	IO_AY0_ADDR equ 01000000b
  29:     -	0041          	IO_AY0_DATA equ 01000001b
  30:     -	0042          	IO_AY1_ADDR equ 01000010b
  31:     -	0043          	IO_AY1_DATA equ 01000011b
  32:				
  33:     -	0000          	START_ROM   equ 0x0000
  34:     -	0020          	IO_REG0     equ 0x20
  35:				
  36:     -	0080          	VDP_REG     equ 0x80
  37:     -	0081          	VDP_MEM     equ 0x81
  38:				
  39:     -	0100          	PROG_ROM_START equ 0x0100
**** main.asm ****
  19:     -	4000          	PROG_MEM_START equ 04000h
  20:				
  21:     -	0000          	    org 0x0000
  22:     -	0000          	main:
  23:    0+10	0000  C30600  	    jp mon_start_init_sound    
  24:				
  25:				;memory var template
  26:     -	0003          	mon_var_template:
  27:     -	4000          	    phase SYS_RAM_START
  28:				
  29:     -	4000          	var_buffer_len:
  30:     -	4000  00      	    defb 0
  31:     -	4001          	var_last_char:
  32:     -	4001  00      	    defb 0
  33:     -	4002          	var_buffer:
  34:     -	4002  00      	    defb 0
  35:				
  36:     -	4003          	mon_var_template_end:
  37:     -	0006          	    dephase
  38:				;end memory var template
  39:				
  40:     -	0006          	mon_start_init_sound:
  41:   10+7	0006  1608    	    ld	  D,0x08	; Select register #8
  42:   17+7	0008  3E00    	    ld	  A,0x00	; Volume channel A 0
  43:   24+17	000A  CD6900  	    call AY0_WRITE_REG
  44:   41+7	000D  1609    	    ld	  D,0x09	; Select register #9
  45:   48+7	000F  3E00    	    ld	  A,0x00	; Volume channel B 0
  46:   55+17	0011  CD6900  	    call AY0_WRITE_REG
  47:   72+7	0014  160A    	    ld	  D,0x0A	; Select register #10
  48:   79+7	0016  3E00    	    ld	  A,0x00	; Volume channel C 0
  49:   86+17	0018  CD6900  	    call AY0_WRITE_REG
  50:     -	001B          	mon_start_init_serial:
  51:  103+7	001B  3E0F    	    ld A,VAR_CONSOLE_CONF   ; Setup CTC
  52:  110+11	001D  D301    	    out (IO_CTC0_C1),A      ; Controll word, software reset, time constant follows, CLK/TRG starts timer
  53:  121+7	001F  3E18    	    ld A,VAR_CONSOLE_BAUD   ; Setup timer const
  54:  128+11	0021  D301    	    out (IO_CTC0_C1),A      ; Load timer const into CTC (Setup Baud generator)
  55:				    ;set up TX and RX:W
  56:  139+7	0023  3E30    	    ld a,00110000b      ;write into WR0: error reset, select WR0
  57:  146+11	0025  D313    	    out (IO_SIO0B_C),A
  58:  157+7	0027  3E18    	    ld a,018h           ;write into WR0: channel reset
  59:  164+11	0029  D313    	    out (IO_SIO0B_C),A
  60:  175+7	002B  3E04    	    ld a,004h           ;write into WR0: select WR4
  61:  182+11	002D  D313    	    out (IO_SIO0B_C),A
  62:  193+7	002F  3E04    	    ld a,04h            ;44h write into WR4: clkx1,1 stop bit, no parity
  63:  200+11	0031  D313    	    out (IO_SIO0B_C),A
  64:  211+7	0033  3E05    	    ld a,005h           ;write into WR0: select WR5
  65:  218+11	0035  D313    	    out (IO_SIO0B_C),A
  66:  229+7	0037  3E68    	    ld a,068h           ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
  67:  236+11	0039  D313    	    out (IO_SIO0B_C),A
  68:  247+7	003B  3E01    	    ld a,01h            ;write into WR0: select WR1
  69:  254+11	003D  D313    	    out (IO_SIO0B_C),A
  70:  265+7	003F  3E04    	    ld a,00000100b      ;no interrupt in CH B, special RX condition affects vect
  71:  272+11	0041  D313    	    out (IO_SIO0B_C),A
  72:				    ;enable SIO channel A RX
  73:  283+7	0043  3E03    	    ld a,003h ;write into WR0: select WR3
  74:  290+11	0045  D313    	    out (IO_SIO0B_C),A
  75:  301+7	0047  3EC1    	    ld a,0C1h ;RX 8bit, auto enable off, RX on
  76:  308+11	0049  D313    	    out (IO_SIO0B_C),A
  77:				    ;Channel A RX active
  78:     -	004B          	mon_start_ram:
  79:  319+10	004B  210300  	    ld hl,mon_var_template
  80:  329+10	004E  110340  	    ld de,mon_var_template_end
  81:  339+10	0051  010040  	    ld bc,SYS_RAM_START
  82:     -	0054          	mon_start_ram_loop:
  83:  349+7	0054  7E      	    ld a,(hl)  ;copy values
  84:  356+7	0055  02      	    ld (bc),a
  85:  363+6	0056  23      	    inc hl      
  86:  369+6	0057  03      	    inc bc
  87:  375+11	0058  E5      	    push hl    ;check if end is reached
  88:  386+15	0059  ED52    	    sbc hl,de
  89:  401+10	005B  E1      	    pop hl
  90:  411+10	005C  C25400  	    jp nz, mon_start_ram_loop
  91:				    ;template copy done
  92:				
  93:     -	005F          	mon_start_complete:
  94:				    
  95:				    ;call print_clear
  96:  421+10	005F  21C302  	    ld hl, [STR_Banner_Start]
  97:  431+17	0062  CD1402  	    call print_str
  98:				    ;call debug_init
  99:  448+17	0065  CD7100  	    call PROMPT_BEGIN
 100:				    ;halt CPU if prompt exits
 101:  465+4	0068  76      	    halt
 102:				    
 103:				; Misc Functions
 104:     -	0069          	AY0_WRITE_REG:
 105:  469+4	0069  47      	    LD B,A
 106:  473+4	006A  7A      	    LD A,D
 107:  477+11	006B  D340    	    OUT (IO_AY0_ADDR),A
 108:  488+4	006D  78      	    LD A,B
 109:  492+11	006E  D341    	    OUT (IO_AY0_DATA),A
 110:  503+10	0070  C9      	    RET
 111:				
 112:     -	0071          	PROMPT_BEGIN:
 113:  513+17	0071  CD6902  	    call A_RTS_ON
 114:  530+7	0074  3E3E    	    ld a,'>'
 115:  537+17	0076  CD0E02  	    call print_char
 116:  554+4	0079  AF      	    xor a  ;reset buffer len
 117:  558+13	007A  320040  	    ld (var_buffer_len),a
 118:				
 119:     -	007D          	PROMPT_BEGIN_READ_LOOP:
 120:  571+17	007D  CD4D02  	    call read_char
 121:  588+10	0080  CA7D00  	    jp z, PROMPT_BEGIN_READ_LOOP    ; wait until char avail
 122:				    
 123:				    ; process special ops
 124:  598+7	0083  FE0D    	    cp 13   ; enter
 125:  605+10	0085  CACD00  	    jp z,PROMPT_BEGIN_READ_PROCESS
 126:  615+7	0088  FE08    	    cp 0x08 ; backspace 0x08 VT102 0x7f Putty
 127:  622+10	008A  CAA700  	    jp z,PROMPT_BEGIN_READ_BACKSPACE
 128:				
 129:  632+11	008D  F5      	    push af
 130:				    ; a contains latest char
 131:  643+10	008E  210240  	    ld hl,[var_buffer]
 132:  653+7	0091  1600    	    ld d,0
 133:  660+13	0093  3A0040  	    ld a,(var_buffer_len)
 134:  673+4	0096  5F      	    ld e,a
 135:  677+11	0097  19      	    add hl,de   ;hl now contains pointer to last position in buffer
 136:  688+4	0098  3C      	    inc a
 137:  692+13	0099  320040  	    ld (var_buffer_len),a ;store incremented buffer length
 138:				
 139:  705+10	009C  F1      	    pop af
 140:  715+7	009D  77      	    ld (hl),a
 141:  722+17	009E  CD0E02  	    call print_char
 142:  739+6	00A1  23      	    inc hl
 143:  745+4	00A2  AF      	    xor a       ;a = 0
 144:  749+7	00A3  77      	    ld (hl),a   ;always add null termination after last char
 145:  756+10	00A4  C37D00  	    jp PROMPT_BEGIN_READ_LOOP
 146:				
 147:     -	00A7          	PROMPT_BEGIN_READ_BACKSPACE:
 148:  766+13	00A7  3A0040  	    ld a,(var_buffer_len)
 149:  779+4	00AA  A7      	    and a
 150:  783+10	00AB  CA7D00  	    jp z, PROMPT_BEGIN_READ_LOOP    ; do not continue if already at char 0
 151:  793+4	00AE  3D      	    dec a       ;decrement length
 152:  797+13	00AF  320040  	    ld (var_buffer_len),a   ;and store it
 153:  810+4	00B2  5F      	    ld e,a      ;load de with decremented value
 154:  814+7	00B3  1600    	    ld d,0
 155:  821+10	00B5  210240  	    ld hl,[var_buffer]
 156:  831+11	00B8  19      	    add hl,de   ;hl now contains pointer to last position in buffer
 157:  842+4	00B9  AF      	    xor a       ; store null byte to current location
 158:  846+7	00BA  77      	    ld (hl),a
 159:  853+7	00BB  3E08    	    ld a, 0x08
 160:  860+17	00BD  CD0E02  	    call print_char
 161:  877+7	00C0  3E20    	    ld a, 0x20
 162:  884+17	00C2  CD0E02  	    call print_char
 163:  901+7	00C5  3E08    	    ld a, 0x08
 164:  908+17	00C7  CD0E02  	    call print_char
 165:  925+10	00CA  C37D00  	    jp PROMPT_BEGIN_READ_LOOP
 166:				
 167:     -	00CD          	PROMPT_BEGIN_READ_PROCESS:
 168:				    ;call print_newLine
 169:				    ;ld hl,var_buffer
 170:				    ;call print_str
 171:				
 172:  935+13	00CD  3A0240  	    ld a,([var_buffer])
 173:  948+7	00D0  FE24    	    cp '$'              ;jump to addr
 174:  955+10	00D2  CAFB00  	    jp z, CMD_EXEC
 175:  965+7	00D5  FE3F    	    cp '?'              ;print hexdump
 176:  972+10	00D7  CA1A01  	    jp z, CMD_VIEW
 177:  982+7	00DA  FE21    	    cp '!'              ;set memory
 178:  989+10	00DC  CA8101  	    jp z, CMD_SET
 179:  999+7	00DF  FE69    	    cp 'i'              ;in IO
 180: 1006+10	00E1  CAE601  	    jp z, CMD_IO_READ
 181: 1016+7	00E4  FE6F    	    cp 'o'              ;out IO
 182: 1023+10	00E6  CABD01  	    jp z, CMD_IO_WRITE
 183: 1033+7	00E9  FE78    	    cp 'x'              ;start xmodem
 184: 1040+10	00EB  CA2F03  	    jp z, xmodem_init
 185:				
 186:				
 187: 1050+17	00EE  CD2602  	    call print_newLine
 188: 1067+10	00F1  21F202  	    ld hl, [STR_Unknown]
 189: 1077+17	00F4  CD1402  	    call print_str
 190: 1094+10	00F7  C37100  	    jp PROMPT_BEGIN
 191:				
 192: 1104+10	00FA  C9      	    ret
 193:				
 194:     -	00FB          	CMD_EXEC:
 195: 1114+4	00FB  AF      	    xor a                   ;write null byte to buffer pos 0 to prevent reexecute the last command
 196: 1118+13	00FC  320240  	    ld (var_buffer),a
 197:				
 198: 1131+10	00FF  210340  	    ld hl,var_buffer+1      ;load 1st byte
 199: 1141+17	0102  CD7202  	    call DHEX_TO_BYTE       
 200: 1158+4	0105  47      	    ld b,a                  ;store result in b
 201: 1162+4	0106  7B      	    ld a,e                  ;check for error
 202: 1166+4	0107  A7      	    and a
 203: 1170+10	0108  C20202  	    jp nz, CMD_SYNTAX_ERROR
 204:				
 205: 1180+10	010B  210540  	    ld hl,var_buffer+3      ;load 2nd byte
 206: 1190+17	010E  CD7202  	    call DHEX_TO_BYTE
 207: 1207+4	0111  4F      	    ld c,a
 208: 1211+4	0112  7B      	    ld a,e  ;check for error
 209: 1215+4	0113  A7      	    and a
 210: 1219+10	0114  C20202  	    jp nz, CMD_SYNTAX_ERROR
 211:				
 212: 1229+4	0117  60      	    ld h,b
 213: 1233+4	0118  69      	    ld l,c
 214: 1237+4	0119  E9      	    jp (hl)
 215:				
 216:     -	011A          	CMD_VIEW:
 217: 1241+10	011A  210340  	    ld hl,var_buffer+1      ;load 1st byte
 218: 1251+17	011D  CD7202  	    call DHEX_TO_BYTE       
 219: 1268+4	0120  47      	    ld b,a                  ;store result in b
 220: 1272+4	0121  7B      	    ld a,e                  ;check for error
 221: 1276+4	0122  A7      	    and a
 222: 1280+10	0123  C20202  	    jp nz, CMD_SYNTAX_ERROR
 223:				
 224: 1290+10	0126  210540  	    ld hl,var_buffer+3      ;load 2nd byte
 225: 1300+17	0129  CD7202  	    call DHEX_TO_BYTE
 226: 1317+4	012C  4F      	    ld c,a
 227: 1321+4	012D  7B      	    ld a,e  ;check for error
 228: 1325+4	012E  A7      	    and a
 229: 1329+10	012F  C20202  	    jp nz, CMD_SYNTAX_ERROR  
 230:				
 231:				
 232: 1339+13	0132  3A0740  	    ld a,(var_buffer+5)
 233: 1352+7	0135  FE20    	    cp ' '
 234: 1359+10	0137  C20202  	    jp nz, CMD_SYNTAX_ERROR
 235:				
 236: 1369+10	013A  210840  	    ld hl,var_buffer+6      ;load length
 237: 1379+17	013D  CD7202  	    call DHEX_TO_BYTE
 238: 1396+11	0140  F5      	    push af
 239: 1407+4	0141  7B      	    ld a,e  ;check for error
 240: 1411+4	0142  A7      	    and a
 241: 1415+10	0143  C20202  	    jp nz, CMD_SYNTAX_ERROR  
 242:				    
 243:				    ;draw header
 244: 1425+10	0146  21F902  	    ld hl,[STR_HEXDUMP_HEADER]
 245: 1435+17	0149  CD1402  	    call print_str
 246:				
 247: 1452+10	014C  F1      	    pop af
 248:				    ;loading vars done. display results
 249: 1462+4	014D  60      	    ld h, b ;pointer to current byte
 250: 1466+4	014E  69      	    ld l, c ;pointer to current byte
 251: 1470+4	014F  47      	    ld b, a                 ;bytes counter
 252:				
 253:				    ;draw row
 254:     -	0150          	CMD_VIEW_ROW:
 255: 1474+17	0150  CD2602  	    call print_newLine
 256: 1491+4	0153  7C      	    ld a,h              ;print start
 257: 1495+17	0154  CD3C02  	    call print_a_hex
 258: 1512+4	0157  7D      	    ld a,l
 259: 1516+17	0158  CD3C02  	    call print_a_hex
 260: 1533+7	015B  3E20    	    ld a, ' '
 261: 1540+17	015D  CD0E02  	    call print_char
 262: 1557+7	0160  0E10    	    ld c, 16                 ;column counter
 263:     -	0162          	CMD_VIEW_ROW_LOOP:
 264: 1564+7	0162  7E      	    ld a,(hl)
 265: 1571+17	0163  CD3C02  	    call print_a_hex
 266:				    
 267: 1588+6	0166  23      	    inc hl  ;increment pointer
 268: 1594+4	0167  05      	    dec b   ;decrement byte counter
 269: 1598+4	0168  0D      	    dec c   ;decrement column counter
 270:				
 271: 1602+4	0169  78      	    ld a,b
 272: 1606+4	016A  A7      	    and a
 273: 1610+10	016B  CA7B01  	    jp z,CMD_VIEW_END   ;if byte counter = 0 -> end reached
 274:				
 275: 1620+4	016E  79      	    ld a,c
 276: 1624+4	016F  A7      	    and a
 277: 1628+10	0170  CA5001  	    jp z,CMD_VIEW_ROW   ;else if column counter = 0 -> 16 chars printed. next row
 278:				
 279: 1638+7	0173  3E20    	    ld a, ' '
 280: 1645+17	0175  CD0E02  	    call print_char
 281: 1662+10	0178  C36201  	    jp CMD_VIEW_ROW_LOOP    ;else
 282:     -	017B          	CMD_VIEW_END:
 283: 1672+17	017B  CD2602  	    call print_newLine
 284: 1689+10	017E  C37100  	    jp PROMPT_BEGIN
 285:				
 286:     -	0181          	CMD_SET:
 287: 1699+10	0181  210340  	    ld hl,var_buffer+1      ;load 1st byte
 288: 1709+17	0184  CD7202  	    call DHEX_TO_BYTE       
 289: 1726+4	0187  47      	    ld b,a                  ;store result in b
 290: 1730+4	0188  7B      	    ld a,e                  ;check for error
 291: 1734+4	0189  A7      	    and a
 292: 1738+10	018A  C20202  	    jp nz, CMD_SYNTAX_ERROR
 293:				
 294: 1748+10	018D  210540  	    ld hl,var_buffer+3      ;load 2nd byte
 295: 1758+17	0190  CD7202  	    call DHEX_TO_BYTE
 296: 1775+4	0193  4F      	    ld c,a
 297: 1779+4	0194  7B      	    ld a,e  ;check for error
 298: 1783+4	0195  A7      	    and a
 299: 1787+10	0196  C20202  	    jp nz, CMD_SYNTAX_ERROR    
 300:				    ;bc now contains the start address
 301:				
 302: 1797+10	0199  210740  	    ld hl,var_buffer+5
 303:     -	019C          	CMD_SET_LOOP:
 304: 1807+7	019C  7E      	    ld a,(hl)
 305: 1814+7	019D  FE00    	    cp 0    ;if 0 then end
 306: 1821+10	019F  CAB701  	    jp z, CMD_SET_END
 307: 1831+7	01A2  FE20    	    cp ' '
 308: 1838+10	01A4  C20202  	    jp nz, CMD_SYNTAX_ERROR
 309: 1848+6	01A7  23      	    inc hl  ;next byte
 310: 1854+17	01A8  CD7202  	    call DHEX_TO_BYTE
 311: 1871+7	01AB  02      	    ld (bc),a   ;load byte to 
 312: 1878+4	01AC  7B      	    ld a,e
 313: 1882+4	01AD  A7      	    and a
 314: 1886+10	01AE  C20202  	    jp nz, CMD_SYNTAX_ERROR    
 315: 1896+6	01B1  03      	    inc bc
 316: 1902+6	01B2  23      	    inc hl
 317: 1908+6	01B3  23      	    inc hl
 318: 1914+10	01B4  C39C01  	    jp CMD_SET_LOOP
 319:     -	01B7          	CMD_SET_END:
 320: 1924+17	01B7  CD2602  	    call print_newLine
 321: 1941+10	01BA  C37100  	    jp PROMPT_BEGIN
 322:				
 323:				
 324:     -	01BD          	CMD_IO_WRITE:
 325: 1951+10	01BD  210340  	    ld hl,var_buffer+1      ;load 1st byte
 326: 1961+17	01C0  CD7202  	    call DHEX_TO_BYTE       
 327: 1978+4	01C3  4F      	    ld c,a                  ;store result in b
 328: 1982+4	01C4  7B      	    ld a,e                  ;check for error
 329: 1986+4	01C5  A7      	    and a
 330: 1990+10	01C6  C20202  	    jp nz, CMD_SYNTAX_ERROR
 331:				
 332: 2000+13	01C9  3A0540  	    ld a,(var_buffer+3)
 333: 2013+7	01CC  FE20    	    cp ' '
 334: 2020+10	01CE  C20202  	    jp nz, CMD_SYNTAX_ERROR
 335:				
 336: 2030+10	01D1  210640  	    ld hl,var_buffer+4      ;load 1st byte
 337: 2040+17	01D4  CD7202  	    call DHEX_TO_BYTE       
 338: 2057+11	01D7  F5      	    push af
 339: 2068+4	01D8  7B      	    ld a,e                  ;check for error
 340: 2072+4	01D9  A7      	    and a
 341: 2076+10	01DA  C20202  	    jp nz, CMD_SYNTAX_ERROR
 342:				
 343: 2086+10	01DD  F1      	    pop af
 344: 2096+12	01DE  ED79    	    out (c),a    
 345: 2108+17	01E0  CD2602  	    call print_newLine
 346: 2125+10	01E3  C37100  	    jp PROMPT_BEGIN
 347:				
 348:     -	01E6          	CMD_IO_READ:
 349: 2135+10	01E6  210340  	    ld hl,var_buffer+1      ;load 1st byte
 350: 2145+17	01E9  CD7202  	    call DHEX_TO_BYTE       
 351: 2162+4	01EC  4F      	    ld c,a                  ;store result in b
 352: 2166+4	01ED  7B      	    ld a,e                  ;check for error
 353: 2170+4	01EE  A7      	    and a
 354: 2174+10	01EF  C20202  	    jp nz, CMD_SYNTAX_ERROR
 355:				
 356: 2184+12	01F2  ED78    	    in a,(c)
 357: 2196+11	01F4  F5      	    push af
 358: 2207+17	01F5  CD2602  	    call print_newLine
 359: 2224+10	01F8  F1      	    pop af
 360: 2234+17	01F9  CD3C02  	    call print_a_hex
 361: 2251+17	01FC  CD2602  	    call print_newLine
 362: 2268+10	01FF  C37100  	    jp PROMPT_BEGIN
 363:				
 364:     -	0202          	CMD_SYNTAX_ERROR:
 365: 2278+17	0202  CD2602  	    call print_newLine
 366: 2295+10	0205  21EB02  	    ld hl, [STR_SyntaxError]
 367: 2305+17	0208  CD1402  	    call print_str
 368: 2322+10	020B  C37100  	    jp PROMPT_BEGIN
 369:				
 370:				
 371:				
 372:     -	020E          	Includes:
 373:				.include "console.s"
**** include/console.s ****
   1:				
   2:				
   3:				; A contains char
   4:				; Destroys A
   5:     -	020E          	print_char:
   6: 2332+11	020E  D311    	    out (IO_SIO0B_D),a
   7: 2343+17	0210  CD3102  	    call print_wait_out
   8: 2360+10	0213  C9      	    ret
   9:				; HL contains pointer to string
  10:				; Destroy A, HL
  11:				
  12:     -	0214          	print_str:
  13: 2370+7	0214  7E      	    ld a, (hl)
  14: 2377+4	0215  B7      	    or a
  15: 2381+7+5	0216  2806    	    jr z,print_str_end
  16: 2388+17	0218  CD0E02  	    call print_char
  17: 2405+6	021B  23      	    inc hl
  18: 2411+12	021C  18F6    	    jr print_str
  19:     -	021E          	print_str_end:
  20: 2423+10	021E  C9      	    ret
  21:				
  22:     -	021F          	print_clear:
  23: 2433+10	021F  215802  	    ld hl, [MSG_CLEAR]
  24: 2443+17	0222  CD1402  	    call print_str
  25: 2460+10	0225  C9      	    ret
  26:				
  27:     -	0226          	print_newLine:
  28: 2470+7	0226  3E0A    	    ld a,10
  29: 2477+17	0228  CD0E02  	    call print_char
  30: 2494+7	022B  3E0D    	    ld a,13
  31: 2501+17	022D  CD0E02  	    call print_char
  32: 2518+10	0230  C9      	    ret
  33:				; destroys a
  34:     -	0231          	print_wait_out:
  35:				    ; check for TX buffer empty
  36: 2528+4	0231  97      	    sub a ;clear a, write into WR0: select RR0
  37: 2532+4	0232  3C      	    inc a ;select RR1
  38: 2536+11	0233  D313    	    out (IO_SIO0B_C),A
  39: 2547+11	0235  DB13    	    in A,(IO_SIO0B_C) ;read RRx
  40: 2558+8	0237  CB47    	    bit 0,A
  41: 2566+7+5	0239  28F6    	    jr z,print_wait_out
  42: 2573+10	023B  C9      	    ret
  43:				
  44:     -	023C          	print_a_hex:
  45: 2583+11	023C  F5      	    push af
  46: 2594+11	023D  C5      	    push bc
  47: 2605+11	023E  D5      	    push de
  48: 2616+17	023F  CDA902  	    call STRCONV_BYTES_TO_HEX
  49: 2633+4	0242  78      	    ld a,b
  50: 2637+17	0243  CD0E02  	    call print_char
  51: 2654+4	0246  79      	    ld a,c
  52: 2658+17	0247  CD0E02  	    call print_char
  53: 2675+10	024A  D1      	    pop de
  54: 2685+10	024B  C1      	    pop bc
  55: 2695+10	024C  F1      	    pop af
  56:				
  57:     -	024D          	read_char:
  58: 2705+4	024D  AF      	    xor a               ; a = 0
  59: 2709+11	024E  D313    	    out (IO_SIO0B_C), a ; select reg 0
  60: 2720+11	0250  DB13    	    in a, (IO_SIO0B_C)  ; read reg 0
  61: 2731+7	0252  E601    	    and	1               ; mask D0 (recieve char available)
  62: 2738+5+6	0254  C8      	    ret	Z               ; return 0 if no char
  63: 2743+11	0255  DB11    	    in a, (IO_SIO0B_D)  ; read char if avail
  64: 2754+10	0257  C9      	    ret                 ; return
  65:				
  66:				;MSG_CRSR_0:
  67:				;    db 0x1B, "[?25h",0
  68:				;MSG_CRSR_1:
  69:				;    db 0x1B, "[?25l",0
  70:     -	0258          	MSG_CLEAR:
  71:     -	0258  1B5B324A	    db 27, '[2J', 27, '[H',0
	              1B5B4800
  72:				
  73:				
  74:				
  75:				; Serial Util Functions
  76:     -	0260          	A_RTS_OFF:
  77: 2764+7	0260  3E05    	    ld a,005h ;write into WR0: select WR5
  78: 2771+11	0262  D313    	    out (IO_SIO0B_C),A
  79: 2782+7	0264  3EE8    	    ld a,0E8h ;DTR active, TX 8bit, BREAK off, TX on, RTS inactive
  80: 2789+11	0266  D313    	    out (IO_SIO0B_C),A
  81: 2800+10	0268  C9      	    ret
  82:     -	0269          	A_RTS_ON:
  83: 2810+7	0269  3E05    	    ld a,005h ;write into WR0: select WR5
  84: 2817+11	026B  D313    	    out (IO_SIO0B_C),A
  85: 2828+7	026D  3EEA    	    ld a,0EAh ;DTR active, TX 8bit, BREAK off, TX on, RTS active
  86: 2835+11	026F  D313    	    out (IO_SIO0B_C),A
**** main.asm ****
 374: 2846+10	0271  C9      	    ret
 375:				.include "conversions.s"
**** include/conversions.s ****
   1:				; HL Contains Address to string
   2:				; E is 0xFF if error
   3:				; E is 0x00 if okay
   4:				; A returns byte
   5:				; A,DE are destroyed
   6:     -	0272          	DHEX_TO_BYTE:
   7: 2856+11	0272  E5      	    PUSH HL             ;Backup pointer
   8:				    ; Load First Byte
   9: 2867+7	0273  7E      	    LD A,(HL)           ;Load first char (high)
  10: 2874+17	0274  CD9202  	    CALL HEX_TO_BIN     ;Conv chart to 4bit
  11: 2891+7+5	0277  3815    	    jr C, DHEX_TO_BYTE_FAILED   ;If error jmp to DHEX_TO_BYTE_FAILED
  12: 2898+8	0279  CB27    	    SLA A               ;shift result to upper 4 bits
  13: 2906+8	027B  CB27    	    SLA A
  14: 2914+8	027D  CB27    	    SLA A
  15: 2922+8	027F  CB27    	    SLA A
  16: 2930+4	0281  57      	    LD D,A              ;store result in D
  17:				
  18: 2934+6	0282  23      	    INC HL              ;next byte
  19: 2940+7	0283  7E      	    LD A,(HL)           ;load 2nd char (lower)
  20: 2947+17	0284  CD9202  	    CALL HEX_TO_BIN     ;Conv chart to 4bit
  21: 2964+7+5	0287  3805    	    jr C, DHEX_TO_BYTE_FAILED   ;If error jmp to DHEX_TO_BYTE_FAILED
  22: 2971+4	0289  B2      	    OR D                ;merge D with accumulator
  23:				
  24: 2975+10	028A  E1      	    POP HL              ;restor original pointer
  25: 2985+7	028B  1E00    	    LD E,0x00           ;set error to 0x00 = no error
  26: 2992+10	028D  C9      	    RET
  27:     -	028E          	DHEX_TO_BYTE_FAILED:
  28: 3002+7	028E  1EFF    	    LD E,0xFF           ;set error to oxFF
  29:				    ;LD A,0x00
  30: 3009+10	0290  E1      	    POP HL
  31: 3019+10	0291  C9      	    RET
  32:				
  33:				; REG A Contains CHAR-Low
  34:				; If failed, Carry is set
  35:     -	0292          	HEX_TO_BIN:
  36: 3029+7	0292  D630    	    SUB 48 ; 0 is 0
  37: 3036+10	0294  EAA702  	    jp PE, HEX_TO_INVALID_2; to low (SUB overflow)
  38: 3046+7	0297  FE0A    	    CP 10 ; Value is between 0 and 9
  39: 3053+7+5	0299  3805    	    JR C, HEX_TO_BIN_2
  40: 3060+7	029B  D607    	    SUB 7
  41: 3067+10	029D  EAA702  	    jp PE, HEX_TO_INVALID_2; to low (SUB overflow)
  42:     -	02A0          	HEX_TO_BIN_2:
  43: 3077+7	02A0  FE10    	    CP 16
  44: 3084+7+5	02A2  3003    	    JR NC, HEX_TO_INVALID_2; if bigger than 15-> fail
  45: 3091+7	02A4  E60F    	    AND 0x0F
  46: 3098+10	02A6  C9      	    RET
  47:     -	02A7          	HEX_TO_INVALID_2:
  48: 3108+4	02A7  37      	    SCF ;set carry flag
  49: 3112+10	02A8  C9      	    RET
  50:				
  51:				
  52:				;*****************
  53:				; Convert Byte to Hex Char (ASCII)
  54:				;*****************
  55:				;Description: the StrLength function inline
  56:				;
  57:				;Inputs: A contains input byte
  58:				;
  59:				;Outputs: BC contains 2 Bytes of ASCII (HEX)
  60:				;
  61:				;Destroys: A, BC,
  62:     -	02A9          	STRCONV_BYTES_TO_HEX:
  63: 3122+11	02A9  F5      	    PUSH AF;Backup A Register
  64: 3133+4	02AA  1F      	    RRA
  65: 3137+4	02AB  1F      	    RRA
  66: 3141+4	02AC  1F      	    RRA
  67: 3145+4	02AD  1F      	    RRA
  68: 3149+17	02AE  CDB802  	    CALL STRCONV_BYTES_TO_HEX_1
  69:				    ;LD A,D
  70: 3166+4	02B1  47      	    LD B,A  
  71: 3170+10	02B2  F1      	    POP AF ; Reload first Byte
  72: 3180+17	02B3  CDB802  	    CALL STRCONV_BYTES_TO_HEX_1
  73:				    ;LD A,D
  74: 3197+4	02B6  4F      	    LD C,A
  75: 3201+10	02B7  C9      	    RET
  76:				
  77:     -	02B8          	STRCONV_BYTES_TO_HEX_1:
  78: 3211+7	02B8  E60F    	    AND 0x0F
  79: 3218+7	02BA  C630    	    ADD 48
  80: 3225+7	02BC  FE3A    	    CP 58 ; Check if less than 58 (less than ASCII 9)
  81:				    ;JR C, STRCONV_BYTES_TO_HEX_2
  82: 3232+5+6	02BE  D8      	    RET C
  83: 3237+7	02BF  C607    	    ADD 7 ; A-F
  84: 3244+10	02C1  C9      	    RET
  85:     -	02C2          	STRCONV_BYTES_TO_HEX_2:
  86:				    ;LD D,A
  87: 3254+10	02C2  C9      	    RET
  88:				
  89:				
**** main.asm ****
 376:				; Strings
 377:     -	02C3          	STR_Banner_Start:
 378:     -	02C3  5A384320	    db "Z8C Monitor V2 by Dennis Gunia (2022)",10,13,0
	              4D6F6E69
	              746F7220
	              56322062
	              79204465
	              6E6E6973
	              2047756E
	              69612028
	              32303232
	              290A0D00
 379:     -	02EB          	STR_SyntaxError:
 380:     -	02EB  73796E3F	    db "syn?",10,13,0
	              0A0D00
 381:     -	02F2          	STR_Unknown:
 382:     -	02F2  636D643F	    db "cmd?",10,13,0
	              0A0D00
 383:     -	02F9          	STR_HEXDUMP_HEADER:
 384:     -	02F9  0D0A4241	    db 13,10,'BASE 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F',0
	              53452030
	              20203120
	              20322020
	              33202034
	              20203520
	              20362020
	              37202038
	              20203920
	              20412020
	              42202043
	              20204420
	              20452020
	              4600
 385:				
 386:				.include "xmodem.s"
**** include/xmodem.s ****
   1:				;Z80 XMODEM implementation by Dennis Gunia
   2:     -	0001          	SYM_SOH equ 0x01
   3:     -	0004          	SYM_EOT equ 0x04
   4:     -	0006          	SYM_ACK equ 0x06
   5:     -	0015          	SYM_NAK equ 0x15
   6:     -	0017          	SYM_ETB equ 0x17
   7:     -	0018          	SYM_CAN equ 0x18
   8:     -	0043          	SYM_C   equ 0x43
   9:				
  10:     -	40FB          	MEM_VAR_BLOCK equ 0x40FB    ;last block
  11:     -	40FC          	MEM_VAR_TIMEA equ 0x40FC    ;timer var (mills)
  12:     -	40FE          	MEM_VAR_TIMER equ 0x40FE    ;timer var (seconds)
  13:     -	40FE          	MEM_INT_VEC_T equ 0x40FE    ;interrupt vector table
  14:				
  15:     -	4400          	MEM_LOC_LOAD  equ 0x4400    ;load location for program
  16:				
  17:				;important doc: https://web.mit.edu/6.115/www/amulet/xmodem.htm
  18:				
  19:     -	032F          	xmodem_init:
  20: 3264+17	032F  CD6002  	    call A_RTS_OFF
  21:				    
  22: 3281+7	0332  3EA7    	    LD A,10100111b      ; Init CTC Channel 3
  23: 3288+11	0334  D302    	    OUT (IO_CTC0_C2),A
  24: 3299+7	0336  3E0E    	    LD A,14             ; 1028.57Hz ISR
  25: 3306+11	0338  D302    	    OUT (IO_CTC0_C2),A
  26: 3317+7	033A  3E00    	    LD A,00h            ; Set CTC Ch3 Interrupt Vector
  27: 3324+11	033C  D300    	    OUT (IO_CTC0_C0),A
  28:				    ;load int vector to ram
  29: 3335+10	033E  210C04  	    ld hl,xmodem_int        ;CTC Ch3 INT routine
  30: 3345+16	0341  220442  	    ld (0x4200 + 0x04),hl   
  31:				    ;reset timer vars
  32: 3361+10	0344  210000  	    ld hl,0x0000
  33: 3371+16	0347  22FC40  	    ld (MEM_VAR_TIMEA),hl
  34: 3387+16	034A  22FE40  	    ld (MEM_VAR_TIMER),hl
  35:				
  36: 3403+7	034D  3E42    	    ld a,0x42           ; Set interrupt vector register
  37: 3410+9	034F  ED47    	    ld i,a
  38: 3419+8	0351  ED5E    	    im 2                ; Z80 Interrupt mode
  39:				
  40: 3427+10	0353  218704  	    ld hl,MSG_START     ; Print start banner
  41: 3437+17	0356  CD1402  	    call print_str
  42: 3454+4	0359  FB      	    ei                  ; Enable interrupts
  43:				    ; init done. Continue with xmodem_await_conn
  44:				
  45:     -	035A          	xmodem_await_conn:          ;Wait for initial connection
  46: 3458+7	035A  3E43    	    ld a, SYM_C             ;Send C to notify sender, that we want CRC
  47: 3465+17	035C  CD5D04  	    call xmodem_out         
  48: 3482+17	035F  CD3004  	    call xmodem_read_wait   ;Read with timeout
  49: 3499+10	0362  DA5A03  	    jp c, xmodem_await_conn ;Carry flag set = timeout -> repeat
  50:				    ;else continue
  51:				
  52:     -	0365          	xmodem_packet:              ;XmodemCRC packet start
  53:				    ;use 1st byte to decide further processing
  54: 3509+7	0365  FE04    	    cp SYM_EOT              ;End of Transmission 
  55: 3516+10	0367  CAC303  	    jp z, xmodem_packet_EOT
  56: 3526+7	036A  FE18    	    cp SYM_CAN              ;Cancel (Force receiver to start sending C's)
  57: 3533+10	036C  CA5A03  	    jp z, xmodem_await_conn
  58: 3543+7	036F  FE01    	    cp SYM_SOH              ;Start of 
  59: 3550+10	0371  CA7703  	    jp z, xmodem_packet_get
  60:				
  61: 3560+10	0374  C3CB03  	    jp xmodem_err           ;anything else is an error -> abort transmission
  62:				
  63:     -	0377          	xmodem_packet_get:          ;if first byte == SYM_SOH -> receive block
  64: 3570+17	0377  CD3004  	    call xmodem_read_wait   ;get byte 2 => block ID
  65: 3587+10	037A  DAAF04  	    jp c, xmodem_nak
  66: 3597+4	037D  47      	    ld b,a
  67: 3601+13	037E  32FB40  	    ld (MEM_VAR_BLOCK), a   ;store block id to memory
  68: 3614+17	0381  CD3004  	    call xmodem_read_wait   ;get byte 3 => block ID complement 
  69: 3631+10	0384  DAAF04  	    jp c, xmodem_nak
  70: 3641+4	0387  80      	    add b
  71: 3645+7	0388  FEFF    	    cp 255                  ;both size infos should always sum to 255
  72: 3652+10	038A  C2CB03  	    jp nz,xmodem_err        ;if not 255 then its an error
  73:				
  74:				    ;calculate block start address in RAM
  75:				    ;multiply by 128
  76:				    ;use more efficient bit-wise operations
  77: 3662+4	038D  3D      	    dec a       ;a-1 to remove 1 sector offset
  78: 3666+4	038E  78      	    ld a,b
  79: 3670+4	038F  1F      	    rra         ;shift 1 bit to the right
  80: 3674+7	0390  E67F    	    and 0x7F
  81: 3681+4	0392  67      	    ld h,a
  82: 3685+4	0393  78      	    ld a,b
  83: 3689+4	0394  3D      	    dec a       ;a-1 to remove 1 sector offset
  84: 3693+4	0395  0F      	    rrca        ;shift bit0 to bit 7
  85: 3697+7	0396  E680    	    and 0x80    ;mask out all other bits
  86: 3704+4	0398  6F      	    ld l,a
  87:				    ;result:
  88:				    ;hl = 0aaaaaaa a000000
  89:				
  90: 3708+10	0399  110044  	    ld de,MEM_LOC_LOAD  
  91: 3718+11	039C  19      	    add hl,de               ;add calculated offset to base address
  92:				    ;hl now contains the true start address of this sector
  93:				
  94: 3729+7	039D  0680    	    ld b,128    ;preload counter for data baytes
  95: 3736+7	039F  0E00    	    ld c,0      ;packet length counter ( used for overflow error )
  96:				
  97:     -	03A1          	xmodem_packet_get_data: ;get 128 data bytes (loop)
  98: 3743+11	03A1  E5      	    push hl                 ;push hl onto stack because xmodem_read_wait destroys hl
  99: 3754+17	03A2  CD3004  	    call xmodem_read_wait   ;read byte or timeout
 100: 3771+10	03A5  DAAF04  	    jp c, xmodem_nak        ;if timeout -> nak and retry
 101: 3781+10	03A8  E1      	    pop hl                  ;restore hl
 102: 3791+7	03A9  77      	    ld (hl), a              ;store received byte in memory
 103: 3798+6	03AA  23      	    inc hl                  ;increment pointer
 104: 3804+4	03AB  0C      	    inc c                   ;increment packet length counter 
 105: 3808+4	03AC  05      	    dec b                   ;decerment data bytes remmaining
 106: 3812+10	03AD  C2A103  	    jp nz, xmodem_packet_get_data   ;if bytes remaining, loop
 107:				    ;else continue with crc bytes
 108:				
 109:     -	03B0          	xmodem_packet_get_crc:      ;get 16-Bit CRC
 110: 3822+17	03B0  CD3004  	    call xmodem_read_wait  
 111: 3839+10	03B3  DAAF04  	    jp c, xmodem_nak
 112: 3849+4	03B6  57      	    ld d,a
 113: 3853+4	03B7  0C      	    inc c
 114: 3857+17	03B8  CD3004  	    call xmodem_read_wait   
 115: 3874+10	03BB  DAAF04  	    jp c, xmodem_nak
 116: 3884+4	03BE  5F      	    ld e,a 
 117: 3888+4	03BF  0C      	    inc c
 118:				    ;de now contains CRC value
 119:				    ;check if c is not bigger than 130 byte (128 data + 2crc)
 120:				    ;TODO if so NACK
 121:				
 122:				    ;de contains 16-bit CRC
 123:				    ;TODO if crc error NACK
 124: 3892+10	03C0  C3A104  	    jp xmodem_ack         ;ack block -> then jump to start again
 125:				
 126:     -	03C3          	xmodem_packet_EOT:          ;End of transmission SUB. 
 127: 3902+7	03C3  3E06    	    ld a, SYM_ACK           ;Acknowledge EOT
 128: 3909+17	03C5  CD5D04  	    call xmodem_out
 129: 3926+10	03C8  C30504  	    jp xmodem_end           ;and end xmodem
 130:				
 131:				
 132:				
 133:     -	03CB          	xmodem_err:                 ;non recoverable error -> abort
 134: 3936+7	03CB  3E18    	    ld a, SYM_CAN
 135: 3943+17	03CD  CD5D04  	    call xmodem_out
 136: 3960+7	03D0  3E18    	    ld a, SYM_CAN
 137: 3967+17	03D2  CD5D04  	    call xmodem_out
 138: 3984+7	03D5  3E18    	    ld a, SYM_CAN
 139: 3991+17	03D7  CD5D04  	    call xmodem_out
 140: 4008+7	03DA  3E18    	    ld a, SYM_CAN
 141: 4015+17	03DC  CD5D04  	    call xmodem_out
 142: 4032+7	03DF  3E18    	    ld a, SYM_CAN
 143: 4039+17	03E1  CD5D04  	    call xmodem_out
 144: 4056+7	03E4  3E18    	    ld a, SYM_CAN
 145: 4063+17	03E6  CD5D04  	    call xmodem_out
 146: 4080+7	03E9  3E18    	    ld a, SYM_CAN
 147: 4087+17	03EB  CD5D04  	    call xmodem_out
 148: 4104+7	03EE  3E18    	    ld a, SYM_CAN
 149: 4111+17	03F0  CD5D04  	    call xmodem_out
 150: 4128+7	03F3  3E18    	    ld a, SYM_CAN
 151: 4135+17	03F5  CD5D04  	    call xmodem_out
 152: 4152+7	03F8  3E18    	    ld a, SYM_CAN
 153: 4159+17	03FA  CD5D04  	    call xmodem_out
 154: 4176+7	03FD  3E18    	    ld a, SYM_CAN
 155:				
 156: 4183+10	03FF  216E04  	    ld hl, MSG_ERROR
 157: 4193+17	0402  CD1402  	    call print_str
 158:				
 159:				    ;overflow to end
 160:     -	0405          	xmodem_end:
 161: 4210+4	0405  F3      	    di                      ;disable interrupts
 162: 4214+17	0406  CD2602  	    call print_newLine      ;print new line
 163: 4231+10	0409  C37100  	    jp PROMPT_BEGIN         ;return ti prompt
 164:				
 165:				;isr is used as counter for timeouts
 166:     -	040C          	xmodem_int:
 167: 4241+4	040C  F3      	    di                      ;setup ISR (disable further interrupts, exchange registers)
 168: 4245+4	040D  08      	    ex AF,AF'
 169: 4249+4	040E  D9      	    exx
 170:				
 171: 4253+16	040F  2AFC40  	    ld hl,(MEM_VAR_TIMEA)   ;millis counter
 172: 4269+6	0412  23      	    inc hl
 173: 4275+16	0413  22FC40  	    ld (MEM_VAR_TIMEA),hl
 174:				
 175: 4291+10	0416  110404  	    ld de,1028              ;every 1028 millis counter
 176: 4301+15	0419  ED52    	    sbc hl,de
 177: 4316+10	041B  C22B04  	    jp nz, xmodem_int_cont  ;if less than 1028 millis, loop
 178:				
 179: 4326+10	041E  210000  	    ld hl,0                 ;reset millis
 180: 4336+16	0421  22FC40  	    ld (MEM_VAR_TIMEA),hl   
 181: 4352+16	0424  2AFE40  	    ld hl,(MEM_VAR_TIMER)   ;incement seconds
 182: 4368+6	0427  23      	    inc hl
 183: 4374+16	0428  22FE40  	    ld (MEM_VAR_TIMER),hl
 184:     -	042B          	xmodem_int_cont:            ;end isr
 185: 4390+4	042B  08      	    ex AF,AF'               ;restore registers
 186: 4394+4	042C  D9      	    exx
 187: 4398+4	042D  FB      	    EI                      ;enable interrupts
 188: 4402+14	042E  ED4D    	    reti                    ;exit ISR
 189:				
 190:				
 191:				
 192:				
 193:				
 194:				; A returns char
 195:				; Carry is set if timeout
 196:     -	0003          	xmodem_read_timeount    equ     3  ;3 seconds timeout
 197:     -	0430          	xmodem_read_wait:
 198: 4416+4	0430  F3      	    di
 199: 4420+10	0431  210000  	    ld hl,0
 200: 4430+16	0434  22FC40  	    ld (MEM_VAR_TIMEA),hl
 201: 4446+16	0437  22FE40  	    ld (MEM_VAR_TIMER),hl
 202: 4462+4	043A  FB      	    ei
 203: 4466+17	043B  CD6902  	    call A_RTS_ON
 204:     -	043E          	xmodem_read_wait_loop:
 205:				    ;check timeout
 206: 4483+16	043E  2AFE40  	    ld hl,(MEM_VAR_TIMER)
 207: 4499+4	0441  7D      	    ld a, l
 208: 4503+7	0442  FE03    	    cp xmodem_read_timeount
 209: 4510+10	0444  CA5B04  	    jp z, xmodem_read_wait_timeout    ;if timeout retry
 210:				
 211:				    ; if no timeout
 212: 4520+4	0447  AF      	    xor a               ; a = 0
 213: 4524+11	0448  D313    	    out (IO_SIO0B_C), a ; select reg 0
 214: 4535+11	044A  DB13    	    in a, (IO_SIO0B_C)  ; read reg 0
 215: 4546+7	044C  E601    	    and	1               ; mask D0 (recieve char available)
 216: 4553+10	044E  CA3E04  	    jp Z,xmodem_read_wait_loop  ; wait if no char
 217:				    
 218:				    ; if char avail
 219: 4563+11	0451  DB11    	    in a, (IO_SIO0B_D)  ; read char 
 220:				    ;call debug_a_hex
 221: 4574+11	0453  F5      	    push af
 222: 4585+17	0454  CD6002  	    call A_RTS_OFF
 223: 4602+10	0457  F1      	    pop af
 224: 4612+4	0458  37      	    scf
 225: 4616+4	0459  3F      	    ccf
 226: 4620+10	045A  C9      	    ret                 ; return
 227:     -	045B          	xmodem_read_wait_timeout:
 228: 4630+4	045B  37      	    scf
 229: 4634+10	045C  C9      	    ret
 230:				
 231:				
 232:     -	045D          	xmodem_out:
 233: 4644+11	045D  D311    	    out (IO_SIO0B_D), a
 234: 4655+17	045F  CD6304  	    call xmodem_wait_out
 235: 4672+10	0462  C9      	    ret
 236:				
 237:     -	0463          	xmodem_wait_out:
 238: 4682+4	0463  97      	    sub a ;clear a, write into WR0: select RR0
 239: 4686+4	0464  3C      	    inc a ;select RR1
 240: 4690+11	0465  D313    	    out (IO_SIO0B_C),A
 241: 4701+11	0467  DB13    	    in A,(IO_SIO0B_C) ;read RRx
 242: 4712+8	0469  CB47    	    bit 0,A
 243: 4720+7+5	046B  28F6    	    jr z,xmodem_wait_out
 244: 4727+10	046D  C9      	    ret
 245:				
 246:     -	046E          	MSG_ERROR:
 247:     -	046E  4572726F	    db "Error: unexpected byte",13,10,0
	              723A2075
	              6E657870
	              65637465
	              64206279
	              74650D0A
	              00
 248:				
 249:     -	0487          	MSG_START:
 250:     -	0487  41776169	    db "Await xmodem connection",13,10,0
	              7420786D
	              6F64656D
	              20636F6E
	              6E656374
	              696F6E0D
	              0A00
 251:				
 252:				
 253:     -	04A1          	xmodem_ack:             ;ack routine. Only use when expecting transmission afterwards.
 254: 4737+7	04A1  3E06    	    ld a, SYM_ACK       ;send ACK
 255: 4744+17	04A3  CD5D04  	    call xmodem_out 
 256: 4761+17	04A6  CD3004  	    call xmodem_read_wait   ;wait for response
 257: 4778+10	04A9  DAA104  	    jp c, xmodem_ack        ;if timeout repeat
 258: 4788+10	04AC  C36503  	    jp xmodem_packet        ;if received, continue with new packet
 259:				
 260:     -	04AF          	xmodem_nak:             ;nak routine. Only use when expecting transmission afterwards.
 261: 4798+7	04AF  3E15    	    ld a, SYM_NAK           ;send NAK
 262: 4805+17	04B1  CD5D04  	    call xmodem_out         
 263: 4822+17	04B4  CD3004  	    call xmodem_read_wait   ;wait for response
 264: 4839+10	04B7  DAAF04  	    jp c, xmodem_nak        ;if timeout repeat
 265: 4849+10	04BA  C36503  	    jp xmodem_packet        ;if received, continue with new packet
**** main.asm ****
**** main.asm ****
 387:				;.include "debug.s"



Statistics:

     4	passes
     0	jr promotions
   125	symbols
  1213	bytes



Symbol Table:

AY0_WRITE_REG   69        105
A_RTS_OFF        260      608
A_RTS_ON         269      617
CMD_EXEC        FB        251
CMD_IO_READ      1E6      486
CMD_IO_WRITE     1BD      445
CMD_SET          181      385
CMD_SET_END      1B7      439
CMD_SET_LOOP     19C      412
CMD_SYNTAX_ERROR  202      514
CMD_VIEW         11A      282
CMD_VIEW_END     17B      379
CMD_VIEW_ROW     150      336
CMD_VIEW_ROW_LOOP  162      354
DHEX_TO_BYTE     272      626
DHEX_TO_BYTE_FAILED  28E      654
HEX_TO_BIN       292      658
HEX_TO_BIN_2     2A0      672
HEX_TO_INVALID_2  2A7      679
IO_AY0_ADDR    =40        64
IO_AY0_DATA    =41        65
IO_AY1_ADDR    =42        66
IO_AY1_DATA    =43        67
IO_CTC0_C0     =00        0
IO_CTC0_C1     =01        1
IO_CTC0_C2     =02        2
IO_CTC0_C3     =03        3
IO_REG0        =20        32
IO_RTC_AMPM    =25        37
IO_RTC_CTR_D   =2D        45
IO_RTC_CTR_E   =2E        46
IO_RTC_CTR_F   =2F        47
IO_RTC_DAY0    =26        38
IO_RTC_DAY1    =27        39
IO_RTC_HOUR    =24        36
IO_RTC_MIN0    =22        34
IO_RTC_MIN1    =23        35
IO_RTC_MON0    =28        40
IO_RTC_MON1    =29        41
IO_RTC_SEC0    =20        32
IO_RTC_SEC1    =21        33
IO_RTC_WEEK    =2C        44
IO_RTC_YEAR1   =2B        43
IO_RTC_YERR0   =2A        42
IO_SIO0A_C     =12        18
IO_SIO0A_D     =10        16
IO_SIO0B_C     =13        19
IO_SIO0B_D     =11        17
Includes         20E      526
MEM_INT_VEC_T  =40FE      16638
MEM_LOC_LOAD   =4400      17408
MEM_VAR_BLOCK  =40FB      16635
MEM_VAR_TIMEA  =40FC      16636
MEM_VAR_TIMER  =40FE      16638
MSG_CLEAR        258      600
MSG_ERROR        46E      1134
MSG_START        487      1159
PRG_RAM_START  =4110      16656
PRG_RAM_TOP    =FF00      65280
PROG_MEM_START =4000      16384
PROG_ROM_START = 100      256
PROMPT_BEGIN    71        113
PROMPT_BEGIN_READ_BACKSPACE A7        167
PROMPT_BEGIN_READ_LOOP 7D        125
PROMPT_BEGIN_READ_PROCESS CD        205
STACK_RAM_TOP  =FFFF      65535
START_ROM      =00        0
STRCONV_BYTES_TO_HEX  2A9      681
STRCONV_BYTES_TO_HEX_1  2B8      696
STRCONV_BYTES_TO_HEX_2  2C2      706
STR_Banner_Start  2C3      707
STR_HEXDUMP_HEADER  2F9      761
STR_SyntaxError  2EB      747
STR_Unknown      2F2      754
SYM_ACK        =06        6
SYM_C          =43        67
SYM_CAN        =18        24
SYM_EOT        =04        4
SYM_ETB        =17        23
SYM_NAK        =15        21
SYM_SOH        =01        1
SYS_BUF_START  =4010      16400
SYS_RAM_START  =4000      16384
VAR_CONSOLE_BAUD=18        24
VAR_CONSOLE_CONF=0F        15
VDP_MEM        =81        129
VDP_REG        =80        128
main            00        0
mon_start_complete 5F        95
mon_start_init_serial 1B        27
mon_start_init_sound 06        6
mon_start_ram   4B        75
mon_start_ram_loop 54        84
mon_var_template 03        3
mon_var_template_end 4003      16387
print_a_hex      23C      572
print_char       20E      526
print_clear      21F      543
print_newLine    226      550
print_str        214      532
print_str_end    21E      542
print_wait_out   231      561
read_char        24D      589
var_buffer      4002      16386
var_buffer_len  4000      16384
var_last_char   4001      16385
xmodem_ack       4A1      1185
xmodem_await_conn  35A      858
xmodem_end       405      1029
xmodem_err       3CB      971
xmodem_init      32F      815
xmodem_int       40C      1036
xmodem_int_cont  42B      1067
xmodem_nak       4AF      1199
xmodem_out       45D      1117
xmodem_packet    365      869
xmodem_packet_EOT  3C3      963
xmodem_packet_get  377      887
xmodem_packet_get_crc  3B0      944
xmodem_packet_get_data  3A1      929
xmodem_read_timeount=03        3
xmodem_read_wait  430      1072
xmodem_read_wait_loop  43E      1086
xmodem_read_wait_timeout  45B      1115
xmodem_wait_out  463      1123
